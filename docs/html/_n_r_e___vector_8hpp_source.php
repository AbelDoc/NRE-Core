<!-- HTML header for doxygen 1.8.8-->
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <!-- For Mobile Devices -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
        <meta name="generator" content="Doxygen 1.8.11"/>
        <script type="text/javascript" src="../../js/jquery-2.1.1.min.js"></script>
        <title>NRE-Math: /mnt/c/Users/abell/Documents/GitHub/NRE-Utility/src/Utility/Vector/NRE_Vector.hpp Source File</title>
        <!--<link href="tabs.css" rel="stylesheet" type="text/css"/>-->
        <script type="text/javascript" src="dynsections.js"></script>
        <link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <link href='https://fonts.googleapis.com/css?family=Roboto+Slab' rel='stylesheet' type='text/css'>
        <?php
            include '../../php/navigation.php';
            if (!isset($_COOKIE["theme"]) || $_COOKIE["theme"] == "dark") {
                echo '<link href="../../css/dark/bootstrap.css" rel="stylesheet">';
            } else {
                echo '<link href="../../css/light/bootstrap.css" rel="stylesheet">';
            }
        ?>
        <script src="../../js/bootstrap.min.js"></script>
        <script type="text/javascript" src="doxy-boot.js"></script>
    </head>
    <body>
        <div class="container-fluid">
            <header class="page-header">
                <a href="../../../index.php">
                    <img src="../../img/Logo.png" class="logo img-responsive"/>
                </a>
            </header>
            <?php addNavigationBarInl(false); ?>
            <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
                <div class="content" id="content">
                    <div class="container">
                        <div class="row">
                            <div class="col-sm-12 panel " style="padding-bottom: 15px;">
                                <div style="margin-bottom: 15px;">
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li><a href="annotated.php"><span>Classes</span></a></li>
      <li class="current"><a href="files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.php"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.php">src</a></li><li class="navelem"><a class="el" href="dir_9761b53e3d9349800c0cb59b71c8cd3d.php">Utility</a></li><li class="navelem"><a class="el" href="dir_188c4a9cad2e3c8b6363ed3090d0a049.php">Vector</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">NRE_Vector.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_r_e___vector_8hpp.php">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">     #pragma once</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">     #include &lt;stdexcept&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">     #include &lt;utility&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">     #include &lt;cstring&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">     #include &quot;../String/NRE_String.hpp&quot;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="keyword">namespace </span><a class="code" href="namespace_n_r_e.php">NRE</a> {</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        <span class="keyword">namespace </span><a class="code" href="namespace_utility.php">Utility</a> {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_vector.php">   34</a></span>&#160;            <span class="keyword">class </span><a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                <span class="keyword">public</span> :    <span class="comment">// Iterator</span></div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_vector.php#a4f62eb0eba61b38e5f6b03c60ea6a49c">   37</a></span>&#160;<span class="comment"></span>                    <span class="keyword">typedef</span> T*          <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a4f62eb0eba61b38e5f6b03c60ea6a49c">Iterator</a>;</div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">   39</a></span>&#160;                    <span class="keyword">typedef</span> <span class="keyword">const</span> T*    <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a>;</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_vector.php#a52eee3309a729b97a0e9fd9e76a07fae">   41</a></span>&#160;                    <span class="keyword">typedef</span> std::reverse_iterator&lt;T*&gt;          <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a52eee3309a729b97a0e9fd9e76a07fae">ReverseIterator</a>;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                    <span class="keyword">typedef</span> std::reverse_iterator&lt;const T*&gt;    ConstReverseIterator;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                <span class="keyword">private</span> :   <span class="comment">// Fields</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                    std::size_t length;     </div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                    std::size_t capacity;   </div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                    T* data;                </div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                <span class="keyword">public</span> :    <span class="comment">// Methods</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                    <span class="comment">//## Constructor ##//</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#ad4013a6eedf95e4f7ba991da26c9bc5c">Vector</a>();</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#ad4013a6eedf95e4f7ba991da26c9bc5c">Vector</a>(std::size_t count, T <span class="keyword">const</span>&amp; value);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#ad4013a6eedf95e4f7ba991da26c9bc5c">Vector</a>(std::size_t count);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> InputIterator&gt;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#ad4013a6eedf95e4f7ba991da26c9bc5c">Vector</a>(InputIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a7aa353d783fef64406568550d4a883d1">begin</a>, InputIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a99c26a269e5bc0d86c3d2e048892354b">end</a>);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#ad4013a6eedf95e4f7ba991da26c9bc5c">Vector</a>(std::initializer_list&lt;T&gt; init);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    <span class="comment">//## Copy Constructor ##//</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#ad4013a6eedf95e4f7ba991da26c9bc5c">Vector</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> <span class="keyword">const</span>&amp; vec);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                    <span class="comment">//## Move Constructor ##//</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#ad4013a6eedf95e4f7ba991da26c9bc5c">Vector</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> &amp;&amp; vec);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                    <span class="comment">//## Deconstructor ##//</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#ab29b80e7a67b9530485c6771465bce28">~Vector</a>();</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    <span class="comment">//## Getter ##//</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment"></span>                        T&amp; <span class="keyword">get</span>(std::size_t index);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                        T <span class="keyword">const</span>&amp; <span class="keyword">get</span>(std::size_t index) <span class="keyword">const</span>;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                        T* <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a2ae8d5da9a73f3528d1b65295b237c63">getData</a>();</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                        <span class="keyword">const</span> T* <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a2ae8d5da9a73f3528d1b65295b237c63">getData</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                        T&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a873741553e4a855885aa842f248c9f11">getFront</a>();</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                        T <span class="keyword">const</span>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a873741553e4a855885aa842f248c9f11">getFront</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                        T&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#aca0d6f2c796a4a7ef2a54edf4a69324d">getLast</a>();</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                        T <span class="keyword">const</span>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#aca0d6f2c796a4a7ef2a54edf4a69324d">getLast</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a8c120aaf679f48aa5bb4f7ee51ea9ff6">getSize</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                        constexpr std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a0a98316cb06dd62423ad1c184e84d838">getMaxSize</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a6b86482f38d63cbffe6c0fb9b932cf76">getCapacity</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                        <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#ab053cb0a3701212b7e0a352a4d410c04">isEmpty</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                    <span class="comment">//## Iterator Access ##//</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment"></span>                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a7aa353d783fef64406568550d4a883d1">begin</a>();</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                        ConstIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a7aa353d783fef64406568550d4a883d1">begin</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                        ConstIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a1235e24f29b8c798448f7212223ac2db">cbegin</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a99c26a269e5bc0d86c3d2e048892354b">end</a>();</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                        ConstIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a99c26a269e5bc0d86c3d2e048892354b">end</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                        ConstIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a3e05dac568e481aa3dc99bcb2fa81bc5">cend</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                        ReverseIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a5ed9cfc1f219ef3670d02dbb938da41d">rbegin</a>();</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                        ConstReverseIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a5ed9cfc1f219ef3670d02dbb938da41d">rbegin</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                        ConstReverseIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#af1df2723bdc74b4ffab679a237ae2ae0">crbegin</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                        ReverseIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a5455bed3ad1618600685de6ca73e8f2d">rend</a>();</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                        ConstReverseIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a5455bed3ad1618600685de6ca73e8f2d">rend</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                        ConstReverseIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a02fb5d3837c5db11e7858f624acfdd5f">crend</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                    <span class="comment">//## Methods ##//</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment"></span>                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#ad26076d90066a1a8179e08a7cc7a8bf9">assign</a>(std::size_t count, T <span class="keyword">const</span>&amp; value);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> InputIterator&gt;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#ad26076d90066a1a8179e08a7cc7a8bf9">assign</a>(InputIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a7aa353d783fef64406568550d4a883d1">begin</a>, InputIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a99c26a269e5bc0d86c3d2e048892354b">end</a>);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a53b14e9f414f1304e2e3fb1c39bb7086">reserve</a>(std::size_t size);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                        template &lt;typename U = T, typename std::enable_if&lt;!std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00233"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_vector.php#adbf7f3450844b9fea8610732c2912d8e">  233</a></span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#adbf7f3450844b9fea8610732c2912d8e">clear</a>() noexcept {</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                            <span class="keywordflow">for</span> (std::size_t i = 0; i &lt; length; i++) {</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                data[i].~T();</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                            }</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                            length = 0;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                        }</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                        template &lt;typename U = T, typename std::enable_if&lt;std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00243"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_vector.php#adbf7f3450844b9fea8610732c2912d8e">  243</a></span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#adbf7f3450844b9fea8610732c2912d8e">clear</a>() noexcept {</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                            length = 0;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                        }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a95239a3a4d64dcded470a0e7a68326a3">insert</a>(ConstIterator start, T <span class="keyword">const</span>&amp; value);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a95239a3a4d64dcded470a0e7a68326a3">insert</a>(ConstIterator start, std::size_t count, T <span class="keyword">const</span>&amp; value);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> InputIterator&gt;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a95239a3a4d64dcded470a0e7a68326a3">insert</a>(ConstIterator start, InputIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a7aa353d783fef64406568550d4a883d1">begin</a>, InputIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a99c26a269e5bc0d86c3d2e048892354b">end</a>);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a95239a3a4d64dcded470a0e7a68326a3">insert</a>(ConstIterator start, std::initializer_list&lt;T&gt; list);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class </span>... Args&gt;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#ab6ee01cb2c95fa62f6dab6cbdb7e5c95">emplace</a>(ConstIterator start, Args &amp;&amp; ... args);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#aace4ba5a783ddb11a1b39cf0b7ea92ff">erase</a>(ConstIterator pos);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#aace4ba5a783ddb11a1b39cf0b7ea92ff">erase</a>(ConstIterator begin, ConstIterator end);</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a1275882662e370b622c78880ed57a703">pushBack</a>(T <span class="keyword">const</span>&amp; value);</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a1275882662e370b622c78880ed57a703">pushBack</a>(T &amp;&amp; value);</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class </span>... Args&gt;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a66855834bd04ef8d1e535909975b77e2">emplaceBack</a>(Args &amp;&amp; ... args);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                        template &lt;typename U = T, typename std::enable_if&lt;!std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00323"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_vector.php#a3d808b6e7fedafc95b472c3dda5af3f0">  323</a></span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a3d808b6e7fedafc95b472c3dda5af3f0">popBack</a>() {</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                            *(<a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a99c26a269e5bc0d86c3d2e048892354b">end</a>() - 1).~T();</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                            length--;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                        }</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                        template &lt;typename U = T, typename std::enable_if&lt;std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00331"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_vector.php#a3d808b6e7fedafc95b472c3dda5af3f0">  331</a></span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a3d808b6e7fedafc95b472c3dda5af3f0">popBack</a>() {</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                            length--;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                        }</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#af414d545204d0288d12293382c5c091e">resize</a>(std::size_t count);</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#af414d545204d0288d12293382c5c091e">resize</a>(std::size_t count, T <span class="keyword">const</span>&amp; value);</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a7178023d23d25c5bf762c1851044042f">swap</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a>&amp; vec);</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#abfda77f44caf07a116636de6daebf336">shrinkToFit</a>();</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                    <span class="comment">//## Access Operator ##//</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment"></span>                        T&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a6fabf24c5fb7d29cce7217a2d52f832f">operator[]</a>(std::size_t index);</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                        T <span class="keyword">const</span>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a6fabf24c5fb7d29cce7217a2d52f832f">operator[]</a>(std::size_t index) <span class="keyword">const</span>;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                    <span class="comment">//## Assignment Operator ##//</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a0d79e58c0fa7ea52628a3b84b54a1c6f">operator =</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> <span class="keyword">const</span>&amp; vec);</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#a0d79e58c0fa7ea52628a3b84b54a1c6f">operator =</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> &amp;&amp; vec);</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                    <span class="comment">//## Comparison Operator ##//</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment"></span>                        template &lt;typename U = T, typename std::enable_if&lt;!std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00390"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_vector.php#aff21ca4b619758e7d5f816113750d5dd">  390</a></span>&#160;                        <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#aff21ca4b619758e7d5f816113750d5dd">operator ==</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> <span class="keyword">const</span>&amp; vec)<span class="keyword"> const </span>{</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                            <span class="keywordtype">bool</span> equal = <span class="keyword">true</span>;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                            std::size_t current = 0;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                            <span class="keywordflow">while</span> (equal &amp;&amp; current &lt; length) {</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                                equal = data[current] == vec[current];</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                                current++;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                            }</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                            <span class="keywordflow">return</span> equal;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                        }</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                        template &lt;typename U = T, typename std::enable_if&lt;std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00405"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_vector.php#aff21ca4b619758e7d5f816113750d5dd">  405</a></span>&#160;                        <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#aff21ca4b619758e7d5f816113750d5dd">operator ==</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> <span class="keyword">const</span>&amp; vec)<span class="keyword"> const </span>{</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                            <span class="keywordflow">if</span> (length != vec.length) {</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                            }</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                            <span class="keywordflow">return</span> std::memcmp(data, vec.data, length * <span class="keyword">sizeof</span>(T)) == 0;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                        }</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                        <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#adc1b419631e45a8e8a8cdafe02be6129">operator !=</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> <span class="keyword">const</span>&amp; vec) <span class="keyword">const</span>;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                    <span class="comment">//## Stream Operator ##//</span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">String</a> <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php#ae06ea911c6026374457bfc4ba19d8d57">toString</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                <span class="keyword">private</span> :   <span class="comment">// Methods</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="comment"></span>                    <span class="keywordtype">void</span> reallocate();</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                    template &lt;typename U = T, typename std::enable_if&lt;!std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                    <span class="keywordtype">void</span> reallocate(std::size_t newSize) {</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                        capacity = newSize;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;                        T* newData = static_cast &lt;T*&gt; (::operator <span class="keyword">new</span>(capacity * <span class="keyword">sizeof</span>(T)));</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                        <span class="keywordflow">for</span> (std::size_t current = 0; current &lt; length; current++) {</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                            newData[current] = std::move(*(<span class="keyword">new</span>(&amp;newData[current]) T (std::move(data[current]))));</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                        }</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                        ::operator <span class="keyword">delete</span>(data);</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                        data = newData;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                    }</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                    template &lt;typename U = T, typename std::enable_if&lt;std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                    <span class="keywordtype">void</span> reallocate(std::size_t newSize) {</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                        capacity = newSize;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                        T* newData = static_cast &lt;T*&gt; (::operator <span class="keyword">new</span>(capacity * <span class="keyword">sizeof</span>(T)));</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                        std::memmove(newData, data, length * <span class="keyword">sizeof</span>(T));</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                        ::operator <span class="keyword">delete</span>(data);</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                        data = newData;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                    }</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                    <span class="keywordtype">void</span> reserveWithGrowFactor(std::size_t size);</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                    template &lt;typename U = T, typename std::enable_if&lt;!std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                    <span class="keywordtype">void</span> shift(std::size_t start, std::size_t count) {</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                        <span class="keywordflow">for</span> (std::size_t index = length + count - 1; index != start + count - 1; index--) {</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                            data[index] = std::move(*(<span class="keyword">new</span>(&amp;data[index]) T (std::move(data[index - count]))));</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                        }</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                    }</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                    template &lt;typename U = T, typename std::enable_if&lt;std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                    <span class="keywordtype">void</span> shift(std::size_t start, std::size_t count) {</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                        std::memmove(data + start + count, data + start, (length - start) * <span class="keyword">sizeof</span>(T));</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                    }</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                    template &lt;typename U = T, typename std::enable_if&lt;!std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                    <span class="keywordtype">void</span> shiftBack(std::size_t start, std::size_t count) {</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                        <span class="keywordflow">for</span> (std::size_t index = start; index &lt; start + count; index++) {</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                            data[index] = std::move(*(<span class="keyword">new</span>(&amp;data[index]) T (std::move(data[index + count]))));</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                        }</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                    }</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                    template &lt;typename U = T, typename std::enable_if&lt;std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                    <span class="keywordtype">void</span> shiftBack(std::size_t start, std::size_t count) {</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                        std::memmove(data + start, data + start + count, (length - start) * <span class="keyword">sizeof</span>(T));</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                    }</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                    template &lt;typename U = T, typename std::enable_if&lt;!std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                    <span class="keywordtype">void</span> copy(<a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> <span class="keyword">const</span>&amp; vec) {</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                        std::size_t current = 0;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                        <span class="keywordflow">for</span> (T <span class="keyword">const</span>&amp; it : vec) {</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                            data[current] = *(<span class="keyword">new</span>(&amp;data[current]) T (it));</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                            current++;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                        }</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                    }</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                    template &lt;typename U = T, typename std::enable_if&lt;std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                    <span class="keywordtype">void</span> copy(<a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> <span class="keyword">const</span>&amp; vec) {</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                        std::memcpy(data, vec.data, vec.length * <span class="keyword">sizeof</span>(T));</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                    }</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                <span class="keyword">private</span> :    <span class="comment">// Static</span></div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                    <span class="keyword">static</span> constexpr <span class="keywordtype">float</span> GROW_FACTOR = 1.5;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                    <span class="keyword">static</span> constexpr std::size_t BASE_ALLOCATION_SIZE = 8;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;            };</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;            std::ostream&amp; operator &lt;&lt;(std::ostream&amp; stream, Vector&lt;T&gt; <span class="keyword">const</span>&amp; o);</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        }</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    }</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;<span class="preprocessor">    #include &quot;NRE_Vector.tpp&quot;</span></div><div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_a3d808b6e7fedafc95b472c3dda5af3f0"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#a3d808b6e7fedafc95b472c3dda5af3f0">NRE::Utility::Vector::popBack</a></div><div class="ttdeci">void popBack()</div><div class="ttdef"><b>Definition:</b> NRE_Vector.hpp:323</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_a95239a3a4d64dcded470a0e7a68326a3"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#a95239a3a4d64dcded470a0e7a68326a3">NRE::Utility::Vector::insert</a></div><div class="ttdeci">Iterator insert(ConstIterator start, T const &amp;value)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_af414d545204d0288d12293382c5c091e"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#af414d545204d0288d12293382c5c091e">NRE::Utility::Vector::resize</a></div><div class="ttdeci">void resize(std::size_t count)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_a873741553e4a855885aa842f248c9f11"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#a873741553e4a855885aa842f248c9f11">NRE::Utility::Vector::getFront</a></div><div class="ttdeci">T &amp; getFront()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_a6b86482f38d63cbffe6c0fb9b932cf76"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#a6b86482f38d63cbffe6c0fb9b932cf76">NRE::Utility::Vector::getCapacity</a></div><div class="ttdeci">std::size_t getCapacity() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_aca0d6f2c796a4a7ef2a54edf4a69324d"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#aca0d6f2c796a4a7ef2a54edf4a69324d">NRE::Utility::Vector::getLast</a></div><div class="ttdeci">T &amp; getLast()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_a52eee3309a729b97a0e9fd9e76a07fae"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#a52eee3309a729b97a0e9fd9e76a07fae">NRE::Utility::Vector::ReverseIterator</a></div><div class="ttdeci">std::reverse_iterator&lt; T * &gt; ReverseIterator</div><div class="ttdef"><b>Definition:</b> NRE_Vector.hpp:41</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_a2ae8d5da9a73f3528d1b65295b237c63"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#a2ae8d5da9a73f3528d1b65295b237c63">NRE::Utility::Vector::getData</a></div><div class="ttdeci">T * getData()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_a4f62eb0eba61b38e5f6b03c60ea6a49c"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#a4f62eb0eba61b38e5f6b03c60ea6a49c">NRE::Utility::Vector::Iterator</a></div><div class="ttdeci">T * Iterator</div><div class="ttdef"><b>Definition:</b> NRE_Vector.hpp:37</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_a66855834bd04ef8d1e535909975b77e2"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#a66855834bd04ef8d1e535909975b77e2">NRE::Utility::Vector::emplaceBack</a></div><div class="ttdeci">void emplaceBack(Args &amp;&amp;...args)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_aace4ba5a783ddb11a1b39cf0b7ea92ff"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#aace4ba5a783ddb11a1b39cf0b7ea92ff">NRE::Utility::Vector::erase</a></div><div class="ttdeci">Iterator erase(ConstIterator pos)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_aff21ca4b619758e7d5f816113750d5dd"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#aff21ca4b619758e7d5f816113750d5dd">NRE::Utility::Vector::operator==</a></div><div class="ttdeci">bool operator==(Vector const &amp;vec) const </div><div class="ttdef"><b>Definition:</b> NRE_Vector.hpp:390</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_ad4013a6eedf95e4f7ba991da26c9bc5c"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#ad4013a6eedf95e4f7ba991da26c9bc5c">NRE::Utility::Vector::Vector</a></div><div class="ttdeci">Vector()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_a7aa353d783fef64406568550d4a883d1"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#a7aa353d783fef64406568550d4a883d1">NRE::Utility::Vector::begin</a></div><div class="ttdeci">Iterator begin()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_a5ed9cfc1f219ef3670d02dbb938da41d"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#a5ed9cfc1f219ef3670d02dbb938da41d">NRE::Utility::Vector::rbegin</a></div><div class="ttdeci">ReverseIterator rbegin()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_a99c26a269e5bc0d86c3d2e048892354b"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#a99c26a269e5bc0d86c3d2e048892354b">NRE::Utility::Vector::end</a></div><div class="ttdeci">Iterator end()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_a1275882662e370b622c78880ed57a703"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#a1275882662e370b622c78880ed57a703">NRE::Utility::Vector::pushBack</a></div><div class="ttdeci">void pushBack(T const &amp;value)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_a0a98316cb06dd62423ad1c184e84d838"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#a0a98316cb06dd62423ad1c184e84d838">NRE::Utility::Vector::getMaxSize</a></div><div class="ttdeci">constexpr std::size_t getMaxSize() const </div></div>
<div class="ttc" id="namespace_n_r_e_php"><div class="ttname"><a href="namespace_n_r_e.php">NRE</a></div><div class="ttdoc">The NearlyRealEngine&amp;#39;s global namespace. </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_ab6ee01cb2c95fa62f6dab6cbdb7e5c95"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#ab6ee01cb2c95fa62f6dab6cbdb7e5c95">NRE::Utility::Vector::emplace</a></div><div class="ttdeci">Iterator emplace(ConstIterator start, Args &amp;&amp;...args)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_a7178023d23d25c5bf762c1851044042f"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#a7178023d23d25c5bf762c1851044042f">NRE::Utility::Vector::swap</a></div><div class="ttdeci">void swap(Vector &amp;vec)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_adbf7f3450844b9fea8610732c2912d8e"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#adbf7f3450844b9fea8610732c2912d8e">NRE::Utility::Vector::clear</a></div><div class="ttdeci">void clear() noexcept</div><div class="ttdef"><b>Definition:</b> NRE_Vector.hpp:233</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_ab29b80e7a67b9530485c6771465bce28"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#ab29b80e7a67b9530485c6771465bce28">NRE::Utility::Vector::~Vector</a></div><div class="ttdeci">~Vector()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_a1235e24f29b8c798448f7212223ac2db"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#a1235e24f29b8c798448f7212223ac2db">NRE::Utility::Vector::cbegin</a></div><div class="ttdeci">ConstIterator cbegin() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a></div><div class="ttdoc">A basic template string, with dynamic size, guarantee to be in contiguous memory. ...</div><div class="ttdef"><b>Definition:</b> NRE_String.hpp:36</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_ad26076d90066a1a8179e08a7cc7a8bf9"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#ad26076d90066a1a8179e08a7cc7a8bf9">NRE::Utility::Vector::assign</a></div><div class="ttdeci">void assign(std::size_t count, T const &amp;value)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_a8c120aaf679f48aa5bb4f7ee51ea9ff6"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#a8c120aaf679f48aa5bb4f7ee51ea9ff6">NRE::Utility::Vector::getSize</a></div><div class="ttdeci">std::size_t getSize() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_a00fbf24e911c0a9ccee4a3b0eac8e5b1"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">NRE::Utility::Vector::ConstIterator</a></div><div class="ttdeci">const T * ConstIterator</div><div class="ttdef"><b>Definition:</b> NRE_Vector.hpp:39</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_ae06ea911c6026374457bfc4ba19d8d57"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#ae06ea911c6026374457bfc4ba19d8d57">NRE::Utility::Vector::toString</a></div><div class="ttdeci">String toString() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_a0d79e58c0fa7ea52628a3b84b54a1c6f"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#a0d79e58c0fa7ea52628a3b84b54a1c6f">NRE::Utility::Vector::operator=</a></div><div class="ttdeci">Vector &amp; operator=(Vector const &amp;vec)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_ab053cb0a3701212b7e0a352a4d410c04"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#ab053cb0a3701212b7e0a352a4d410c04">NRE::Utility::Vector::isEmpty</a></div><div class="ttdeci">bool isEmpty() const </div></div>
<div class="ttc" id="namespace_utility_php"><div class="ttname"><a href="namespace_utility.php">Utility</a></div><div class="ttdoc">Utility&amp;#39;s API. </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_a02fb5d3837c5db11e7858f624acfdd5f"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#a02fb5d3837c5db11e7858f624acfdd5f">NRE::Utility::Vector::crend</a></div><div class="ttdeci">ConstReverseIterator crend() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_a53b14e9f414f1304e2e3fb1c39bb7086"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#a53b14e9f414f1304e2e3fb1c39bb7086">NRE::Utility::Vector::reserve</a></div><div class="ttdeci">void reserve(std::size_t size)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_adc1b419631e45a8e8a8cdafe02be6129"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#adc1b419631e45a8e8a8cdafe02be6129">NRE::Utility::Vector::operator!=</a></div><div class="ttdeci">bool operator!=(Vector const &amp;vec) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_a3e05dac568e481aa3dc99bcb2fa81bc5"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#a3e05dac568e481aa3dc99bcb2fa81bc5">NRE::Utility::Vector::cend</a></div><div class="ttdeci">ConstIterator cend() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_af1df2723bdc74b4ffab679a237ae2ae0"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#af1df2723bdc74b4ffab679a237ae2ae0">NRE::Utility::Vector::crbegin</a></div><div class="ttdeci">ConstReverseIterator crbegin() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_a6fabf24c5fb7d29cce7217a2d52f832f"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#a6fabf24c5fb7d29cce7217a2d52f832f">NRE::Utility::Vector::operator[]</a></div><div class="ttdeci">T &amp; operator[](std::size_t index)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_a5455bed3ad1618600685de6ca73e8f2d"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#a5455bed3ad1618600685de6ca73e8f2d">NRE::Utility::Vector::rend</a></div><div class="ttdeci">ReverseIterator rend()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a></div><div class="ttdoc">A dynamic array, guarantee to be in contiguous memory. </div><div class="ttdef"><b>Definition:</b> NRE_Vector.hpp:34</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php_abfda77f44caf07a116636de6daebf336"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php#abfda77f44caf07a116636de6daebf336">NRE::Utility::Vector::shrinkToFit</a></div><div class="ttdeci">void shrinkToFit()</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- HTML footer for doxygen 1.8.8-->
<!-- start footer part -->
</div>
</div>
</div>
</div>
</div>
</div>
</body>
</html>
