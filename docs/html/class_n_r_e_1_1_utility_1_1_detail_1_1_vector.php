<!-- HTML header for doxygen 1.8.8-->
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <!-- For Mobile Devices -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
        <meta name="generator" content="Doxygen 1.8.11"/>
        <script type="text/javascript" src="../../js/jquery-2.1.1.min.js"></script>
        <title>NRE-Utility: NRE::Utility::Detail::Vector&lt; T, Allocator &gt; Class Template Reference</title>
        <!--<link href="tabs.css" rel="stylesheet" type="text/css"/>-->
        <script type="text/javascript" src="dynsections.js"></script>
        <link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <link href='https://fonts.googleapis.com/css?family=Roboto+Slab' rel='stylesheet' type='text/css'>
        <?php
            include '../../php/navigation.php';
            if (!isset($_COOKIE["theme"]) || $_COOKIE["theme"] == "dark") {
                echo '<link href="../../css/dark/bootstrap.css" rel="stylesheet">';
            } else {
                echo '<link href="../../css/light/bootstrap.css" rel="stylesheet">';
            }
        ?>
        <script src="../../js/bootstrap.min.js"></script>
        <script type="text/javascript" src="doxy-boot.js"></script>
    </head>
    <body>
        <div class="container-fluid">
            <header class="page-header">
                <a href="../../../index.php">
                    <img src="../../img/Logo.png" class="logo img-responsive"/>
                </a>
            </header>
            <?php addNavigationBarInl(false); ?>
            <div id="top" class="row"><!-- do not remove this div, it is closed by doxygen! -->
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-body">
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespace_n_r_e.php">NRE</a></li><li class="navelem"><b>Utility</b></li><li class="navelem"><b>Detail</b></li><li class="navelem"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector-members.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">NRE::Utility::Detail::Vector&lt; T, Allocator &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A dynamic array, guarantee to be in contiguous memory.  
 <a href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_detail_2_vector_2_n_r_e___vector_8hpp_source.php">NRE_Vector.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for NRE::Utility::Detail::Vector&lt; T, Allocator &gt;:</div>
<div class="dyncontent">
 <div class="center">
  <img src="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.png" usemap="#NRE::Utility::Detail::Vector_3C_20T_2C_20Allocator_20_3E_map" alt=""/>
  <map id="NRE::Utility::Detail::Vector_3C_20T_2C_20Allocator_20_3E_map" name="NRE::Utility::Detail::Vector&lt; T, Allocator &gt;_map">
<area href="class_n_r_e_1_1_utility_1_1_stringable.php" alt="NRE::Utility::Stringable&lt; Vector&lt; T, Allocator &gt; &gt;" shape="rect" coords="0,56,394,80"/>
<area href="class_n_r_e_1_1_utility_1_1_static_interface.php" title="Describe an object using CRTP to create static interface (static polymorphism) " alt="NRE::Utility::StaticInterface&lt; T &gt;" shape="rect" coords="0,0,394,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:afe57483f5b5e6af2694a084a372d224c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afe57483f5b5e6af2694a084a372d224c">ValueType</a> = T</td></tr>
<tr class="separator:afe57483f5b5e6af2694a084a372d224c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c2cdf70435eb56895d6ea0464aadc0f"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a1c2cdf70435eb56895d6ea0464aadc0f">AllocatorType</a> = Allocator</td></tr>
<tr class="separator:a1c2cdf70435eb56895d6ea0464aadc0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab312674a156498a72bd5e4aca800b098"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a> = std::size_t</td></tr>
<tr class="separator:ab312674a156498a72bd5e4aca800b098"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acfb6ea52f582a024ab8f43d4c540b6fb"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#acfb6ea52f582a024ab8f43d4c540b6fb">DifferenceType</a> = std::ptrdiff_t</td></tr>
<tr class="separator:acfb6ea52f582a024ab8f43d4c540b6fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7631518ee078f3464da147c4d52d4868"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a7631518ee078f3464da147c4d52d4868">Reference</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afe57483f5b5e6af2694a084a372d224c">ValueType</a> &amp;</td></tr>
<tr class="separator:a7631518ee078f3464da147c4d52d4868"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6502afbd7a842a3d6e61c7bd811ecff7"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6502afbd7a842a3d6e61c7bd811ecff7">ConstReference</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afe57483f5b5e6af2694a084a372d224c">ValueType</a> const &amp;</td></tr>
<tr class="separator:a6502afbd7a842a3d6e61c7bd811ecff7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a031e5dcbd857faad81733cad07637ffe"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a031e5dcbd857faad81733cad07637ffe">Pointer</a> = typename AllocatorType::Pointer</td></tr>
<tr class="separator:a031e5dcbd857faad81733cad07637ffe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbb7cb5832ddc4d40051ab6bd28f5617"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#acbb7cb5832ddc4d40051ab6bd28f5617">ConstPointer</a> = typename AllocatorType::ConstPointer</td></tr>
<tr class="separator:acbb7cb5832ddc4d40051ab6bd28f5617"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aedc34798595924837f67fe06ae52dde7"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aedc34798595924837f67fe06ae52dde7">Iterator</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a031e5dcbd857faad81733cad07637ffe">Pointer</a></td></tr>
<tr class="separator:aedc34798595924837f67fe06ae52dde7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd29351c483eaf1b8b1322463b1ae11f"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#acbb7cb5832ddc4d40051ab6bd28f5617">ConstPointer</a></td></tr>
<tr class="separator:afd29351c483eaf1b8b1322463b1ae11f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa4905e29539752688529b811a7c86af"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afa4905e29539752688529b811a7c86af">ReverseIterator</a> = std::reverse_iterator&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aedc34798595924837f67fe06ae52dde7">Iterator</a> &gt;</td></tr>
<tr class="separator:afa4905e29539752688529b811a7c86af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e58558b1c1dc784df060e26acf9e6b3"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a8e58558b1c1dc784df060e26acf9e6b3">ConstReverseIterator</a> = std::reverse_iterator&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a> &gt;</td></tr>
<tr class="separator:a8e58558b1c1dc784df060e26acf9e6b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a3b1914f63f8020a45f0e6d4efca1a6"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a5a3b1914f63f8020a45f0e6d4efca1a6">value_type</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afe57483f5b5e6af2694a084a372d224c">ValueType</a></td></tr>
<tr class="separator:a5a3b1914f63f8020a45f0e6d4efca1a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f8483736c3ab10b3c801351f0f7c544"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6f8483736c3ab10b3c801351f0f7c544">allocator_type</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a1c2cdf70435eb56895d6ea0464aadc0f">AllocatorType</a></td></tr>
<tr class="separator:a6f8483736c3ab10b3c801351f0f7c544"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd4227df24559a4ac1d0b762c1ed2cf5"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#acd4227df24559a4ac1d0b762c1ed2cf5">size_type</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a></td></tr>
<tr class="separator:acd4227df24559a4ac1d0b762c1ed2cf5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7ea52aac53280651fd22821760d01b1"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aa7ea52aac53280651fd22821760d01b1">difference_type</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#acfb6ea52f582a024ab8f43d4c540b6fb">DifferenceType</a></td></tr>
<tr class="separator:aa7ea52aac53280651fd22821760d01b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2e440b6a1f92e80d3c350e43856f96f"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aa2e440b6a1f92e80d3c350e43856f96f">reference</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a7631518ee078f3464da147c4d52d4868">Reference</a></td></tr>
<tr class="separator:aa2e440b6a1f92e80d3c350e43856f96f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1a52d0f6f9194d1040373c1baba7509"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab1a52d0f6f9194d1040373c1baba7509">const_reference</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6502afbd7a842a3d6e61c7bd811ecff7">ConstReference</a></td></tr>
<tr class="separator:ab1a52d0f6f9194d1040373c1baba7509"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35bce7ca703d329523b019d1ab878426"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a35bce7ca703d329523b019d1ab878426">pointer</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a031e5dcbd857faad81733cad07637ffe">Pointer</a></td></tr>
<tr class="separator:a35bce7ca703d329523b019d1ab878426"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa261e992e18ec32649868349768dc497"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aa261e992e18ec32649868349768dc497">const_pointer</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#acbb7cb5832ddc4d40051ab6bd28f5617">ConstPointer</a></td></tr>
<tr class="separator:aa261e992e18ec32649868349768dc497"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64cce560b28cbb50d5f712e1516f8c47"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a64cce560b28cbb50d5f712e1516f8c47">iterator</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aedc34798595924837f67fe06ae52dde7">Iterator</a></td></tr>
<tr class="separator:a64cce560b28cbb50d5f712e1516f8c47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeba47a9a6c630be01d06ddd2d26eb6ea"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aeba47a9a6c630be01d06ddd2d26eb6ea">const_iterator</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a></td></tr>
<tr class="separator:aeba47a9a6c630be01d06ddd2d26eb6ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94c32d30b090c68244c77db1cd60a169"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a94c32d30b090c68244c77db1cd60a169">reverse_iterator</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afa4905e29539752688529b811a7c86af">ReverseIterator</a></td></tr>
<tr class="separator:a94c32d30b090c68244c77db1cd60a169"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b34427c33713e00605fa1847d50d298"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a3b34427c33713e00605fa1847d50d298">const_reverse_iterator</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a8e58558b1c1dc784df060e26acf9e6b3">ConstReverseIterator</a></td></tr>
<tr class="separator:a3b34427c33713e00605fa1847d50d298"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a95239c62edf4a9d822f3477e160b3384"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a95239c62edf4a9d822f3477e160b3384">Vector</a> (Allocator const &amp;alloc=Allocator())</td></tr>
<tr class="separator:a95239c62edf4a9d822f3477e160b3384"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fc2dd589b85bae8c7839000448db609"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a3fc2dd589b85bae8c7839000448db609">Vector</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a> count, <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6502afbd7a842a3d6e61c7bd811ecff7">ConstReference</a> value, Allocator const &amp;alloc=Allocator())</td></tr>
<tr class="separator:a3fc2dd589b85bae8c7839000448db609"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c33670d5ff85b519c5152ef85dc9e3a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6c33670d5ff85b519c5152ef85dc9e3a">Vector</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a> count, Allocator const &amp;alloc=Allocator())</td></tr>
<tr class="separator:a6c33670d5ff85b519c5152ef85dc9e3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94d1b4a939641a6b8a8ce3cc1d5b4c34"><td class="memTemplParams" colspan="2">template&lt;class InputIterator &gt; </td></tr>
<tr class="memitem:a94d1b4a939641a6b8a8ce3cc1d5b4c34"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a94d1b4a939641a6b8a8ce3cc1d5b4c34">Vector</a> (<a class="el" href="struct_n_r_e_1_1_utility_1_1_input_iterator.php">InputIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a1abe614a22ed274e9ebac84e520c3524">begin</a>, <a class="el" href="struct_n_r_e_1_1_utility_1_1_input_iterator.php">InputIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a2c3f2ffdf73b574662795a0fc6512b9c">end</a>, Allocator const &amp;alloc=Allocator())</td></tr>
<tr class="separator:a94d1b4a939641a6b8a8ce3cc1d5b4c34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51f7f330345beabfc269fc89c804329c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a51f7f330345beabfc269fc89c804329c">Vector</a> (std::initializer_list&lt; T &gt; init, Allocator const &amp;alloc=Allocator())</td></tr>
<tr class="separator:a51f7f330345beabfc269fc89c804329c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaece92f04fbc9ea8bc4d926f610c4973"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aaece92f04fbc9ea8bc4d926f610c4973">Vector</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a> const &amp;vec)</td></tr>
<tr class="separator:aaece92f04fbc9ea8bc4d926f610c4973"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8160b103e79d68d660e46c531636414"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab8160b103e79d68d660e46c531636414">Vector</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a> const &amp;vec, Allocator const &amp;alloc)</td></tr>
<tr class="separator:ab8160b103e79d68d660e46c531636414"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c4eccffb2c90259bddc197c2551c945"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a5c4eccffb2c90259bddc197c2551c945">Vector</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a> &amp;&amp;vec)</td></tr>
<tr class="separator:a5c4eccffb2c90259bddc197c2551c945"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6f492f81a8cc9fced1da1053e13610e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ac6f492f81a8cc9fced1da1053e13610e">Vector</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a> &amp;&amp;vec, Allocator const &amp;alloc)</td></tr>
<tr class="separator:ac6f492f81a8cc9fced1da1053e13610e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c23d4206db910b24d944da31548806a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a0c23d4206db910b24d944da31548806a">~Vector</a> ()</td></tr>
<tr class="separator:a0c23d4206db910b24d944da31548806a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0d6bde89eb2ccfdaeab56b16d373277"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a7631518ee078f3464da147c4d52d4868">Reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ac0d6bde89eb2ccfdaeab56b16d373277">get</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a> index)</td></tr>
<tr class="separator:ac0d6bde89eb2ccfdaeab56b16d373277"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aece05eb703a626131041e0280713ec36"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6502afbd7a842a3d6e61c7bd811ecff7">ConstReference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aece05eb703a626131041e0280713ec36">get</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a> index) const </td></tr>
<tr class="separator:aece05eb703a626131041e0280713ec36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94c1b7c9da2e6f16737dfca98e9a2c6d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a031e5dcbd857faad81733cad07637ffe">Pointer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a94c1b7c9da2e6f16737dfca98e9a2c6d">getData</a> ()</td></tr>
<tr class="separator:a94c1b7c9da2e6f16737dfca98e9a2c6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aafc41b696e843a90637b7ba302b1dff2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#acbb7cb5832ddc4d40051ab6bd28f5617">ConstPointer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aafc41b696e843a90637b7ba302b1dff2">getData</a> () const </td></tr>
<tr class="separator:aafc41b696e843a90637b7ba302b1dff2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0406623da13793f246b93577acfbb01"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#acbb7cb5832ddc4d40051ab6bd28f5617">ConstPointer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab0406623da13793f246b93577acfbb01">getCData</a> () const </td></tr>
<tr class="separator:ab0406623da13793f246b93577acfbb01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab94a642fcd8f776e2efefd858c27b878"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a7631518ee078f3464da147c4d52d4868">Reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab94a642fcd8f776e2efefd858c27b878">getFront</a> ()</td></tr>
<tr class="separator:ab94a642fcd8f776e2efefd858c27b878"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3d2f570694edc7fd52f45738cd1062d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6502afbd7a842a3d6e61c7bd811ecff7">ConstReference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aa3d2f570694edc7fd52f45738cd1062d">getFront</a> () const </td></tr>
<tr class="separator:aa3d2f570694edc7fd52f45738cd1062d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea32f67a58479e471b62b19fd4b4b3e0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a7631518ee078f3464da147c4d52d4868">Reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aea32f67a58479e471b62b19fd4b4b3e0">getLast</a> ()</td></tr>
<tr class="separator:aea32f67a58479e471b62b19fd4b4b3e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60aae4ed560b623175c4532e03de287e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6502afbd7a842a3d6e61c7bd811ecff7">ConstReference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a60aae4ed560b623175c4532e03de287e">getLast</a> () const </td></tr>
<tr class="separator:a60aae4ed560b623175c4532e03de287e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b5a2e2891ec0bb69091a0903f2165b8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a0b5a2e2891ec0bb69091a0903f2165b8">getSize</a> () const </td></tr>
<tr class="separator:a0b5a2e2891ec0bb69091a0903f2165b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9fb5fc358fabd54d8561c60c472574a"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab9fb5fc358fabd54d8561c60c472574a">getMaxSize</a> () const </td></tr>
<tr class="separator:ab9fb5fc358fabd54d8561c60c472574a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94796177211da4f68e8b2cb02ee14801"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a94796177211da4f68e8b2cb02ee14801">getCapacity</a> () const </td></tr>
<tr class="separator:a94796177211da4f68e8b2cb02ee14801"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0fbc2d4eab54cf9dd85d0f2c8215a6bf"><td class="memItemLeft" align="right" valign="top">Allocator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a0fbc2d4eab54cf9dd85d0f2c8215a6bf">getAllocator</a> () const </td></tr>
<tr class="separator:a0fbc2d4eab54cf9dd85d0f2c8215a6bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac13bd8ac0869f6529a677462ded42de3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ac13bd8ac0869f6529a677462ded42de3">isEmpty</a> () const </td></tr>
<tr class="separator:ac13bd8ac0869f6529a677462ded42de3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1abe614a22ed274e9ebac84e520c3524"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aedc34798595924837f67fe06ae52dde7">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a1abe614a22ed274e9ebac84e520c3524">begin</a> ()</td></tr>
<tr class="separator:a1abe614a22ed274e9ebac84e520c3524"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2163c14732578dfa7af873b8fc782bcc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a2163c14732578dfa7af873b8fc782bcc">begin</a> () const </td></tr>
<tr class="separator:a2163c14732578dfa7af873b8fc782bcc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1df24fb0383b319fd7c3112ac2a190aa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a1df24fb0383b319fd7c3112ac2a190aa">cbegin</a> () const </td></tr>
<tr class="separator:a1df24fb0383b319fd7c3112ac2a190aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c3f2ffdf73b574662795a0fc6512b9c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aedc34798595924837f67fe06ae52dde7">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a2c3f2ffdf73b574662795a0fc6512b9c">end</a> ()</td></tr>
<tr class="separator:a2c3f2ffdf73b574662795a0fc6512b9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba45936981b88e0152f6a48a89a32066"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aba45936981b88e0152f6a48a89a32066">end</a> () const </td></tr>
<tr class="separator:aba45936981b88e0152f6a48a89a32066"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef9f09e0e013ec41084a035533df3fd3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aef9f09e0e013ec41084a035533df3fd3">cend</a> () const </td></tr>
<tr class="separator:aef9f09e0e013ec41084a035533df3fd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac13d1c1303680cc7bcd0ec2d3a407af4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afa4905e29539752688529b811a7c86af">ReverseIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ac13d1c1303680cc7bcd0ec2d3a407af4">rbegin</a> ()</td></tr>
<tr class="separator:ac13d1c1303680cc7bcd0ec2d3a407af4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2a49a2a71dc054bd664b2236d4de411"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a8e58558b1c1dc784df060e26acf9e6b3">ConstReverseIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ae2a49a2a71dc054bd664b2236d4de411">rbegin</a> () const </td></tr>
<tr class="separator:ae2a49a2a71dc054bd664b2236d4de411"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6197e58dd5d5e23a2ddedbc3087e22d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a8e58558b1c1dc784df060e26acf9e6b3">ConstReverseIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ad6197e58dd5d5e23a2ddedbc3087e22d">crbegin</a> () const </td></tr>
<tr class="separator:ad6197e58dd5d5e23a2ddedbc3087e22d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada0ffe9ca30025badc0f9b7ad29624ef"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afa4905e29539752688529b811a7c86af">ReverseIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ada0ffe9ca30025badc0f9b7ad29624ef">rend</a> ()</td></tr>
<tr class="separator:ada0ffe9ca30025badc0f9b7ad29624ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af924ef536ae9e1a6530a66b349491334"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a8e58558b1c1dc784df060e26acf9e6b3">ConstReverseIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#af924ef536ae9e1a6530a66b349491334">rend</a> () const </td></tr>
<tr class="separator:af924ef536ae9e1a6530a66b349491334"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa26af279a6a53b910b4455f87e6baff6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a8e58558b1c1dc784df060e26acf9e6b3">ConstReverseIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aa26af279a6a53b910b4455f87e6baff6">crend</a> () const </td></tr>
<tr class="separator:aa26af279a6a53b910b4455f87e6baff6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8710259caea8c9b2eebca8dded618ffe"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a8710259caea8c9b2eebca8dded618ffe">assign</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a> count, <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6502afbd7a842a3d6e61c7bd811ecff7">ConstReference</a> value)</td></tr>
<tr class="separator:a8710259caea8c9b2eebca8dded618ffe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6181434f65b91f6e2800ec46b3639df"><td class="memTemplParams" colspan="2">template&lt;class InputIterator &gt; </td></tr>
<tr class="memitem:ac6181434f65b91f6e2800ec46b3639df"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ac6181434f65b91f6e2800ec46b3639df">assign</a> (<a class="el" href="struct_n_r_e_1_1_utility_1_1_input_iterator.php">InputIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a1abe614a22ed274e9ebac84e520c3524">begin</a>, <a class="el" href="struct_n_r_e_1_1_utility_1_1_input_iterator.php">InputIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a2c3f2ffdf73b574662795a0fc6512b9c">end</a>)</td></tr>
<tr class="separator:ac6181434f65b91f6e2800ec46b3639df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab25363b62250ec80597b37304db65a43"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab25363b62250ec80597b37304db65a43">reserve</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a> size)</td></tr>
<tr class="separator:ab25363b62250ec80597b37304db65a43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23fb70800379b23cf7810e7bbc36ef72"><td class="memTemplParams" colspan="2">template&lt;class K  = T, typename Utility::UseIfNotTriviallyCopyable&lt; K &gt;  = 0&gt; </td></tr>
<tr class="memitem:a23fb70800379b23cf7810e7bbc36ef72"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a23fb70800379b23cf7810e7bbc36ef72">clear</a> () noexcept</td></tr>
<tr class="separator:a23fb70800379b23cf7810e7bbc36ef72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23fb70800379b23cf7810e7bbc36ef72"><td class="memTemplParams" colspan="2">template&lt;class K  = T, typename Utility::UseIfTriviallyCopyable&lt; K &gt;  = 0&gt; </td></tr>
<tr class="memitem:a23fb70800379b23cf7810e7bbc36ef72"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a23fb70800379b23cf7810e7bbc36ef72">clear</a> () noexcept</td></tr>
<tr class="separator:a23fb70800379b23cf7810e7bbc36ef72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3cfc497f11ae9e5c6fc0199443b758a6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aedc34798595924837f67fe06ae52dde7">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a3cfc497f11ae9e5c6fc0199443b758a6">insert</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a> start, <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6502afbd7a842a3d6e61c7bd811ecff7">ConstReference</a> value)</td></tr>
<tr class="separator:a3cfc497f11ae9e5c6fc0199443b758a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae305f61923312a2573dd0e359826b2a5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aedc34798595924837f67fe06ae52dde7">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ae305f61923312a2573dd0e359826b2a5">insert</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a> start, <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a> count, <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6502afbd7a842a3d6e61c7bd811ecff7">ConstReference</a> value)</td></tr>
<tr class="separator:ae305f61923312a2573dd0e359826b2a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2960623c068c8edf45b69413d8bb72ce"><td class="memTemplParams" colspan="2">template&lt;class InputIterator &gt; </td></tr>
<tr class="memitem:a2960623c068c8edf45b69413d8bb72ce"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aedc34798595924837f67fe06ae52dde7">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a2960623c068c8edf45b69413d8bb72ce">insert</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a> start, <a class="el" href="struct_n_r_e_1_1_utility_1_1_input_iterator.php">InputIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a1abe614a22ed274e9ebac84e520c3524">begin</a>, <a class="el" href="struct_n_r_e_1_1_utility_1_1_input_iterator.php">InputIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a2c3f2ffdf73b574662795a0fc6512b9c">end</a>)</td></tr>
<tr class="separator:a2960623c068c8edf45b69413d8bb72ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d0320f31e85279cd65c957e124dffa3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aedc34798595924837f67fe06ae52dde7">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a4d0320f31e85279cd65c957e124dffa3">insert</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a> start, std::initializer_list&lt; T &gt; list)</td></tr>
<tr class="separator:a4d0320f31e85279cd65c957e124dffa3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcadcf54eacb239586f40c09fb0d97f5"><td class="memTemplParams" colspan="2">template&lt;class... Args&gt; </td></tr>
<tr class="memitem:abcadcf54eacb239586f40c09fb0d97f5"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aedc34798595924837f67fe06ae52dde7">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#abcadcf54eacb239586f40c09fb0d97f5">emplace</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a> start, Args &amp;&amp;...args)</td></tr>
<tr class="separator:abcadcf54eacb239586f40c09fb0d97f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c485155d0937170d9f0d8b437f34682"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aedc34798595924837f67fe06ae52dde7">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a3c485155d0937170d9f0d8b437f34682">erase</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a> pos)</td></tr>
<tr class="separator:a3c485155d0937170d9f0d8b437f34682"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8fa5aae1ccf541b4a9350506bec8eba8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aedc34798595924837f67fe06ae52dde7">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a8fa5aae1ccf541b4a9350506bec8eba8">erase</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a1abe614a22ed274e9ebac84e520c3524">begin</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a2c3f2ffdf73b574662795a0fc6512b9c">end</a>)</td></tr>
<tr class="separator:a8fa5aae1ccf541b4a9350506bec8eba8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac807a2b9a37baaecd2a01efa79edc03d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ac807a2b9a37baaecd2a01efa79edc03d">pushBack</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6502afbd7a842a3d6e61c7bd811ecff7">ConstReference</a> value)</td></tr>
<tr class="separator:ac807a2b9a37baaecd2a01efa79edc03d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10a8cb65c3b98883b0c65fdd7bb197d8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a10a8cb65c3b98883b0c65fdd7bb197d8">pushBack</a> (T &amp;&amp;value)</td></tr>
<tr class="separator:a10a8cb65c3b98883b0c65fdd7bb197d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8b416315bae841565efbf9c23e668f8"><td class="memTemplParams" colspan="2">template&lt;class... Args&gt; </td></tr>
<tr class="memitem:ae8b416315bae841565efbf9c23e668f8"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ae8b416315bae841565efbf9c23e668f8">emplaceBack</a> (Args &amp;&amp;...args)</td></tr>
<tr class="separator:ae8b416315bae841565efbf9c23e668f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e77cf42a0a643c430e9a2b2f11eff24"><td class="memTemplParams" colspan="2">template&lt;class K  = T, typename Utility::UseIfNotTriviallyCopyable&lt; K &gt;  = 0&gt; </td></tr>
<tr class="memitem:a4e77cf42a0a643c430e9a2b2f11eff24"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a4e77cf42a0a643c430e9a2b2f11eff24">popBack</a> ()</td></tr>
<tr class="separator:a4e77cf42a0a643c430e9a2b2f11eff24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e77cf42a0a643c430e9a2b2f11eff24"><td class="memTemplParams" colspan="2">template&lt;class K  = T, typename Utility::UseIfTriviallyCopyable&lt; K &gt;  = 0&gt; </td></tr>
<tr class="memitem:a4e77cf42a0a643c430e9a2b2f11eff24"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a4e77cf42a0a643c430e9a2b2f11eff24">popBack</a> ()</td></tr>
<tr class="separator:a4e77cf42a0a643c430e9a2b2f11eff24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d452642de72eb8ce9f74266738c304a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6d452642de72eb8ce9f74266738c304a">resize</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a> count)</td></tr>
<tr class="separator:a6d452642de72eb8ce9f74266738c304a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab979fc7cb97de5404038f144afa15027"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab979fc7cb97de5404038f144afa15027">resize</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a> count, <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6502afbd7a842a3d6e61c7bd811ecff7">ConstReference</a> value)</td></tr>
<tr class="separator:ab979fc7cb97de5404038f144afa15027"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6b7e9c39526b1e8561b7f0f7d38ebce"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ac6b7e9c39526b1e8561b7f0f7d38ebce">swap</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a> &amp;vec)</td></tr>
<tr class="separator:ac6b7e9c39526b1e8561b7f0f7d38ebce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46a4c0422c3f42e1d742e31610e98026"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a46a4c0422c3f42e1d742e31610e98026">shrinkToFit</a> ()</td></tr>
<tr class="separator:a46a4c0422c3f42e1d742e31610e98026"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6336c5fb6c7e89d27ca76c8f22a75c02"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a7631518ee078f3464da147c4d52d4868">Reference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6336c5fb6c7e89d27ca76c8f22a75c02">operator[]</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a> index)</td></tr>
<tr class="separator:a6336c5fb6c7e89d27ca76c8f22a75c02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae47efe9fc66693c6f9c5b82563676953"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6502afbd7a842a3d6e61c7bd811ecff7">ConstReference</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ae47efe9fc66693c6f9c5b82563676953">operator[]</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a> index) const </td></tr>
<tr class="separator:ae47efe9fc66693c6f9c5b82563676953"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad92da6acc69662d67d7460f2d054e174"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ad92da6acc69662d67d7460f2d054e174">operator=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a> const &amp;vec)</td></tr>
<tr class="separator:ad92da6acc69662d67d7460f2d054e174"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae73ec0485194f51dc99c8caf118d6aa9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ae73ec0485194f51dc99c8caf118d6aa9">operator=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a> &amp;&amp;vec)</td></tr>
<tr class="separator:ae73ec0485194f51dc99c8caf118d6aa9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0bb6bac0fb6bf6094ef30743b5a3b5eb"><td class="memTemplParams" colspan="2">template&lt;class K  = T, typename Utility::UseIfNotTriviallyCopyable&lt; K &gt;  = 0&gt; </td></tr>
<tr class="memitem:a0bb6bac0fb6bf6094ef30743b5a3b5eb"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a0bb6bac0fb6bf6094ef30743b5a3b5eb">operator==</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a> const &amp;vec) const </td></tr>
<tr class="separator:a0bb6bac0fb6bf6094ef30743b5a3b5eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0bb6bac0fb6bf6094ef30743b5a3b5eb"><td class="memTemplParams" colspan="2">template&lt;class K  = T, typename Utility::UseIfTriviallyCopyable&lt; K &gt;  = 0&gt; </td></tr>
<tr class="memitem:a0bb6bac0fb6bf6094ef30743b5a3b5eb"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a0bb6bac0fb6bf6094ef30743b5a3b5eb">operator==</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a> const &amp;vec) const </td></tr>
<tr class="separator:a0bb6bac0fb6bf6094ef30743b5a3b5eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72fad357a18fe48e6b8a34fa5702e042"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a72fad357a18fe48e6b8a34fa5702e042">operator!=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a> const &amp;vec) const </td></tr>
<tr class="separator:a72fad357a18fe48e6b8a34fa5702e042"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04ab36fc8f70ddfa0016d01c8b896bed"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_n_r_e___string_8hpp.php#a20410cefd428aefdf41f418a1e489d66">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a04ab36fc8f70ddfa0016d01c8b896bed">toString</a> () const </td></tr>
<tr class="separator:a04ab36fc8f70ddfa0016d01c8b896bed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_class_n_r_e_1_1_utility_1_1_stringable"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_class_n_r_e_1_1_utility_1_1_stringable')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="class_n_r_e_1_1_utility_1_1_stringable.php">NRE::Utility::Stringable&lt; Vector&lt; T, Allocator &gt; &gt;</a></td></tr>
<tr class="memitem:a858907f8126e9c210854ddb659dd17ee inherit pub_methods_class_n_r_e_1_1_utility_1_1_stringable"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_n_r_e___string_8hpp.php#a20410cefd428aefdf41f418a1e489d66">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_stringable.php#a858907f8126e9c210854ddb659dd17ee">toString</a> () const</td></tr>
<tr class="separator:a858907f8126e9c210854ddb659dd17ee inherit pub_methods_class_n_r_e_1_1_utility_1_1_stringable"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;class T, class Allocator&gt;<br />
class NRE::Utility::Detail::Vector&lt; T, Allocator &gt;</h3>

<p>A dynamic array, guarantee to be in contiguous memory. </p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a class="anchor" id="a6f8483736c3ab10b3c801351f0f7c544"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6f8483736c3ab10b3c801351f0f7c544">allocator_type</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a1c2cdf70435eb56895d6ea0464aadc0f">AllocatorType</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>STL compatibility </p>

</div>
</div>
<a class="anchor" id="a1c2cdf70435eb56895d6ea0464aadc0f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a1c2cdf70435eb56895d6ea0464aadc0f">AllocatorType</a> =  Allocator</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>The container's allocator </p>

</div>
</div>
<a class="anchor" id="aeba47a9a6c630be01d06ddd2d26eb6ea"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aeba47a9a6c630be01d06ddd2d26eb6ea">const_iterator</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>STL compatibility </p>

</div>
</div>
<a class="anchor" id="aa261e992e18ec32649868349768dc497"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aa261e992e18ec32649868349768dc497">const_pointer</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#acbb7cb5832ddc4d40051ab6bd28f5617">ConstPointer</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>STL compatibility </p>

</div>
</div>
<a class="anchor" id="ab1a52d0f6f9194d1040373c1baba7509"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab1a52d0f6f9194d1040373c1baba7509">const_reference</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6502afbd7a842a3d6e61c7bd811ecff7">ConstReference</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>STL compatibility </p>

</div>
</div>
<a class="anchor" id="a3b34427c33713e00605fa1847d50d298"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a3b34427c33713e00605fa1847d50d298">const_reverse_iterator</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a8e58558b1c1dc784df060e26acf9e6b3">ConstReverseIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>STL compatibility </p>

</div>
</div>
<a class="anchor" id="afd29351c483eaf1b8b1322463b1ae11f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#acbb7cb5832ddc4d40051ab6bd28f5617">ConstPointer</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Immuable random access iterator </p>

</div>
</div>
<a class="anchor" id="acbb7cb5832ddc4d40051ab6bd28f5617"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#acbb7cb5832ddc4d40051ab6bd28f5617">ConstPointer</a> =  typename AllocatorType::ConstPointer</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>The allocated type const pointer </p>

</div>
</div>
<a class="anchor" id="a6502afbd7a842a3d6e61c7bd811ecff7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6502afbd7a842a3d6e61c7bd811ecff7">ConstReference</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afe57483f5b5e6af2694a084a372d224c">ValueType</a> const&amp;</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>The allocated type const reference </p>

</div>
</div>
<a class="anchor" id="a8e58558b1c1dc784df060e26acf9e6b3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a8e58558b1c1dc784df060e26acf9e6b3">ConstReverseIterator</a> =  std::reverse_iterator&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Immuable reverse random access iterator </p>

</div>
</div>
<a class="anchor" id="aa7ea52aac53280651fd22821760d01b1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aa7ea52aac53280651fd22821760d01b1">difference_type</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#acfb6ea52f582a024ab8f43d4c540b6fb">DifferenceType</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>STL compatibility </p>

</div>
</div>
<a class="anchor" id="acfb6ea52f582a024ab8f43d4c540b6fb"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#acfb6ea52f582a024ab8f43d4c540b6fb">DifferenceType</a> =  std::ptrdiff_t</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>The object's difference type </p>

</div>
</div>
<a class="anchor" id="aedc34798595924837f67fe06ae52dde7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aedc34798595924837f67fe06ae52dde7">Iterator</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a031e5dcbd857faad81733cad07637ffe">Pointer</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Mutable random access iterator </p>

</div>
</div>
<a class="anchor" id="a64cce560b28cbb50d5f712e1516f8c47"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a64cce560b28cbb50d5f712e1516f8c47">iterator</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aedc34798595924837f67fe06ae52dde7">Iterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>STL compatibility </p>

</div>
</div>
<a class="anchor" id="a031e5dcbd857faad81733cad07637ffe"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a031e5dcbd857faad81733cad07637ffe">Pointer</a> =  typename AllocatorType::Pointer</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>The allocated type pointer </p>

</div>
</div>
<a class="anchor" id="a35bce7ca703d329523b019d1ab878426"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a35bce7ca703d329523b019d1ab878426">pointer</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a031e5dcbd857faad81733cad07637ffe">Pointer</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>STL compatibility </p>

</div>
</div>
<a class="anchor" id="a7631518ee078f3464da147c4d52d4868"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a7631518ee078f3464da147c4d52d4868">Reference</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afe57483f5b5e6af2694a084a372d224c">ValueType</a>&amp;</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>The allocated type reference </p>

</div>
</div>
<a class="anchor" id="aa2e440b6a1f92e80d3c350e43856f96f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aa2e440b6a1f92e80d3c350e43856f96f">reference</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a7631518ee078f3464da147c4d52d4868">Reference</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>STL compatibility </p>

</div>
</div>
<a class="anchor" id="a94c32d30b090c68244c77db1cd60a169"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a94c32d30b090c68244c77db1cd60a169">reverse_iterator</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afa4905e29539752688529b811a7c86af">ReverseIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>STL compatibility </p>

</div>
</div>
<a class="anchor" id="afa4905e29539752688529b811a7c86af"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afa4905e29539752688529b811a7c86af">ReverseIterator</a> =  std::reverse_iterator&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aedc34798595924837f67fe06ae52dde7">Iterator</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Mutable reverse random access iterator </p>

</div>
</div>
<a class="anchor" id="acd4227df24559a4ac1d0b762c1ed2cf5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#acd4227df24559a4ac1d0b762c1ed2cf5">size_type</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>STL compatibility </p>

</div>
</div>
<a class="anchor" id="ab312674a156498a72bd5e4aca800b098"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a> =  std::size_t</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>The object's size type </p>

</div>
</div>
<a class="anchor" id="a5a3b1914f63f8020a45f0e6d4efca1a6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a5a3b1914f63f8020a45f0e6d4efca1a6">value_type</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afe57483f5b5e6af2694a084a372d224c">ValueType</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>STL compatibility </p>

</div>
</div>
<a class="anchor" id="afe57483f5b5e6af2694a084a372d224c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afe57483f5b5e6af2694a084a372d224c">ValueType</a> =  T</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Check if the given AllocatorType inherit from NRE::Memory::AllocatorTraits Make sure the allocator is set for the container inner type The container's allocated type </p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a95239c62edf4a9d822f3477e160b3384"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a> </td>
          <td>(</td>
          <td class="paramtype">Allocator const &amp;&#160;</td>
          <td class="paramname"><em>alloc</em> = <code>Allocator()</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct an empty vector with a base capacity </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">alloc</td><td>the vector's memory allocator </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a3fc2dd589b85bae8c7839000448db609"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a>&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6502afbd7a842a3d6e61c7bd811ecff7">ConstReference</a>&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Allocator const &amp;&#160;</td>
          <td class="paramname"><em>alloc</em> = <code>Allocator()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct a vector filled with count copy of value </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the number of copy to perform, will be the vector capacity and length </td></tr>
    <tr><td class="paramname">value</td><td>the value to fill the vector with </td></tr>
    <tr><td class="paramname">alloc</td><td>the vector's memory allocator </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>value don't reference a vector item </dd></dl>

</div>
</div>
<a class="anchor" id="a6c33670d5ff85b519c5152ef85dc9e3a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a>&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Allocator const &amp;&#160;</td>
          <td class="paramname"><em>alloc</em> = <code>Allocator()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct a vector filled with count default value </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the number of default element, will be the vector capacity and length </td></tr>
    <tr><td class="paramname">alloc</td><td>the vector's memory allocator </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a94d1b4a939641a6b8a8ce3cc1d5b4c34"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
<div class="memtemplate">
template&lt;class InputIterator &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_n_r_e_1_1_utility_1_1_input_iterator.php">InputIterator</a>&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_n_r_e_1_1_utility_1_1_input_iterator.php">InputIterator</a>&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Allocator const &amp;&#160;</td>
          <td class="paramname"><em>alloc</em> = <code>Allocator()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct a vector filled with element between 2 iterators </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>the begin iterator </td></tr>
    <tr><td class="paramname">end</td><td>the end iterator, pointing after the last element </td></tr>
    <tr><td class="paramname">alloc</td><td>the vector's memory allocator </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>begin and end are not iterator from the vector </dd></dl>

</div>
</div>
<a class="anchor" id="a51f7f330345beabfc269fc89c804329c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a> </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; T &gt;&#160;</td>
          <td class="paramname"><em>init</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Allocator const &amp;&#160;</td>
          <td class="paramname"><em>alloc</em> = <code>Allocator()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct a vector from an initializer list </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">init</td><td>the list to fill the vector with </td></tr>
    <tr><td class="paramname">alloc</td><td>the vector's memory allocator </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>list don't contain vector reference </dd></dl>

</div>
</div>
<a class="anchor" id="aaece92f04fbc9ea8bc4d926f610c4973"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a>&lt; T, Allocator &gt; const &amp;&#160;</td>
          <td class="paramname"><em>vec</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy vec into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the vector to copy </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab8160b103e79d68d660e46c531636414"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a>&lt; T, Allocator &gt; const &amp;&#160;</td>
          <td class="paramname"><em>vec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Allocator const &amp;&#160;</td>
          <td class="paramname"><em>alloc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy vec into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the vector to copy </td></tr>
    <tr><td class="paramname">alloc</td><td>the vector's memory allocator </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a5c4eccffb2c90259bddc197c2551c945"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a>&lt; T, Allocator &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>vec</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Move vec into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the vector to move </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac6f492f81a8cc9fced1da1053e13610e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a>&lt; T, Allocator &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>vec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Allocator const &amp;&#160;</td>
          <td class="paramname"><em>alloc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Move vec into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the vector to move </td></tr>
    <tr><td class="paramname">alloc</td><td>the vector's memory allocator </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a0c23d4206db910b24d944da31548806a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::~<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php" title="A dynamic array, guarantee to be in contiguous memory. ">Vector</a> Deconstructor </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a8710259caea8c9b2eebca8dded618ffe"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::assign </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a>&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6502afbd7a842a3d6e61c7bd811ecff7">ConstReference</a>&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Assign the vector with count copy of value, starting from the beginning </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the number of copy </td></tr>
    <tr><td class="paramname">value</td><td>the copy to fill the vector with </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>value don't reference a vector item </dd></dl>

</div>
</div>
<a class="anchor" id="ac6181434f65b91f6e2800ec46b3639df"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
<div class="memtemplate">
template&lt;class InputIterator &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::assign </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_n_r_e_1_1_utility_1_1_input_iterator.php">InputIterator</a>&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_n_r_e_1_1_utility_1_1_input_iterator.php">InputIterator</a>&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Assign the vector with element between 2 iterators </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>the begin iterator </td></tr>
    <tr><td class="paramname">end</td><td>the end iterator, pointing after the last element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>begin and end are not iterator from the vector </dd></dl>

</div>
</div>
<a class="anchor" id="a1abe614a22ed274e9ebac84e520c3524"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aedc34798595924837f67fe06ae52dde7">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>an iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a2163c14732578dfa7af873b8fc782bcc"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a1df24fb0383b319fd7c3112ac2a190aa"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::cbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="aef9f09e0e013ec41084a035533df3fd3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::cend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a23fb70800379b23cf7810e7bbc36ef72"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
<div class="memtemplate">
template&lt;class K  = T, typename Utility::UseIfNotTriviallyCopyable&lt; K &gt;  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Clear all object in the vector, not actually releasing memory </p>

</div>
</div>
<a class="anchor" id="a23fb70800379b23cf7810e7bbc36ef72"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
<div class="memtemplate">
template&lt;class K  = T, typename Utility::UseIfTriviallyCopyable&lt; K &gt;  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Clear all object in the vector, not actually releasing memory </p>

</div>
</div>
<a class="anchor" id="ad6197e58dd5d5e23a2ddedbc3087e22d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a8e58558b1c1dc784df060e26acf9e6b3">ConstReverseIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::crbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const reverse iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="aa26af279a6a53b910b4455f87e6baff6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a8e58558b1c1dc784df060e26acf9e6b3">ConstReverseIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::crend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const reverse iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="abcadcf54eacb239586f40c09fb0d97f5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
<div class="memtemplate">
template&lt;class... Args&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aedc34798595924837f67fe06ae52dde7">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::emplace </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Emplace an element at the specified position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the position to insert the value </td></tr>
    <tr><td class="paramname">args</td><td>the value construction arguments </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the inserted value </dd></dl>

</div>
</div>
<a class="anchor" id="ae8b416315bae841565efbf9c23e668f8"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
<div class="memtemplate">
template&lt;class... Args&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::emplaceBack </td>
          <td>(</td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Emplace a value at the end of the vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">args</td><td>the arguments for the value construction </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2c3f2ffdf73b574662795a0fc6512b9c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aedc34798595924837f67fe06ae52dde7">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>an iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="aba45936981b88e0152f6a48a89a32066"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a3c485155d0937170d9f0d8b437f34682"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aedc34798595924837f67fe06ae52dde7">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase an element in the vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>the position to erase </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator on the next valid element </dd></dl>

</div>
</div>
<a class="anchor" id="a8fa5aae1ccf541b4a9350506bec8eba8"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aedc34798595924837f67fe06ae52dde7">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase a set of element from the vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>the start position for erasing </td></tr>
    <tr><td class="paramname">end</td><td>the end position for erasing </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator on the next valid element </dd></dl>

</div>
</div>
<a class="anchor" id="ac0d6bde89eb2ccfdaeab56b16d373277"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a7631518ee078f3464da147c4d52d4868">Reference</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::get </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a>&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element with bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the element index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="aece05eb703a626131041e0280713ec36"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6502afbd7a842a3d6e61c7bd811ecff7">ConstReference</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::get </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a>&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element with bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the element index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="a0fbc2d4eab54cf9dd85d0f2c8215a6bf"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">Allocator <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::getAllocator </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the vector's memory allocator </dd></dl>

</div>
</div>
<a class="anchor" id="a94796177211da4f68e8b2cb02ee14801"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::getCapacity </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the vector capacity </dd></dl>

</div>
</div>
<a class="anchor" id="ab0406623da13793f246b93577acfbb01"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#acbb7cb5832ddc4d40051ab6bd28f5617">ConstPointer</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::getCData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the internal data array </dd></dl>

</div>
</div>
<a class="anchor" id="a94c1b7c9da2e6f16737dfca98e9a2c6d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a031e5dcbd857faad81733cad07637ffe">Pointer</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::getData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the internal data array </dd></dl>

</div>
</div>
<a class="anchor" id="aafc41b696e843a90637b7ba302b1dff2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#acbb7cb5832ddc4d40051ab6bd28f5617">ConstPointer</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::getData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the internal data array </dd></dl>

</div>
</div>
<a class="anchor" id="ab94a642fcd8f776e2efefd858c27b878"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a7631518ee078f3464da147c4d52d4868">Reference</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::getFront </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the first element </dd></dl>

</div>
</div>
<a class="anchor" id="aa3d2f570694edc7fd52f45738cd1062d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6502afbd7a842a3d6e61c7bd811ecff7">ConstReference</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::getFront </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the first element </dd></dl>

</div>
</div>
<a class="anchor" id="aea32f67a58479e471b62b19fd4b4b3e0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a7631518ee078f3464da147c4d52d4868">Reference</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::getLast </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the last element </dd></dl>

</div>
</div>
<a class="anchor" id="a60aae4ed560b623175c4532e03de287e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6502afbd7a842a3d6e61c7bd811ecff7">ConstReference</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::getLast </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the last element </dd></dl>

</div>
</div>
<a class="anchor" id="ab9fb5fc358fabd54d8561c60c472574a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::getMaxSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the maximum vector size </dd></dl>

</div>
</div>
<a class="anchor" id="a0b5a2e2891ec0bb69091a0903f2165b8"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::getSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the vector effective size </dd></dl>

</div>
</div>
<a class="anchor" id="a3cfc497f11ae9e5c6fc0199443b758a6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aedc34798595924837f67fe06ae52dde7">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6502afbd7a842a3d6e61c7bd811ecff7">ConstReference</a>&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert a copy of value at the specified position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the position to insert the value </td></tr>
    <tr><td class="paramname">value</td><td>the value to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the inserted value </dd></dl>
<dl class="section pre"><dt>Precondition</dt><dd>value don't reference a vector item </dd></dl>

</div>
</div>
<a class="anchor" id="ae305f61923312a2573dd0e359826b2a5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aedc34798595924837f67fe06ae52dde7">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a>&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6502afbd7a842a3d6e61c7bd811ecff7">ConstReference</a>&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert count copy of value at the specified position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the position to insert values </td></tr>
    <tr><td class="paramname">count</td><td>the number of copy </td></tr>
    <tr><td class="paramname">value</td><td>the value to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the first inserted value </dd></dl>
<dl class="section pre"><dt>Precondition</dt><dd>value don't reference a vector item </dd></dl>

</div>
</div>
<a class="anchor" id="a2960623c068c8edf45b69413d8bb72ce"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
<div class="memtemplate">
template&lt;class InputIterator &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aedc34798595924837f67fe06ae52dde7">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_n_r_e_1_1_utility_1_1_input_iterator.php">InputIterator</a>&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_n_r_e_1_1_utility_1_1_input_iterator.php">InputIterator</a>&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert a copy of element between begin and end at the specified position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the position to insert values </td></tr>
    <tr><td class="paramname">begin</td><td>the begin iterator </td></tr>
    <tr><td class="paramname">end</td><td>the end iterator, pointing after the last element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the first inserted value </dd></dl>
<dl class="section pre"><dt>Precondition</dt><dd>begin and end are not iterator from the vector </dd></dl>

</div>
</div>
<a class="anchor" id="a4d0320f31e85279cd65c957e124dffa3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#aedc34798595924837f67fe06ae52dde7">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afd29351c483eaf1b8b1322463b1ae11f">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::initializer_list&lt; T &gt;&#160;</td>
          <td class="paramname"><em>list</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert a list of value at the specified position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the position to insert values </td></tr>
    <tr><td class="paramname">list</td><td>the list to fill the vector with </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the first inserted value </dd></dl>
<dl class="section pre"><dt>Precondition</dt><dd>list don't contain vector reference </dd></dl>

</div>
</div>
<a class="anchor" id="ac13bd8ac0869f6529a677462ded42de3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::isEmpty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>if the vector is empty </dd></dl>

</div>
</div>
<a class="anchor" id="a72fad357a18fe48e6b8a34fa5702e042"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::operator!= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a>&lt; T, Allocator &gt; const &amp;&#160;</td>
          <td class="paramname"><em>vec</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Inequality test between this and vec </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the other vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<a class="anchor" id="ad92da6acc69662d67d7460f2d054e174"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a>&lt; T, Allocator &gt; const &amp;&#160;</td>
          <td class="paramname"><em>vec</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy vec into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the vector to copy into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="ae73ec0485194f51dc99c8caf118d6aa9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a>&lt; T, Allocator &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>vec</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Move vec into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the vector to move into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a0bb6bac0fb6bf6094ef30743b5a3b5eb"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
<div class="memtemplate">
template&lt;class K  = T, typename Utility::UseIfNotTriviallyCopyable&lt; K &gt;  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a>&lt; T, Allocator &gt; const &amp;&#160;</td>
          <td class="paramname"><em>vec</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Equality test between this and vec </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the other vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<a class="anchor" id="a0bb6bac0fb6bf6094ef30743b5a3b5eb"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
<div class="memtemplate">
template&lt;class K  = T, typename Utility::UseIfTriviallyCopyable&lt; K &gt;  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a>&lt; T, Allocator &gt; const &amp;&#160;</td>
          <td class="paramname"><em>vec</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Equality test between this and vec </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the other vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<a class="anchor" id="a6336c5fb6c7e89d27ca76c8f22a75c02"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a7631518ee078f3464da147c4d52d4868">Reference</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a>&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element without bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the element index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="ae47efe9fc66693c6f9c5b82563676953"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6502afbd7a842a3d6e61c7bd811ecff7">ConstReference</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a>&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element without bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the element index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="a4e77cf42a0a643c430e9a2b2f11eff24"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
<div class="memtemplate">
template&lt;class K  = T, typename Utility::UseIfNotTriviallyCopyable&lt; K &gt;  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::popBack </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Pop the last element in the vector </p>

</div>
</div>
<a class="anchor" id="a4e77cf42a0a643c430e9a2b2f11eff24"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
<div class="memtemplate">
template&lt;class K  = T, typename Utility::UseIfTriviallyCopyable&lt; K &gt;  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::popBack </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Pop the last element in the vector </p>

</div>
</div>
<a class="anchor" id="ac807a2b9a37baaecd2a01efa79edc03d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::pushBack </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6502afbd7a842a3d6e61c7bd811ecff7">ConstReference</a>&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert a copy of value at the end of the vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the value to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>value don't reference a vector item </dd></dl>

</div>
</div>
<a class="anchor" id="a10a8cb65c3b98883b0c65fdd7bb197d8"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::pushBack </td>
          <td>(</td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Emplace a value at the end of the vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the value to insert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac13d1c1303680cc7bcd0ec2d3a407af4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afa4905e29539752688529b811a7c86af">ReverseIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::rbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a reverse iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="ae2a49a2a71dc054bd664b2236d4de411"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a8e58558b1c1dc784df060e26acf9e6b3">ConstReverseIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::rbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const reverse iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="ada0ffe9ca30025badc0f9b7ad29624ef"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#afa4905e29539752688529b811a7c86af">ReverseIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::rend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a reverse iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="af924ef536ae9e1a6530a66b349491334"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a8e58558b1c1dc784df060e26acf9e6b3">ConstReverseIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::rend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const reverse iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="ab25363b62250ec80597b37304db65a43"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::reserve </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a>&#160;</td>
          <td class="paramname"><em>size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set the vector capacity to a minimum of size, reallocating memory if needed </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">size</td><td>the new capacity </td></tr>
  </table>
  </dd>
</dl>
<dl class="section warning"><dt>Warning</dt><dd>size value is not checked against <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab9fb5fc358fabd54d8561c60c472574a">getMaxSize()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a6d452642de72eb8ce9f74266738c304a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::resize </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a>&#160;</td>
          <td class="paramname"><em>count</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Resize the container up the given size, insert value if needed </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the new capacity </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab979fc7cb97de5404038f144afa15027"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::resize </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#ab312674a156498a72bd5e4aca800b098">SizeType</a>&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php#a6502afbd7a842a3d6e61c7bd811ecff7">ConstReference</a>&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Resize the container up the given size, insert value if needed </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the new capacity </td></tr>
    <tr><td class="paramname">value</td><td>the value used when inserting </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a46a4c0422c3f42e1d742e31610e98026"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::shrinkToFit </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Shrink to fit the actual size, actually freeing memory </p>

</div>
</div>
<a class="anchor" id="ac6b7e9c39526b1e8561b7f0f7d38ebce"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">Vector</a>&lt; T, Allocator &gt; &amp;&#160;</td>
          <td class="paramname"><em>vec</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Swap the vector with another vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the other vector </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a04ab36fc8f70ddfa0016d01c8b896bed"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, class Allocator&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_n_r_e___string_8hpp.php#a20410cefd428aefdf41f418a1e489d66">String</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_vector.php">NRE::Utility::Detail::Vector</a>&lt; T, Allocator &gt;::toString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Convert the object into a string representation </p><dl class="section return"><dt>Returns</dt><dd>the converted object </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/mnt/c/Users/abell/Documents/GitHub/NRE-Utility/src/Utility/Detail/Vector/<a class="el" href="_detail_2_vector_2_n_r_e___vector_8hpp_source.php">NRE_Vector.hpp</a></li>
</ul>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.8-->
<!-- start footer part -->
</div>
</div>
</div>
</div>
</body>
</html>
