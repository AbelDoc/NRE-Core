<!-- HTML header for doxygen 1.8.8-->
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <!-- For Mobile Devices -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
        <meta name="generator" content="Doxygen 1.8.11"/>
        <script type="text/javascript" src="../../js/jquery-2.1.1.min.js"></script>
        <title>NRE-Utility: NRE::Utility::Detail::UnorderedMap&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt; Class Template Reference</title>
        <!--<link href="tabs.css" rel="stylesheet" type="text/css"/>-->
        <script type="text/javascript" src="dynsections.js"></script>
        <link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <link href='https://fonts.googleapis.com/css?family=Roboto+Slab' rel='stylesheet' type='text/css'>
        <?php
            include '../../php/navigation.php';
            if (!isset($_COOKIE["theme"]) || $_COOKIE["theme"] == "dark") {
                echo '<link href="../../css/dark/bootstrap.css" rel="stylesheet">';
            } else {
                echo '<link href="../../css/light/bootstrap.css" rel="stylesheet">';
            }
        ?>
        <script src="../../js/bootstrap.min.js"></script>
        <script type="text/javascript" src="doxy-boot.js"></script>
    </head>
    <body>
        <div class="container-fluid">
            <header class="page-header">
                <a href="../../../index.php">
                    <img src="../../img/Logo.png" class="logo img-responsive"/>
                </a>
            </header>
            <?php addNavigationBarInl(false); ?>
            <div id="top" class="row"><!-- do not remove this div, it is closed by doxygen! -->
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-body">
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespace_n_r_e.php">NRE</a></li><li class="navelem"><b>Utility</b></li><li class="navelem"><b>Detail</b></li><li class="navelem"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">UnorderedMap</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map-members.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">NRE::Utility::Detail::UnorderedMap&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>An unordered map, associative unordered container.  
 <a href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_detail_2_unordered_map_2_n_r_e___unordered_map_8hpp_source.php">NRE_UnorderedMap.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for NRE::Utility::Detail::UnorderedMap&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;:</div>
<div class="dyncontent">
 <div class="center">
  <img src="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.png" usemap="#NRE::Utility::Detail::UnorderedMap_3C_20Key_2C_20T_2C_20Allocator_2C_20StoreHash_2C_20Hash_2C_20KeyEqual_20_3E_map" alt=""/>
  <map id="NRE::Utility::Detail::UnorderedMap_3C_20Key_2C_20T_2C_20Allocator_2C_20StoreHash_2C_20Hash_2C_20KeyEqual_20_3E_map" name="NRE::Utility::Detail::UnorderedMap&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;_map">
<area href="class_n_r_e_1_1_utility_1_1_stringable.php" alt="NRE::Utility::Stringable&lt; UnorderedMap&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt; &gt;" shape="rect" coords="0,56,640,80"/>
<area href="class_n_r_e_1_1_utility_1_1_static_interface.php" title="Describe an object using CRTP to create static interface (static polymorphism) " alt="NRE::Utility::StaticInterface&lt; T &gt;" shape="rect" coords="0,0,640,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:affd4a529160f9f3727fe4b73f9c23cc4"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a> = Key</td></tr>
<tr class="separator:affd4a529160f9f3727fe4b73f9c23cc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50374b4303e7065f73258f1ba167a6a9"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a50374b4303e7065f73258f1ba167a6a9">MappedType</a> = T</td></tr>
<tr class="separator:a50374b4303e7065f73258f1ba167a6a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0de54a72d0fc3ed8177f686737352bae"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a0de54a72d0fc3ed8177f686737352bae">ValueType</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a50374b4303e7065f73258f1ba167a6a9">MappedType</a> &gt;</td></tr>
<tr class="separator:a0de54a72d0fc3ed8177f686737352bae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03464c30ebfb1db56a08da6a54b01592"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a03464c30ebfb1db56a08da6a54b01592">AllocatorType</a> = typename <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a03464c30ebfb1db56a08da6a54b01592">AllocatorType</a></td></tr>
<tr class="separator:a03464c30ebfb1db56a08da6a54b01592"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5838a2a54c769f1802b69d78e4717773"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a> = typename <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a></td></tr>
<tr class="separator:a5838a2a54c769f1802b69d78e4717773"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae63f1aba3510bd166a82b790c13eda83"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ae63f1aba3510bd166a82b790c13eda83">DifferenceType</a> = typename <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ae63f1aba3510bd166a82b790c13eda83">DifferenceType</a></td></tr>
<tr class="separator:ae63f1aba3510bd166a82b790c13eda83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a64f445635cc96d63caf1ac27ea8622"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a7a64f445635cc96d63caf1ac27ea8622">Reference</a> = typename <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a7a64f445635cc96d63caf1ac27ea8622">Reference</a></td></tr>
<tr class="separator:a7a64f445635cc96d63caf1ac27ea8622"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84e40c0d7b5baf57e3c9801de235968c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a84e40c0d7b5baf57e3c9801de235968c">ConstReference</a> = typename <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a84e40c0d7b5baf57e3c9801de235968c">ConstReference</a></td></tr>
<tr class="separator:a84e40c0d7b5baf57e3c9801de235968c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07a05fc86d0e88685b064d4e5862d7f0"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a07a05fc86d0e88685b064d4e5862d7f0">Pointer</a> = typename <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a07a05fc86d0e88685b064d4e5862d7f0">Pointer</a></td></tr>
<tr class="separator:a07a05fc86d0e88685b064d4e5862d7f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2accfb634819ca3b2de04027ebd78e1e"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a2accfb634819ca3b2de04027ebd78e1e">ConstPointer</a> = typename <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a2accfb634819ca3b2de04027ebd78e1e">ConstPointer</a></td></tr>
<tr class="separator:a2accfb634819ca3b2de04027ebd78e1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe015e9c77ce67eb6d31c8a5b723a92d"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a> = typename <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a></td></tr>
<tr class="separator:afe015e9c77ce67eb6d31c8a5b723a92d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a214ac68222bc37bb33f0d5998693119a"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a> = typename <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a></td></tr>
<tr class="separator:a214ac68222bc37bb33f0d5998693119a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab63c24353fe4825723cfe43cd797b269"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ab63c24353fe4825723cfe43cd797b269">LocalIterator</a> = typename <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ab63c24353fe4825723cfe43cd797b269">LocalIterator</a></td></tr>
<tr class="separator:ab63c24353fe4825723cfe43cd797b269"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a059290148583ee70fff0dfffcecfadae"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a059290148583ee70fff0dfffcecfadae">ConstLocalIterator</a> = typename <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a059290148583ee70fff0dfffcecfadae">ConstLocalIterator</a></td></tr>
<tr class="separator:a059290148583ee70fff0dfffcecfadae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5f75b329ddc50e92491c3d93b984677"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#aa5f75b329ddc50e92491c3d93b984677">value_type</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a0de54a72d0fc3ed8177f686737352bae">ValueType</a></td></tr>
<tr class="separator:aa5f75b329ddc50e92491c3d93b984677"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac356511c108ff2c9e1373e4d5875ce69"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ac356511c108ff2c9e1373e4d5875ce69">allocator_type</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a03464c30ebfb1db56a08da6a54b01592">AllocatorType</a></td></tr>
<tr class="separator:ac356511c108ff2c9e1373e4d5875ce69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a550756cec355909898cfbb06ba825ab7"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a550756cec355909898cfbb06ba825ab7">size_type</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a></td></tr>
<tr class="separator:a550756cec355909898cfbb06ba825ab7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a792d2fc93f7a3c59675a20822f7db87d"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a792d2fc93f7a3c59675a20822f7db87d">difference_type</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ae63f1aba3510bd166a82b790c13eda83">DifferenceType</a></td></tr>
<tr class="separator:a792d2fc93f7a3c59675a20822f7db87d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba398717b3eb03287577e01414315379"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#aba398717b3eb03287577e01414315379">reference</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a7a64f445635cc96d63caf1ac27ea8622">Reference</a></td></tr>
<tr class="separator:aba398717b3eb03287577e01414315379"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4f46b7a227b76f479e49bc8662952e5"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ad4f46b7a227b76f479e49bc8662952e5">const_reference</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a84e40c0d7b5baf57e3c9801de235968c">ConstReference</a></td></tr>
<tr class="separator:ad4f46b7a227b76f479e49bc8662952e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e9462b4b390aa8743fea458307554ff"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a1e9462b4b390aa8743fea458307554ff">pointer</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a07a05fc86d0e88685b064d4e5862d7f0">Pointer</a></td></tr>
<tr class="separator:a1e9462b4b390aa8743fea458307554ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a876c56964df33f299c109e9d5f006c26"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a876c56964df33f299c109e9d5f006c26">const_pointer</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a2accfb634819ca3b2de04027ebd78e1e">ConstPointer</a></td></tr>
<tr class="separator:a876c56964df33f299c109e9d5f006c26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c971d0b3d473586e24e807061608d9c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a8c971d0b3d473586e24e807061608d9c">iterator</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a></td></tr>
<tr class="separator:a8c971d0b3d473586e24e807061608d9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6060e55337f7e33a6cb00129008e31b7"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a6060e55337f7e33a6cb00129008e31b7">const_iterator</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a></td></tr>
<tr class="separator:a6060e55337f7e33a6cb00129008e31b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a389ad8dc0b308c838c602a2051e386"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a3a389ad8dc0b308c838c602a2051e386">local_iterator</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ab63c24353fe4825723cfe43cd797b269">LocalIterator</a></td></tr>
<tr class="separator:a3a389ad8dc0b308c838c602a2051e386"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a777de1bca7a8bd32bfc7c8b4337125"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a1a777de1bca7a8bd32bfc7c8b4337125">const_local_iterator</a> = <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a059290148583ee70fff0dfffcecfadae">ConstLocalIterator</a></td></tr>
<tr class="separator:a1a777de1bca7a8bd32bfc7c8b4337125"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a4683736420fd2c7a86c61a8326eda599"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a4683736420fd2c7a86c61a8326eda599">UnorderedMap</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a> bucketCount=<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::DEFAULT_BUCKET_COUNT, Hash const &amp;hasher=Hash(), KeyEqual const &amp;equal=KeyEqual(), Allocator const &amp;alloc=Allocator())</td></tr>
<tr class="separator:a4683736420fd2c7a86c61a8326eda599"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec5b005c4ed81587b142a5eda0048b83"><td class="memTemplParams" colspan="2">template&lt;class InputIterator &gt; </td></tr>
<tr class="memitem:aec5b005c4ed81587b142a5eda0048b83"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#aec5b005c4ed81587b142a5eda0048b83">UnorderedMap</a> (<a class="el" href="struct_n_r_e_1_1_utility_1_1_input_iterator.php">InputIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a128c090b771811df3cdcade53d9e1b50">begin</a>, <a class="el" href="struct_n_r_e_1_1_utility_1_1_input_iterator.php">InputIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a0d641df832ffd4119293d3e5c5890d98">end</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a> bucketCount=<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::DEFAULT_BUCKET_COUNT, Hash const &amp;hasher=Hash(), KeyEqual const &amp;equal=KeyEqual(), Allocator const &amp;alloc=Allocator())</td></tr>
<tr class="separator:aec5b005c4ed81587b142a5eda0048b83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4307f584c01d460acc70876a20610bba"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a4307f584c01d460acc70876a20610bba">UnorderedMap</a> (std::initializer_list&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a0de54a72d0fc3ed8177f686737352bae">ValueType</a> &gt; list, <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a> bucketCount=<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::DEFAULT_BUCKET_COUNT, Hash const &amp;hasher=Hash(), KeyEqual const &amp;equal=KeyEqual(), Allocator const &amp;alloc=Allocator())</td></tr>
<tr class="separator:a4307f584c01d460acc70876a20610bba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2db25bf53c57fa0e693ccb36a60a61e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ab2db25bf53c57fa0e693ccb36a60a61e">UnorderedMap</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">UnorderedMap</a> const &amp;map, Allocator const &amp;alloc=Allocator())</td></tr>
<tr class="separator:ab2db25bf53c57fa0e693ccb36a60a61e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0124d453dc2be3c8de76259308db4f47"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a0124d453dc2be3c8de76259308db4f47">UnorderedMap</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">UnorderedMap</a> &amp;&amp;map, Allocator const &amp;alloc=Allocator())</td></tr>
<tr class="separator:a0124d453dc2be3c8de76259308db4f47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26590c9ede6bcb1824a54ed024e81a89"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a50374b4303e7065f73258f1ba167a6a9">MappedType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a26590c9ede6bcb1824a54ed024e81a89">get</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a> const &amp;k)</td></tr>
<tr class="separator:a26590c9ede6bcb1824a54ed024e81a89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e624879d663713893087dbfde17a151"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a50374b4303e7065f73258f1ba167a6a9">MappedType</a> const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a6e624879d663713893087dbfde17a151">get</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a> const &amp;k) const </td></tr>
<tr class="separator:a6e624879d663713893087dbfde17a151"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4f718a50ed31c429a02c3c14be58646"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ae4f718a50ed31c429a02c3c14be58646">getBucketCount</a> () const </td></tr>
<tr class="separator:ae4f718a50ed31c429a02c3c14be58646"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a882a6cb5a6da37373733bc34558dd9c5"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a882a6cb5a6da37373733bc34558dd9c5">getMaxBucketCount</a> () const </td></tr>
<tr class="separator:a882a6cb5a6da37373733bc34558dd9c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7af175778f4d20239525682ae1a5859"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#af7af175778f4d20239525682ae1a5859">getSize</a> () const </td></tr>
<tr class="separator:af7af175778f4d20239525682ae1a5859"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1829be10ab27023da4d292cb782ae549"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a1829be10ab27023da4d292cb782ae549">getMaxLoadFactor</a> () const </td></tr>
<tr class="separator:a1829be10ab27023da4d292cb782ae549"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e43f86ebfbbf6114418ed87da0be45d"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a0e43f86ebfbbf6114418ed87da0be45d">getLoadFactor</a> () const </td></tr>
<tr class="separator:a0e43f86ebfbbf6114418ed87da0be45d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a30ffae54ac797349088c7f62a68150"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a4a30ffae54ac797349088c7f62a68150">getMaxSize</a> () const </td></tr>
<tr class="separator:a4a30ffae54ac797349088c7f62a68150"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6e6720055eb757bc53c2f578173fc3b"><td class="memItemLeft" align="right" valign="top">Allocator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ae6e6720055eb757bc53c2f578173fc3b">getAllocator</a> () const </td></tr>
<tr class="separator:ae6e6720055eb757bc53c2f578173fc3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a966f24b619b53781c1411226ad463d7c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a966f24b619b53781c1411226ad463d7c">isEmpty</a> () const </td></tr>
<tr class="separator:a966f24b619b53781c1411226ad463d7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53e531ebd5f343c73b415fb13c7b7ebc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a53e531ebd5f343c73b415fb13c7b7ebc">getCount</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a> const &amp;k) const </td></tr>
<tr class="separator:a53e531ebd5f343c73b415fb13c7b7ebc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a170a9e31648cae267d837514f80d3a5f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a170a9e31648cae267d837514f80d3a5f">getBucket</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a> const &amp;k) const </td></tr>
<tr class="separator:a170a9e31648cae267d837514f80d3a5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a009afb7ae049f2e373c73c97c8a03fe9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a009afb7ae049f2e373c73c97c8a03fe9">setMaxLoadFactor</a> (float factor)</td></tr>
<tr class="separator:a009afb7ae049f2e373c73c97c8a03fe9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a128c090b771811df3cdcade53d9e1b50"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a128c090b771811df3cdcade53d9e1b50">begin</a> ()</td></tr>
<tr class="separator:a128c090b771811df3cdcade53d9e1b50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9249bba6954362f4d37c7d646a5eef23"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a9249bba6954362f4d37c7d646a5eef23">begin</a> () const </td></tr>
<tr class="separator:a9249bba6954362f4d37c7d646a5eef23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6cbcfc2b0374da6796fc7c73f3243231"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a6cbcfc2b0374da6796fc7c73f3243231">cbegin</a> () const </td></tr>
<tr class="separator:a6cbcfc2b0374da6796fc7c73f3243231"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d641df832ffd4119293d3e5c5890d98"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a0d641df832ffd4119293d3e5c5890d98">end</a> ()</td></tr>
<tr class="separator:a0d641df832ffd4119293d3e5c5890d98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00c3ebbd179a795ccb9ad3a19321372c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a00c3ebbd179a795ccb9ad3a19321372c">end</a> () const </td></tr>
<tr class="separator:a00c3ebbd179a795ccb9ad3a19321372c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a593bc78ebe14ebccfc3bcb1fa5bbaf0a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a593bc78ebe14ebccfc3bcb1fa5bbaf0a">cend</a> () const </td></tr>
<tr class="separator:a593bc78ebe14ebccfc3bcb1fa5bbaf0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf6fbce112ae28528d458e2810e875f9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ab63c24353fe4825723cfe43cd797b269">LocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#abf6fbce112ae28528d458e2810e875f9">begin</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a> index)</td></tr>
<tr class="separator:abf6fbce112ae28528d458e2810e875f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa82b759fd381195900bf120a0fefecce"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a059290148583ee70fff0dfffcecfadae">ConstLocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#aa82b759fd381195900bf120a0fefecce">begin</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a> index) const </td></tr>
<tr class="separator:aa82b759fd381195900bf120a0fefecce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63e72874bc4c7b7dda04381a1fa7f162"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a059290148583ee70fff0dfffcecfadae">ConstLocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a63e72874bc4c7b7dda04381a1fa7f162">cbegin</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a> index) const </td></tr>
<tr class="separator:a63e72874bc4c7b7dda04381a1fa7f162"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b2771b932bbdcda92fcfa3bde1c9d93"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ab63c24353fe4825723cfe43cd797b269">LocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a6b2771b932bbdcda92fcfa3bde1c9d93">end</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a> index)</td></tr>
<tr class="separator:a6b2771b932bbdcda92fcfa3bde1c9d93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30188ac3833afa0b9db0bcd0945bae70"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a059290148583ee70fff0dfffcecfadae">ConstLocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a30188ac3833afa0b9db0bcd0945bae70">end</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a> index) const </td></tr>
<tr class="separator:a30188ac3833afa0b9db0bcd0945bae70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05091195a6e083bcdf5d351fa738b7a0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a059290148583ee70fff0dfffcecfadae">ConstLocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a05091195a6e083bcdf5d351fa738b7a0">cend</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a> index) const </td></tr>
<tr class="separator:a05091195a6e083bcdf5d351fa738b7a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcef005582fb80bb4f53aca519d77787"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a>, bool &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#abcef005582fb80bb4f53aca519d77787">insert</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a0de54a72d0fc3ed8177f686737352bae">ValueType</a> const &amp;value)</td></tr>
<tr class="separator:abcef005582fb80bb4f53aca519d77787"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6cdb7d0150823aec9fa980ff1fc78c9e"><td class="memTemplParams" colspan="2">template&lt;class P &gt; </td></tr>
<tr class="memitem:a6cdb7d0150823aec9fa980ff1fc78c9e"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a>, bool &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a6cdb7d0150823aec9fa980ff1fc78c9e">insert</a> (P &amp;&amp;value)</td></tr>
<tr class="separator:a6cdb7d0150823aec9fa980ff1fc78c9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39d18c470560e441ad6713e5bcbac796"><td class="memTemplParams" colspan="2">template&lt;class InputIterator &gt; </td></tr>
<tr class="memitem:a39d18c470560e441ad6713e5bcbac796"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a39d18c470560e441ad6713e5bcbac796">insert</a> (<a class="el" href="struct_n_r_e_1_1_utility_1_1_input_iterator.php">InputIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a128c090b771811df3cdcade53d9e1b50">begin</a>, <a class="el" href="struct_n_r_e_1_1_utility_1_1_input_iterator.php">InputIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a0d641df832ffd4119293d3e5c5890d98">end</a>)</td></tr>
<tr class="separator:a39d18c470560e441ad6713e5bcbac796"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10b0b1fa031d8c58b9ceb5b43fa0d17e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a10b0b1fa031d8c58b9ceb5b43fa0d17e">insert</a> (std::initializer_list&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a0de54a72d0fc3ed8177f686737352bae">ValueType</a> &gt; list)</td></tr>
<tr class="separator:a10b0b1fa031d8c58b9ceb5b43fa0d17e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adabdfb09c746d7d1aa1669ae0751fbf3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#adabdfb09c746d7d1aa1669ae0751fbf3">insertHint</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a> hint, <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a0de54a72d0fc3ed8177f686737352bae">ValueType</a> const &amp;value)</td></tr>
<tr class="separator:adabdfb09c746d7d1aa1669ae0751fbf3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a839fa3eb5f586edcef5ba886c3a78b53"><td class="memTemplParams" colspan="2">template&lt;class P &gt; </td></tr>
<tr class="memitem:a839fa3eb5f586edcef5ba886c3a78b53"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a839fa3eb5f586edcef5ba886c3a78b53">insertHint</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a> hint, P &amp;&amp;value)</td></tr>
<tr class="separator:a839fa3eb5f586edcef5ba886c3a78b53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a650a2fa0b45abda6f6fdacec275a1fb5"><td class="memTemplParams" colspan="2">template&lt;class... Args&gt; </td></tr>
<tr class="memitem:a650a2fa0b45abda6f6fdacec275a1fb5"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a>, bool &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a650a2fa0b45abda6f6fdacec275a1fb5">emplace</a> (Args &amp;&amp;...args)</td></tr>
<tr class="separator:a650a2fa0b45abda6f6fdacec275a1fb5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ae616a891acd496526a50628c557e51"><td class="memTemplParams" colspan="2">template&lt;class... Args&gt; </td></tr>
<tr class="memitem:a0ae616a891acd496526a50628c557e51"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a0ae616a891acd496526a50628c557e51">emplaceHint</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a> hint, Args &amp;&amp;...args)</td></tr>
<tr class="separator:a0ae616a891acd496526a50628c557e51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9bf1f3d1ec25abb810b81013175bc27"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ae9bf1f3d1ec25abb810b81013175bc27">clear</a> ()</td></tr>
<tr class="separator:ae9bf1f3d1ec25abb810b81013175bc27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07287deec188c86b66c6a0318b31cb0a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a07287deec188c86b66c6a0318b31cb0a">swap</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">UnorderedMap</a> &amp;map)</td></tr>
<tr class="separator:a07287deec188c86b66c6a0318b31cb0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae40f2ecc24e1fbe5b4dabe74b7adc40"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#aae40f2ecc24e1fbe5b4dabe74b7adc40">reserve</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a> count)</td></tr>
<tr class="separator:aae40f2ecc24e1fbe5b4dabe74b7adc40"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aecd196f695d17309438f7e1ee565b74c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#aecd196f695d17309438f7e1ee565b74c">rehash</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a> count)</td></tr>
<tr class="separator:aecd196f695d17309438f7e1ee565b74c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a169c821d87f19e223630e55b251b6370"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a169c821d87f19e223630e55b251b6370">equalRange</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a> const &amp;key)</td></tr>
<tr class="separator:a169c821d87f19e223630e55b251b6370"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3da7b739ab4f28ee21d8aabd1164a478"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a3da7b739ab4f28ee21d8aabd1164a478">equalRange</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a> const &amp;key) const </td></tr>
<tr class="separator:a3da7b739ab4f28ee21d8aabd1164a478"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16ac8e7f3ab1efa9a77aec1cb3d090f1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a16ac8e7f3ab1efa9a77aec1cb3d090f1">find</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a> const &amp;k)</td></tr>
<tr class="separator:a16ac8e7f3ab1efa9a77aec1cb3d090f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3385719e23e4aca07ec5b464c6336f2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ae3385719e23e4aca07ec5b464c6336f2">find</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a> const &amp;k) const </td></tr>
<tr class="separator:ae3385719e23e4aca07ec5b464c6336f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ae3b948aaf83570097dc9d18ac5df04"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a9ae3b948aaf83570097dc9d18ac5df04">erase</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a> pos)</td></tr>
<tr class="separator:a9ae3b948aaf83570097dc9d18ac5df04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9148ac4385d24d624fed7cfa48b48ea1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a9148ac4385d24d624fed7cfa48b48ea1">erase</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a> pos)</td></tr>
<tr class="separator:a9148ac4385d24d624fed7cfa48b48ea1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeafa40d601846ce631536c1609e87957"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#aeafa40d601846ce631536c1609e87957">erase</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a128c090b771811df3cdcade53d9e1b50">begin</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a0d641df832ffd4119293d3e5c5890d98">end</a>)</td></tr>
<tr class="separator:aeafa40d601846ce631536c1609e87957"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6be1a234aa0e8766a0f26fcd54b6074"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#af6be1a234aa0e8766a0f26fcd54b6074">erase</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a> const &amp;k)</td></tr>
<tr class="separator:af6be1a234aa0e8766a0f26fcd54b6074"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae18851c74e2c88ce3860e342ff0141d2"><td class="memItemLeft" align="right" valign="top">Hash&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ae18851c74e2c88ce3860e342ff0141d2">getHash</a> () const </td></tr>
<tr class="separator:ae18851c74e2c88ce3860e342ff0141d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5effa24760533dac127be863b9e92b8"><td class="memItemLeft" align="right" valign="top">KeyEqual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#af5effa24760533dac127be863b9e92b8">getKeyEqual</a> () const </td></tr>
<tr class="separator:af5effa24760533dac127be863b9e92b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19f5038397b76c11756221057ac74db3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">UnorderedMap</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a19f5038397b76c11756221057ac74db3">operator=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">UnorderedMap</a> const &amp;map)</td></tr>
<tr class="separator:a19f5038397b76c11756221057ac74db3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6b7b83c76db5045f178d9c6b3e30427"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">UnorderedMap</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ad6b7b83c76db5045f178d9c6b3e30427">operator=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">UnorderedMap</a> &amp;&amp;map)</td></tr>
<tr class="separator:ad6b7b83c76db5045f178d9c6b3e30427"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5cf40e3ce6dbb298432448424daf7538"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a50374b4303e7065f73258f1ba167a6a9">MappedType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5cf40e3ce6dbb298432448424daf7538">operator[]</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a> const &amp;k)</td></tr>
<tr class="separator:a5cf40e3ce6dbb298432448424daf7538"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad925c56ff026224593cb197573d9cac8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a50374b4303e7065f73258f1ba167a6a9">MappedType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ad925c56ff026224593cb197573d9cac8">operator[]</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a> &amp;&amp;k)</td></tr>
<tr class="separator:ad925c56ff026224593cb197573d9cac8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fc2c00267284b4957aeb0005b6300a1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a9fc2c00267284b4957aeb0005b6300a1">operator==</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">UnorderedMap</a> const &amp;map) const </td></tr>
<tr class="separator:a9fc2c00267284b4957aeb0005b6300a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38f75fa2d88f57df9a752808c0343e16"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a38f75fa2d88f57df9a752808c0343e16">operator!=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">UnorderedMap</a> const &amp;map) const </td></tr>
<tr class="separator:a38f75fa2d88f57df9a752808c0343e16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ff212e5a2e7b7a20623b1ca4468d5e1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_n_r_e___string_8hpp.php#a20410cefd428aefdf41f418a1e489d66">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a4ff212e5a2e7b7a20623b1ca4468d5e1">toString</a> () const </td></tr>
<tr class="separator:a4ff212e5a2e7b7a20623b1ca4468d5e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_class_n_r_e_1_1_utility_1_1_stringable"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_class_n_r_e_1_1_utility_1_1_stringable')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="class_n_r_e_1_1_utility_1_1_stringable.php">NRE::Utility::Stringable&lt; UnorderedMap&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt; &gt;</a></td></tr>
<tr class="memitem:a858907f8126e9c210854ddb659dd17ee inherit pub_methods_class_n_r_e_1_1_utility_1_1_stringable"><td class="memItemLeft" align="right" valign="top"><a class="el" href="_n_r_e___string_8hpp.php#a20410cefd428aefdf41f418a1e489d66">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_stringable.php#a858907f8126e9c210854ddb659dd17ee">toString</a> () const</td></tr>
<tr class="separator:a858907f8126e9c210854ddb659dd17ee inherit pub_methods_class_n_r_e_1_1_utility_1_1_stringable"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;class Key, class T, class Allocator, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt;<br />
class NRE::Utility::Detail::UnorderedMap&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;</h3>

<p>An unordered map, associative unordered container. </p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a class="anchor" id="ac356511c108ff2c9e1373e4d5875ce69"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ac356511c108ff2c9e1373e4d5875ce69">allocator_type</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a03464c30ebfb1db56a08da6a54b01592">AllocatorType</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>STL compatibility </p>

</div>
</div>
<a class="anchor" id="a03464c30ebfb1db56a08da6a54b01592"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a03464c30ebfb1db56a08da6a54b01592">AllocatorType</a> =  typename <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt;Key, T, Allocator, StoreHash, Hash, KeyEqual&gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a03464c30ebfb1db56a08da6a54b01592">AllocatorType</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>The container's allocator </p>

</div>
</div>
<a class="anchor" id="a6060e55337f7e33a6cb00129008e31b7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a6060e55337f7e33a6cb00129008e31b7">const_iterator</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>STL compatibility </p>

</div>
</div>
<a class="anchor" id="a1a777de1bca7a8bd32bfc7c8b4337125"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a1a777de1bca7a8bd32bfc7c8b4337125">const_local_iterator</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a059290148583ee70fff0dfffcecfadae">ConstLocalIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>STL compatibility </p>

</div>
</div>
<a class="anchor" id="a876c56964df33f299c109e9d5f006c26"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a876c56964df33f299c109e9d5f006c26">const_pointer</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a2accfb634819ca3b2de04027ebd78e1e">ConstPointer</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>STL compatibility </p>

</div>
</div>
<a class="anchor" id="ad4f46b7a227b76f479e49bc8662952e5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ad4f46b7a227b76f479e49bc8662952e5">const_reference</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a84e40c0d7b5baf57e3c9801de235968c">ConstReference</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>STL compatibility </p>

</div>
</div>
<a class="anchor" id="a214ac68222bc37bb33f0d5998693119a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a> =  typename <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt;Key, T, Allocator, StoreHash, Hash, KeyEqual&gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Immuable forward access iterator </p>

</div>
</div>
<a class="anchor" id="a059290148583ee70fff0dfffcecfadae"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a059290148583ee70fff0dfffcecfadae">ConstLocalIterator</a> =  typename <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt;Key, T, Allocator, StoreHash, Hash, KeyEqual&gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a059290148583ee70fff0dfffcecfadae">ConstLocalIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Immuable local forward access iterator </p>

</div>
</div>
<a class="anchor" id="a2accfb634819ca3b2de04027ebd78e1e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a2accfb634819ca3b2de04027ebd78e1e">ConstPointer</a> =  typename <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt;Key, T, Allocator, StoreHash, Hash, KeyEqual&gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a2accfb634819ca3b2de04027ebd78e1e">ConstPointer</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>The allocated type const pointer </p>

</div>
</div>
<a class="anchor" id="a84e40c0d7b5baf57e3c9801de235968c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a84e40c0d7b5baf57e3c9801de235968c">ConstReference</a> =  typename <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt;Key, T, Allocator, StoreHash, Hash, KeyEqual&gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a84e40c0d7b5baf57e3c9801de235968c">ConstReference</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>The allocated type const reference </p>

</div>
</div>
<a class="anchor" id="a792d2fc93f7a3c59675a20822f7db87d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a792d2fc93f7a3c59675a20822f7db87d">difference_type</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ae63f1aba3510bd166a82b790c13eda83">DifferenceType</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>STL compatibility </p>

</div>
</div>
<a class="anchor" id="ae63f1aba3510bd166a82b790c13eda83"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ae63f1aba3510bd166a82b790c13eda83">DifferenceType</a> =  typename <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt;Key, T, Allocator, StoreHash, Hash, KeyEqual&gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ae63f1aba3510bd166a82b790c13eda83">DifferenceType</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>The object's difference type </p>

</div>
</div>
<a class="anchor" id="afe015e9c77ce67eb6d31c8a5b723a92d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a> =  typename <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt;Key, T, Allocator, StoreHash, Hash, KeyEqual&gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Mutable forward access iterator </p>

</div>
</div>
<a class="anchor" id="a8c971d0b3d473586e24e807061608d9c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a8c971d0b3d473586e24e807061608d9c">iterator</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>STL compatibility </p>

</div>
</div>
<a class="anchor" id="affd4a529160f9f3727fe4b73f9c23cc4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a> =  Key</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Check if the given AllocatorType inherit from NRE::Memory::AllocatorBase Make sure the allocator is set for the container inner type The table key type </p>

</div>
</div>
<a class="anchor" id="a3a389ad8dc0b308c838c602a2051e386"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a3a389ad8dc0b308c838c602a2051e386">local_iterator</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ab63c24353fe4825723cfe43cd797b269">LocalIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>STL compatibility </p>

</div>
</div>
<a class="anchor" id="ab63c24353fe4825723cfe43cd797b269"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ab63c24353fe4825723cfe43cd797b269">LocalIterator</a> =  typename <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt;Key, T, Allocator, StoreHash, Hash, KeyEqual&gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ab63c24353fe4825723cfe43cd797b269">LocalIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Mutable local forward access iterator </p>

</div>
</div>
<a class="anchor" id="a50374b4303e7065f73258f1ba167a6a9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a50374b4303e7065f73258f1ba167a6a9">MappedType</a> =  T</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>The table mapped type </p>

</div>
</div>
<a class="anchor" id="a07a05fc86d0e88685b064d4e5862d7f0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a07a05fc86d0e88685b064d4e5862d7f0">Pointer</a> =  typename <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt;Key, T, Allocator, StoreHash, Hash, KeyEqual&gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a07a05fc86d0e88685b064d4e5862d7f0">Pointer</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>The allocated type pointer </p>

</div>
</div>
<a class="anchor" id="a1e9462b4b390aa8743fea458307554ff"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a1e9462b4b390aa8743fea458307554ff">pointer</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a07a05fc86d0e88685b064d4e5862d7f0">Pointer</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>STL compatibility </p>

</div>
</div>
<a class="anchor" id="a7a64f445635cc96d63caf1ac27ea8622"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a7a64f445635cc96d63caf1ac27ea8622">Reference</a> =  typename <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt;Key, T, Allocator, StoreHash, Hash, KeyEqual&gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a7a64f445635cc96d63caf1ac27ea8622">Reference</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>The allocated type reference </p>

</div>
</div>
<a class="anchor" id="aba398717b3eb03287577e01414315379"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#aba398717b3eb03287577e01414315379">reference</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a7a64f445635cc96d63caf1ac27ea8622">Reference</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>STL compatibility </p>

</div>
</div>
<a class="anchor" id="a550756cec355909898cfbb06ba825ab7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a550756cec355909898cfbb06ba825ab7">size_type</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>STL compatibility </p>

</div>
</div>
<a class="anchor" id="a5838a2a54c769f1802b69d78e4717773"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a> =  typename <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt;Key, T, Allocator, StoreHash, Hash, KeyEqual&gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>The object's size type </p>

</div>
</div>
<a class="anchor" id="aa5f75b329ddc50e92491c3d93b984677"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#aa5f75b329ddc50e92491c3d93b984677">value_type</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a0de54a72d0fc3ed8177f686737352bae">ValueType</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>STL compatibility </p>

</div>
</div>
<a class="anchor" id="a0de54a72d0fc3ed8177f686737352bae"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a0de54a72d0fc3ed8177f686737352bae">ValueType</a> =  <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a50374b4303e7065f73258f1ba167a6a9">MappedType</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>The container's allocated type </p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a4683736420fd2c7a86c61a8326eda599"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">UnorderedMap</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a>&#160;</td>
          <td class="paramname"><em>bucketCount</em> = <code><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt;&#160;Key,&#160;T,&#160;Allocator,&#160;StoreHash,&#160;Hash,&#160;KeyEqual&#160;&gt;::DEFAULT_BUCKET_COUNT</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Hash const &amp;&#160;</td>
          <td class="paramname"><em>hasher</em> = <code>Hash()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">KeyEqual const &amp;&#160;</td>
          <td class="paramname"><em>equal</em> = <code>KeyEqual()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Allocator const &amp;&#160;</td>
          <td class="paramname"><em>alloc</em> = <code>Allocator()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct an empty map with a number of bucket </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bucketCount</td><td>the base bucket count </td></tr>
    <tr><td class="paramname">hasher</td><td>the hash function used in the map </td></tr>
    <tr><td class="paramname">equal</td><td>the equal function used in the map </td></tr>
    <tr><td class="paramname">alloc</td><td>the hashtable's memory allocator </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aec5b005c4ed81587b142a5eda0048b83"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
<div class="memtemplate">
template&lt;class InputIterator &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">UnorderedMap</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_n_r_e_1_1_utility_1_1_input_iterator.php">InputIterator</a>&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_n_r_e_1_1_utility_1_1_input_iterator.php">InputIterator</a>&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a>&#160;</td>
          <td class="paramname"><em>bucketCount</em> = <code><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt;&#160;Key,&#160;T,&#160;Allocator,&#160;StoreHash,&#160;Hash,&#160;KeyEqual&#160;&gt;::DEFAULT_BUCKET_COUNT</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Hash const &amp;&#160;</td>
          <td class="paramname"><em>hasher</em> = <code>Hash()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">KeyEqual const &amp;&#160;</td>
          <td class="paramname"><em>equal</em> = <code>KeyEqual()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Allocator const &amp;&#160;</td>
          <td class="paramname"><em>alloc</em> = <code>Allocator()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct a map with a number of bucket and filled with elements in the given range </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>the begin iterator </td></tr>
    <tr><td class="paramname">end</td><td>the end iterator </td></tr>
    <tr><td class="paramname">bucketCount</td><td>the base bucket count </td></tr>
    <tr><td class="paramname">hasher</td><td>the hash function used in the map </td></tr>
    <tr><td class="paramname">equal</td><td>the equal function used in the map </td></tr>
    <tr><td class="paramname">alloc</td><td>the hashtable's memory allocator </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4307f584c01d460acc70876a20610bba"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">UnorderedMap</a> </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a0de54a72d0fc3ed8177f686737352bae">ValueType</a> &gt;&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a>&#160;</td>
          <td class="paramname"><em>bucketCount</em> = <code><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt;&#160;Key,&#160;T,&#160;Allocator,&#160;StoreHash,&#160;Hash,&#160;KeyEqual&#160;&gt;::DEFAULT_BUCKET_COUNT</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Hash const &amp;&#160;</td>
          <td class="paramname"><em>hasher</em> = <code>Hash()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">KeyEqual const &amp;&#160;</td>
          <td class="paramname"><em>equal</em> = <code>KeyEqual()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Allocator const &amp;&#160;</td>
          <td class="paramname"><em>alloc</em> = <code>Allocator()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct a map with a number of bucket and filled with elements in the given list </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>the list to fill the map with </td></tr>
    <tr><td class="paramname">bucketCount</td><td>the base bucket count </td></tr>
    <tr><td class="paramname">hasher</td><td>the hash function used in the map </td></tr>
    <tr><td class="paramname">equal</td><td>the equal function used in the map </td></tr>
    <tr><td class="paramname">alloc</td><td>the hashtable's memory allocator </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab2db25bf53c57fa0e693ccb36a60a61e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">UnorderedMap</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt; const &amp;&#160;</td>
          <td class="paramname"><em>map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Allocator const &amp;&#160;</td>
          <td class="paramname"><em>alloc</em> = <code>Allocator()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy map into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">map</td><td>the map to copy </td></tr>
    <tr><td class="paramname">alloc</td><td>the hashtable's memory allocator </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a0124d453dc2be3c8de76259308db4f47"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">UnorderedMap</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Allocator const &amp;&#160;</td>
          <td class="paramname"><em>alloc</em> = <code>Allocator()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Move map into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">map</td><td>the map to move </td></tr>
    <tr><td class="paramname">alloc</td><td>the hashtable's memory allocator </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a128c090b771811df3cdcade53d9e1b50"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>an iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a9249bba6954362f4d37c7d646a5eef23"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="abf6fbce112ae28528d458e2810e875f9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ab63c24353fe4825723cfe43cd797b269">LocalIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::begin </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a>&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Grab an iterator on a given bucket </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the bucket index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the bucket </dd></dl>

</div>
</div>
<a class="anchor" id="aa82b759fd381195900bf120a0fefecce"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a059290148583ee70fff0dfffcecfadae">ConstLocalIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::begin </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a>&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Grab a const iterator on a given bucket </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the bucket index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the bucket </dd></dl>

</div>
</div>
<a class="anchor" id="a6cbcfc2b0374da6796fc7c73f3243231"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::cbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a63e72874bc4c7b7dda04381a1fa7f162"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a059290148583ee70fff0dfffcecfadae">ConstLocalIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::cbegin </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a>&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Grab a const iterator on a given bucket </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the bucket index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the bucket </dd></dl>

</div>
</div>
<a class="anchor" id="a593bc78ebe14ebccfc3bcb1fa5bbaf0a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::cend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a05091195a6e083bcdf5d351fa738b7a0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a059290148583ee70fff0dfffcecfadae">ConstLocalIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::cend </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a>&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Grab a const iterator on a given bucket end </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the bucket index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the bucket end </dd></dl>

</div>
</div>
<a class="anchor" id="ae9bf1f3d1ec25abb810b81013175bc27"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Clear all buckets </p>

</div>
</div>
<a class="anchor" id="a650a2fa0b45abda6f6fdacec275a1fb5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
<div class="memtemplate">
template&lt;class... Args&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a>, bool&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::emplace </td>
          <td>(</td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Emplace an element using the given elements </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">args</td><td>the parameter pack used to create the inserted pair </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pair containing an iterator on the inserted element, and a boolean telling if the insertion has been done </dd></dl>

</div>
</div>
<a class="anchor" id="a0ae616a891acd496526a50628c557e51"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
<div class="memtemplate">
template&lt;class... Args&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::emplaceHint </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>hint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Emplace an element using the given elements </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">hint</td><td>the iterator used as a hint to emplace the element </td></tr>
    <tr><td class="paramname">args</td><td>the parameter pack used to create the inserted pair </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator on the inserted element </dd></dl>

</div>
</div>
<a class="anchor" id="a0d641df832ffd4119293d3e5c5890d98"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>an iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a00c3ebbd179a795ccb9ad3a19321372c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a6b2771b932bbdcda92fcfa3bde1c9d93"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#ab63c24353fe4825723cfe43cd797b269">LocalIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::end </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a>&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Grab an iterator on a given bucket end </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the bucket index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the bucket end </dd></dl>

</div>
</div>
<a class="anchor" id="a30188ac3833afa0b9db0bcd0945bae70"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a059290148583ee70fff0dfffcecfadae">ConstLocalIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::end </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a>&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Grab a const iterator on a given bucket end </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the bucket index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the bucket end </dd></dl>

</div>
</div>
<a class="anchor" id="a169c821d87f19e223630e55b251b6370"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a>&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::equalRange </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a> const &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find a range of iterator containing all elements with the given key, both end if not found </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>the key to search </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pair of iterator </dd></dl>

</div>
</div>
<a class="anchor" id="a3da7b739ab4f28ee21d8aabd1164a478"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a>&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::equalRange </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a> const &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find a range of iterator containing all elements with the given key, both end if not found </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>the key to search </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pair of iterator </dd></dl>

</div>
</div>
<a class="anchor" id="a9ae3b948aaf83570097dc9d18ac5df04"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a>&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase the element pointed by the iterator </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>the iterator on the erased element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator after the erased element </dd></dl>

</div>
</div>
<a class="anchor" id="a9148ac4385d24d624fed7cfa48b48ea1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase the element pointed by the iterator </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>the iterator on the erased element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator after the erased element </dd></dl>

</div>
</div>
<a class="anchor" id="aeafa40d601846ce631536c1609e87957"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase the element in the given range </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>the begin iterator for erasing </td></tr>
    <tr><td class="paramname">end</td><td>the end iterator for erasing </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator after the last erased element </dd></dl>

</div>
</div>
<a class="anchor" id="af6be1a234aa0e8766a0f26fcd54b6074"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a> const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase all element with the given key </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key to search and erase </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the number of erased elements </dd></dl>

</div>
</div>
<a class="anchor" id="a16ac8e7f3ab1efa9a77aec1cb3d090f1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::find </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a> const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find the element corresponding with the given key </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key to search </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator pointing on the element, or end if not found </dd></dl>

</div>
</div>
<a class="anchor" id="ae3385719e23e4aca07ec5b464c6336f2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::find </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a> const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find the element corresponding with the given key </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key to search </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator pointing on the element, or end if not found </dd></dl>

</div>
</div>
<a class="anchor" id="a26590c9ede6bcb1824a54ed024e81a89"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a50374b4303e7065f73258f1ba167a6a9">MappedType</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::get </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a> const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element with bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the element key </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="a6e624879d663713893087dbfde17a151"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a50374b4303e7065f73258f1ba167a6a9">MappedType</a> const&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::get </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a> const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element with bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the element key </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="ae6e6720055eb757bc53c2f578173fc3b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">Allocator <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::getAllocator </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the hashtable's memory allocator </dd></dl>

</div>
</div>
<a class="anchor" id="a170a9e31648cae267d837514f80d3a5f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::getBucket </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a> const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get the bucket index from a given key </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key to search </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding bucket </dd></dl>

</div>
</div>
<a class="anchor" id="ae4f718a50ed31c429a02c3c14be58646"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::getBucketCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the number of buckets in the map </dd></dl>

</div>
</div>
<a class="anchor" id="a53e531ebd5f343c73b415fb13c7b7ebc"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::getCount </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a> const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find the number of element with the given key </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key to search </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the number of corresponding elements </dd></dl>

</div>
</div>
<a class="anchor" id="ae18851c74e2c88ce3860e342ff0141d2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">Hash <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::getHash </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the hash function </dd></dl>

</div>
</div>
<a class="anchor" id="af5effa24760533dac127be863b9e92b8"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">KeyEqual <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::getKeyEqual </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the key equal function </dd></dl>

</div>
</div>
<a class="anchor" id="a0e43f86ebfbbf6114418ed87da0be45d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">float <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::getLoadFactor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the current load factor </dd></dl>

</div>
</div>
<a class="anchor" id="a882a6cb5a6da37373733bc34558dd9c5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::getMaxBucketCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the maximum number of bucket in the map </dd></dl>

</div>
</div>
<a class="anchor" id="a1829be10ab27023da4d292cb782ae549"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">float <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::getMaxLoadFactor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the maximum load factor </dd></dl>

</div>
</div>
<a class="anchor" id="a4a30ffae54ac797349088c7f62a68150"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::getMaxSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the maximum map size </dd></dl>

</div>
</div>
<a class="anchor" id="af7af175778f4d20239525682ae1a5859"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::getSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the number of elements in the map </dd></dl>

</div>
</div>
<a class="anchor" id="abcef005582fb80bb4f53aca519d77787"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a>, bool&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a0de54a72d0fc3ed8177f686737352bae">ValueType</a> const &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert the given value in the map </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the pair with the key and the corresponding element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pair containing an iterator on the inserted element, and a boolean telling if the insertion has been done </dd></dl>

</div>
</div>
<a class="anchor" id="a6cdb7d0150823aec9fa980ff1fc78c9e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
<div class="memtemplate">
template&lt;class P &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a>, bool&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::insert </td>
          <td>(</td>
          <td class="paramtype">P &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert the given value in the map </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the pair with the key and the corresponding element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pair containing an iterator on the inserted element, and a boolean telling if the insertion has been done </dd></dl>

</div>
</div>
<a class="anchor" id="a39d18c470560e441ad6713e5bcbac796"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
<div class="memtemplate">
template&lt;class InputIterator &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_n_r_e_1_1_utility_1_1_input_iterator.php">InputIterator</a>&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_n_r_e_1_1_utility_1_1_input_iterator.php">InputIterator</a>&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert elements in the given range </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>the begin iterator </td></tr>
    <tr><td class="paramname">end</td><td>the end iterator </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a10b0b1fa031d8c58b9ceb5b43fa0d17e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::insert </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a0de54a72d0fc3ed8177f686737352bae">ValueType</a> &gt;&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert elements in the given list </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>the list of value to insert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="adabdfb09c746d7d1aa1669ae0751fbf3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::insertHint </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>hint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a0de54a72d0fc3ed8177f686737352bae">ValueType</a> const &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert the given value in the map using the hint as a suggestion for the search start </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">hint</td><td>the hint used for the search </td></tr>
    <tr><td class="paramname">value</td><td>the value to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator on the inserted element </dd></dl>

</div>
</div>
<a class="anchor" id="a839fa3eb5f586edcef5ba886c3a78b53"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
<div class="memtemplate">
template&lt;class P &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#afe015e9c77ce67eb6d31c8a5b723a92d">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::insertHint </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a214ac68222bc37bb33f0d5998693119a">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>hint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">P &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert the given value in the map using the hint as a suggestion for the search start </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">hint</td><td>the hint used for the search </td></tr>
    <tr><td class="paramname">value</td><td>the value to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator on the inserted element </dd></dl>

</div>
</div>
<a class="anchor" id="a966f24b619b53781c1411226ad463d7c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::isEmpty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>if the map is empty </dd></dl>

</div>
</div>
<a class="anchor" id="a38f75fa2d88f57df9a752808c0343e16"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::operator!= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt; const &amp;&#160;</td>
          <td class="paramname"><em>map</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Inequality test between this and map </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">map</td><td>the other map </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<a class="anchor" id="a19f5038397b76c11756221057ac74db3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">UnorderedMap</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt; const &amp;&#160;</td>
          <td class="paramname"><em>map</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy map into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">map</td><td>the map to copy into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="ad6b7b83c76db5045f178d9c6b3e30427"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">UnorderedMap</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>map</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Move map into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">map</td><td>the map to move into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a9fc2c00267284b4957aeb0005b6300a1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt; const &amp;&#160;</td>
          <td class="paramname"><em>map</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Equality test between this and map </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">map</td><td>the other map </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<a class="anchor" id="a5cf40e3ce6dbb298432448424daf7538"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a50374b4303e7065f73258f1ba167a6a9">MappedType</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a> const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Try to access the element designed by the given key, if not found insert a default one </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key used for access </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the found/inserted element </dd></dl>

</div>
</div>
<a class="anchor" id="ad925c56ff026224593cb197573d9cac8"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a50374b4303e7065f73258f1ba167a6a9">MappedType</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#affd4a529160f9f3727fe4b73f9c23cc4">KeyType</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Try to access the element designed by the given key, if not found insert a default one </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key used for access </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the found/inserted element </dd></dl>

</div>
</div>
<a class="anchor" id="aecd196f695d17309438f7e1ee565b74c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::rehash </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a>&#160;</td>
          <td class="paramname"><em>count</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Reserve at least coutn bucket in the map and rehash the map </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the number of desired bucket </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aae40f2ecc24e1fbe5b4dabe74b7adc40"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::reserve </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php#a5838a2a54c769f1802b69d78e4717773">SizeType</a>&#160;</td>
          <td class="paramname"><em>count</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Reserve at least count bucket in the map and rehash the map </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the number of desired bucket </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a009afb7ae049f2e373c73c97c8a03fe9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::setMaxLoadFactor </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>factor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set the new max load factor, must be between 0.0 and 1.0 </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">factor</td><td>the new factor </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a07287deec188c86b66c6a0318b31cb0a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt; &amp;&#160;</td>
          <td class="paramname"><em>map</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Swap the map with another map </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">map</td><td>the other map </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4ff212e5a2e7b7a20623b1ca4468d5e1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , class Allocator , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_n_r_e___string_8hpp.php#a20410cefd428aefdf41f418a1e489d66">String</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_unordered_map.php">NRE::Utility::Detail::UnorderedMap</a>&lt; Key, T, Allocator, StoreHash, Hash, KeyEqual &gt;::toString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Convert the object into a string representation </p><dl class="section return"><dt>Returns</dt><dd>the converted object </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/mnt/c/Users/abell/Documents/GitHub/NRE-Utility/src/Utility/Detail/UnorderedMap/<a class="el" href="_detail_2_unordered_map_2_n_r_e___unordered_map_8hpp_source.php">NRE_UnorderedMap.hpp</a></li>
</ul>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.8-->
<!-- start footer part -->
</div>
</div>
</div>
</div>
</body>
</html>
