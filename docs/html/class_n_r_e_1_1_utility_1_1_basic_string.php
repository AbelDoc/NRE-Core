<!-- HTML header for doxygen 1.8.8-->
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <!-- For Mobile Devices -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
        <meta name="generator" content="Doxygen 1.8.11"/>
        <script type="text/javascript" src="../../js/jquery-2.1.1.min.js"></script>
        <title>NRE-Math: NRE::Utility::BasicString&lt; T &gt; Class Template Reference</title>
        <!--<link href="tabs.css" rel="stylesheet" type="text/css"/>-->
        <script type="text/javascript" src="dynsections.js"></script>
        <link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <link href='https://fonts.googleapis.com/css?family=Roboto+Slab' rel='stylesheet' type='text/css'>
        <?php
            include '../../php/navigation.php';
            if (!isset($_COOKIE["theme"]) || $_COOKIE["theme"] == "dark") {
                echo '<link href="../../css/dark/bootstrap.css" rel="stylesheet">';
            } else {
                echo '<link href="../../css/light/bootstrap.css" rel="stylesheet">';
            }
        ?>
        <script src="../../js/bootstrap.min.js"></script>
        <script type="text/javascript" src="doxy-boot.js"></script>
    </head>
    <body>
        <div class="container-fluid">
            <header class="page-header">
                <a href="../../../index.php">
                    <img src="../../img/Logo.png" class="logo img-responsive"/>
                </a>
            </header>
            <?php addNavigationBarInl(false); ?>
            <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
                <div class="content" id="content">
                    <div class="container">
                        <div class="row">
                            <div class="col-sm-12 panel " style="padding-bottom: 15px;">
                                <div style="margin-bottom: 15px;">
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespace_n_r_e.php">NRE</a></li><li class="navelem"><b>Utility</b></li><li class="navelem"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="class_n_r_e_1_1_utility_1_1_basic_string-members.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">NRE::Utility::BasicString&lt; T &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A basic template string, with dynamic size, guarantee to be in contiguous memory.  
 <a href="class_n_r_e_1_1_utility_1_1_basic_string.php#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_n_r_e___string_8hpp_source.php">NRE_String.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a84fd549f39f627b1caf412fac4459597"><td class="memItemLeft" align="right" valign="top">typedef T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a84fd549f39f627b1caf412fac4459597">Iterator</a></td></tr>
<tr class="separator:a84fd549f39f627b1caf412fac4459597"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a557d930ae5e01b60275a3b01a3a19f86"><td class="memItemLeft" align="right" valign="top">typedef const T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a></td></tr>
<tr class="separator:a557d930ae5e01b60275a3b01a3a19f86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ed577da05148ce11444e7aaa61e8619"><td class="memItemLeft" align="right" valign="top">typedef std::reverse_iterator&lt; T * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6ed577da05148ce11444e7aaa61e8619">ReverseIterator</a></td></tr>
<tr class="separator:a6ed577da05148ce11444e7aaa61e8619"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a485e704b88080f8e73b348504a6dd333"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a485e704b88080f8e73b348504a6dd333"></a>
typedef std::reverse_iterator&lt; const T * &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>ConstReverseIterator</b></td></tr>
<tr class="separator:a485e704b88080f8e73b348504a6dd333"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a9a3f02658ae8cb4aefeaebfd72b92020"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a9a3f02658ae8cb4aefeaebfd72b92020">BasicString</a> ()</td></tr>
<tr class="separator:a9a3f02658ae8cb4aefeaebfd72b92020"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aafcdc42cb6c6c15740c2bc90f15b32b2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aafcdc42cb6c6c15740c2bc90f15b32b2">BasicString</a> (std::size_t count, T value)</td></tr>
<tr class="separator:aafcdc42cb6c6c15740c2bc90f15b32b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22c30b99214255bb730c8672a3904866"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a22c30b99214255bb730c8672a3904866">BasicString</a> (std::size_t pos, std::size_t count, <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str)</td></tr>
<tr class="separator:a22c30b99214255bb730c8672a3904866"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b49cf0023848f6cbe9f954d46cf3ff5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a2b49cf0023848f6cbe9f954d46cf3ff5">BasicString</a> (std::size_t count, const T *str)</td></tr>
<tr class="separator:a2b49cf0023848f6cbe9f954d46cf3ff5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee30c7d284a0db0c0620e1a6903ea302"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aee30c7d284a0db0c0620e1a6903ea302">BasicString</a> (const T *str)</td></tr>
<tr class="separator:aee30c7d284a0db0c0620e1a6903ea302"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6917a729f68384e412f0702a57da5abd"><td class="memTemplParams" colspan="2">template&lt;class InputIterator &gt; </td></tr>
<tr class="memitem:a6917a729f68384e412f0702a57da5abd"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6917a729f68384e412f0702a57da5abd">BasicString</a> (InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a87336e1c57b46a945b6edf733b0a926d">begin</a>, InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40d0473b2964f19ba6f4a98696cc91b2">end</a>)</td></tr>
<tr class="separator:a6917a729f68384e412f0702a57da5abd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c4f5cf3fea12096e51c6e5f55c35629"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a2c4f5cf3fea12096e51c6e5f55c35629">BasicString</a> (std::initializer_list&lt; T &gt; init)</td></tr>
<tr class="separator:a2c4f5cf3fea12096e51c6e5f55c35629"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86b62ef1ead351c7cd9e8868d1bdf4fd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a86b62ef1ead351c7cd9e8868d1bdf4fd">BasicString</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str)</td></tr>
<tr class="separator:a86b62ef1ead351c7cd9e8868d1bdf4fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2e21d830517beb02a3cb3a1310fcd9c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#af2e21d830517beb02a3cb3a1310fcd9c">BasicString</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&amp;str)</td></tr>
<tr class="separator:af2e21d830517beb02a3cb3a1310fcd9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4767aa21ed166bbcbba3346e20063c81"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a4767aa21ed166bbcbba3346e20063c81">~BasicString</a> ()</td></tr>
<tr class="separator:a4767aa21ed166bbcbba3346e20063c81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ee35a3d0dc9aaa82ef5d1f2161adb1b"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a1ee35a3d0dc9aaa82ef5d1f2161adb1b">get</a> (std::size_t index)</td></tr>
<tr class="separator:a1ee35a3d0dc9aaa82ef5d1f2161adb1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38195baf7bd0232759d4a8f144684a1e"><td class="memItemLeft" align="right" valign="top">T const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a38195baf7bd0232759d4a8f144684a1e">get</a> (std::size_t index) const </td></tr>
<tr class="separator:a38195baf7bd0232759d4a8f144684a1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa168f5bdce940de92d3f5c39e8159759"><td class="memItemLeft" align="right" valign="top">const T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aa168f5bdce940de92d3f5c39e8159759">getData</a> () const </td></tr>
<tr class="separator:aa168f5bdce940de92d3f5c39e8159759"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0077ab896a00c0aa6e785fffb2b417d5"><td class="memItemLeft" align="right" valign="top">const T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a0077ab896a00c0aa6e785fffb2b417d5">getCData</a> () const </td></tr>
<tr class="separator:a0077ab896a00c0aa6e785fffb2b417d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3e4c324e16594a98292ff51b0b00267"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab3e4c324e16594a98292ff51b0b00267">getFront</a> ()</td></tr>
<tr class="separator:ab3e4c324e16594a98292ff51b0b00267"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09ef555d16d12a3c42d31cf7eefbf5a7"><td class="memItemLeft" align="right" valign="top">T const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a09ef555d16d12a3c42d31cf7eefbf5a7">getFront</a> () const </td></tr>
<tr class="separator:a09ef555d16d12a3c42d31cf7eefbf5a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e466d36e361dc572931d21896c527cd"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a5e466d36e361dc572931d21896c527cd">getLast</a> ()</td></tr>
<tr class="separator:a5e466d36e361dc572931d21896c527cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed8592590a7a0097dc9cf28f6101799c"><td class="memItemLeft" align="right" valign="top">T const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aed8592590a7a0097dc9cf28f6101799c">getLast</a> () const </td></tr>
<tr class="separator:aed8592590a7a0097dc9cf28f6101799c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a446670e0a8bf0b49e2c4dde3d7e68542"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a446670e0a8bf0b49e2c4dde3d7e68542">getSize</a> () const </td></tr>
<tr class="separator:a446670e0a8bf0b49e2c4dde3d7e68542"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ed01f192a9c748153b095d56da2796a"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6ed01f192a9c748153b095d56da2796a">getLength</a> () const </td></tr>
<tr class="separator:a6ed01f192a9c748153b095d56da2796a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a649e9db31cfa007fcb42d3a72b67284c"><td class="memItemLeft" align="right" valign="top">constexpr std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a649e9db31cfa007fcb42d3a72b67284c">getMaxSize</a> () const </td></tr>
<tr class="separator:a649e9db31cfa007fcb42d3a72b67284c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a328ebd77a8bbb49a6776fefd417ebf4a"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a328ebd77a8bbb49a6776fefd417ebf4a">getCapacity</a> () const </td></tr>
<tr class="separator:a328ebd77a8bbb49a6776fefd417ebf4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20203ddad7a07bb0bdfb23260d7585f2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20203ddad7a07bb0bdfb23260d7585f2">isEmpty</a> () const </td></tr>
<tr class="separator:a20203ddad7a07bb0bdfb23260d7585f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87336e1c57b46a945b6edf733b0a926d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a84fd549f39f627b1caf412fac4459597">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a87336e1c57b46a945b6edf733b0a926d">begin</a> ()</td></tr>
<tr class="separator:a87336e1c57b46a945b6edf733b0a926d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5bdd1cd2ef63b3fd7fd48e0e92e96d07"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a5bdd1cd2ef63b3fd7fd48e0e92e96d07">begin</a> () const </td></tr>
<tr class="separator:a5bdd1cd2ef63b3fd7fd48e0e92e96d07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4fbaa10da05afb1e38f01550f089ec3b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a4fbaa10da05afb1e38f01550f089ec3b">cbegin</a> () const </td></tr>
<tr class="separator:a4fbaa10da05afb1e38f01550f089ec3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40d0473b2964f19ba6f4a98696cc91b2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a84fd549f39f627b1caf412fac4459597">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40d0473b2964f19ba6f4a98696cc91b2">end</a> ()</td></tr>
<tr class="separator:a40d0473b2964f19ba6f4a98696cc91b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add891802026c21f0982402995b25fe43"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#add891802026c21f0982402995b25fe43">end</a> () const </td></tr>
<tr class="separator:add891802026c21f0982402995b25fe43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa620f4b3a6a6e8783fdb343b919e0ef6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aa620f4b3a6a6e8783fdb343b919e0ef6">cend</a> () const </td></tr>
<tr class="separator:aa620f4b3a6a6e8783fdb343b919e0ef6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a295b7f396e515c30e490d0d8a10b7e30"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6ed577da05148ce11444e7aaa61e8619">ReverseIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a295b7f396e515c30e490d0d8a10b7e30">rbegin</a> ()</td></tr>
<tr class="separator:a295b7f396e515c30e490d0d8a10b7e30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a428f523963a236e6e9b165f01e1ecd8c"><td class="memItemLeft" align="right" valign="top">ConstReverseIterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a428f523963a236e6e9b165f01e1ecd8c">rbegin</a> () const </td></tr>
<tr class="separator:a428f523963a236e6e9b165f01e1ecd8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50d7fda113a402d7e7b18669aa7ea227"><td class="memItemLeft" align="right" valign="top">ConstReverseIterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a50d7fda113a402d7e7b18669aa7ea227">crbegin</a> () const </td></tr>
<tr class="separator:a50d7fda113a402d7e7b18669aa7ea227"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a009469819f09df8cafa2dce131d19cb2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6ed577da05148ce11444e7aaa61e8619">ReverseIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a009469819f09df8cafa2dce131d19cb2">rend</a> ()</td></tr>
<tr class="separator:a009469819f09df8cafa2dce131d19cb2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a579ac9b5d39c1e924c1a2ff45d59d68f"><td class="memItemLeft" align="right" valign="top">ConstReverseIterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a579ac9b5d39c1e924c1a2ff45d59d68f">rend</a> () const </td></tr>
<tr class="separator:a579ac9b5d39c1e924c1a2ff45d59d68f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae487050caf2434abc9b16bfab7241eba"><td class="memItemLeft" align="right" valign="top">ConstReverseIterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ae487050caf2434abc9b16bfab7241eba">crend</a> () const </td></tr>
<tr class="separator:ae487050caf2434abc9b16bfab7241eba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a009f07466409c0f15528f63e273f0a5e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a009f07466409c0f15528f63e273f0a5e">assign</a> (std::size_t count, T value)</td></tr>
<tr class="separator:a009f07466409c0f15528f63e273f0a5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab04d419d62fa599e802084a8a33dcd54"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab04d419d62fa599e802084a8a33dcd54">assign</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str)</td></tr>
<tr class="separator:ab04d419d62fa599e802084a8a33dcd54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23db49a6689502a918d487fddf14346d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a23db49a6689502a918d487fddf14346d">assign</a> (std::size_t pos, std::size_t count, <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str)</td></tr>
<tr class="separator:a23db49a6689502a918d487fddf14346d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12b1678540e15327f9ebcabafd51afc1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a12b1678540e15327f9ebcabafd51afc1">assign</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&amp;str)</td></tr>
<tr class="separator:a12b1678540e15327f9ebcabafd51afc1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40ba4bea020e19d1835c3b64f5f7fb37"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40ba4bea020e19d1835c3b64f5f7fb37">assign</a> (std::size_t count, const T *str)</td></tr>
<tr class="separator:a40ba4bea020e19d1835c3b64f5f7fb37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89b70adb308a6301e29e97c5c3892e46"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a89b70adb308a6301e29e97c5c3892e46">assign</a> (const T *str)</td></tr>
<tr class="separator:a89b70adb308a6301e29e97c5c3892e46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8327bffba598171ede088d3b1fc16ace"><td class="memTemplParams" colspan="2">template&lt;class InputIterator &gt; </td></tr>
<tr class="memitem:a8327bffba598171ede088d3b1fc16ace"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a8327bffba598171ede088d3b1fc16ace">assign</a> (InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a87336e1c57b46a945b6edf733b0a926d">begin</a>, InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40d0473b2964f19ba6f4a98696cc91b2">end</a>)</td></tr>
<tr class="separator:a8327bffba598171ede088d3b1fc16ace"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19e77dd1dcd1204e991a95cc62405812"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a19e77dd1dcd1204e991a95cc62405812">assign</a> (std::initializer_list&lt; T &gt; init)</td></tr>
<tr class="separator:a19e77dd1dcd1204e991a95cc62405812"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21efaef50166a748a6a26db815cfeef5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a21efaef50166a748a6a26db815cfeef5">reserve</a> (std::size_t size)</td></tr>
<tr class="separator:a21efaef50166a748a6a26db815cfeef5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6035700c6308e4161bfec5fee48730e0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6035700c6308e4161bfec5fee48730e0">clear</a> ()</td></tr>
<tr class="separator:a6035700c6308e4161bfec5fee48730e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a043d8789a2fcc13972175e55cb0ae9c0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a043d8789a2fcc13972175e55cb0ae9c0">reverse</a> ()</td></tr>
<tr class="separator:a043d8789a2fcc13972175e55cb0ae9c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc0af8aedbfa789a79f0ae92d9a2898a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#adc0af8aedbfa789a79f0ae92d9a2898a">reverse</a> (std::size_t pos, std::size_t count)</td></tr>
<tr class="separator:adc0af8aedbfa789a79f0ae92d9a2898a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a408cb985f4efc28bc4a77b672ad65cf0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a408cb985f4efc28bc4a77b672ad65cf0">insert</a> (std::size_t start, std::size_t count, T value)</td></tr>
<tr class="separator:a408cb985f4efc28bc4a77b672ad65cf0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a698ce5fcbcb0c124a6411c426eeef386"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a698ce5fcbcb0c124a6411c426eeef386">insert</a> (std::size_t start, const T *str)</td></tr>
<tr class="separator:a698ce5fcbcb0c124a6411c426eeef386"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a556f4cdfea29a0430cf37f33873a16f5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a556f4cdfea29a0430cf37f33873a16f5">insert</a> (std::size_t start, std::size_t count, const T *str)</td></tr>
<tr class="separator:a556f4cdfea29a0430cf37f33873a16f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c7336f4719ec36b9fdc8277aebccc99"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a2c7336f4719ec36b9fdc8277aebccc99">insert</a> (std::size_t start, <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str)</td></tr>
<tr class="separator:a2c7336f4719ec36b9fdc8277aebccc99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a019fce3826f9d7d1cadbdfd133b715a3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a019fce3826f9d7d1cadbdfd133b715a3">insert</a> (std::size_t start, <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str, std::size_t index, std::size_t count)</td></tr>
<tr class="separator:a019fce3826f9d7d1cadbdfd133b715a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2507a9cb1f068ad86aa82d0b61ed9ebe"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a84fd549f39f627b1caf412fac4459597">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a2507a9cb1f068ad86aa82d0b61ed9ebe">insert</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a> start, T value)</td></tr>
<tr class="separator:a2507a9cb1f068ad86aa82d0b61ed9ebe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4cc21bcc8a8d686a8a02d1ede47afd4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a84fd549f39f627b1caf412fac4459597">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aa4cc21bcc8a8d686a8a02d1ede47afd4">insert</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a> start, std::size_t count, T value)</td></tr>
<tr class="separator:aa4cc21bcc8a8d686a8a02d1ede47afd4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13757cedd43c3f03ab141f9f77a131c9"><td class="memTemplParams" colspan="2">template&lt;class InputIterator &gt; </td></tr>
<tr class="memitem:a13757cedd43c3f03ab141f9f77a131c9"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a84fd549f39f627b1caf412fac4459597">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a13757cedd43c3f03ab141f9f77a131c9">insert</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a> start, InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a87336e1c57b46a945b6edf733b0a926d">begin</a>, InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40d0473b2964f19ba6f4a98696cc91b2">end</a>)</td></tr>
<tr class="separator:a13757cedd43c3f03ab141f9f77a131c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0898bf3a5f72eb5bf6ca3e59de50957"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a84fd549f39f627b1caf412fac4459597">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ae0898bf3a5f72eb5bf6ca3e59de50957">insert</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a> start, std::initializer_list&lt; T &gt; list)</td></tr>
<tr class="separator:ae0898bf3a5f72eb5bf6ca3e59de50957"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b2e04417a714f974453663ba7ffb6ef"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a8b2e04417a714f974453663ba7ffb6ef">erase</a> (std::size_t index, std::size_t count)</td></tr>
<tr class="separator:a8b2e04417a714f974453663ba7ffb6ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bf88394c90dcdead82d565616b57c1f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a84fd549f39f627b1caf412fac4459597">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a1bf88394c90dcdead82d565616b57c1f">erase</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a> position)</td></tr>
<tr class="separator:a1bf88394c90dcdead82d565616b57c1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefa48bb2f2b634ef7661880d2757d3e4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a84fd549f39f627b1caf412fac4459597">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aefa48bb2f2b634ef7661880d2757d3e4">erase</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a87336e1c57b46a945b6edf733b0a926d">begin</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40d0473b2964f19ba6f4a98696cc91b2">end</a>)</td></tr>
<tr class="separator:aefa48bb2f2b634ef7661880d2757d3e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fc5c8410a87b1802e3b006a7177569c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a1fc5c8410a87b1802e3b006a7177569c">pushBack</a> (T value)</td></tr>
<tr class="separator:a1fc5c8410a87b1802e3b006a7177569c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51b3da7e0493d6fd6a870629dabc871a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a51b3da7e0493d6fd6a870629dabc871a">popBack</a> ()</td></tr>
<tr class="separator:a51b3da7e0493d6fd6a870629dabc871a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20fb2d291dad6b589ddc5089c50fea1d"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:a20fb2d291dad6b589ddc5089c50fea1d"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20fb2d291dad6b589ddc5089c50fea1d">append</a> (K const &amp;o)</td></tr>
<tr class="separator:a20fb2d291dad6b589ddc5089c50fea1d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79b367b1b7cc3c95851d67061e6e20f0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a79b367b1b7cc3c95851d67061e6e20f0">append</a> (bool value)</td></tr>
<tr class="separator:a79b367b1b7cc3c95851d67061e6e20f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6a5d675e0e9dac8ae9bb0de1810845e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ad6a5d675e0e9dac8ae9bb0de1810845e">append</a> (T value)</td></tr>
<tr class="separator:ad6a5d675e0e9dac8ae9bb0de1810845e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a604e598bb4291331936837f03daa221f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a604e598bb4291331936837f03daa221f">append</a> (short int value)</td></tr>
<tr class="separator:a604e598bb4291331936837f03daa221f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07fc84ee065d04e1d120c6cf46b3d7bd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a07fc84ee065d04e1d120c6cf46b3d7bd">append</a> (int value)</td></tr>
<tr class="separator:a07fc84ee065d04e1d120c6cf46b3d7bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0ff6c2544d0a49345e56e6947239549"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ac0ff6c2544d0a49345e56e6947239549">append</a> (long int value)</td></tr>
<tr class="separator:ac0ff6c2544d0a49345e56e6947239549"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6995eb183265766342d7e1aa7035b9b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ae6995eb183265766342d7e1aa7035b9b">append</a> (long long int value)</td></tr>
<tr class="separator:ae6995eb183265766342d7e1aa7035b9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03aaef153454a9dc6eb4ffb2c3ec69c3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a03aaef153454a9dc6eb4ffb2c3ec69c3">append</a> (unsigned short int value)</td></tr>
<tr class="separator:a03aaef153454a9dc6eb4ffb2c3ec69c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee33d570595e1240c0b4f6326ffa2e30"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aee33d570595e1240c0b4f6326ffa2e30">append</a> (unsigned int value)</td></tr>
<tr class="separator:aee33d570595e1240c0b4f6326ffa2e30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:addefc97d40ebfd0ea3b50f2a42373674"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#addefc97d40ebfd0ea3b50f2a42373674">append</a> (unsigned long int value)</td></tr>
<tr class="separator:addefc97d40ebfd0ea3b50f2a42373674"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab682ac9c90b8b6a3d24a0468cb7b7502"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab682ac9c90b8b6a3d24a0468cb7b7502">append</a> (unsigned long long int value)</td></tr>
<tr class="separator:ab682ac9c90b8b6a3d24a0468cb7b7502"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9dcc848aefd7ea1b49cc02dea5c60f8b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a9dcc848aefd7ea1b49cc02dea5c60f8b">append</a> (float value)</td></tr>
<tr class="separator:a9dcc848aefd7ea1b49cc02dea5c60f8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01113158a0457b8eca3aa01f4a68f19a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a01113158a0457b8eca3aa01f4a68f19a">append</a> (double value)</td></tr>
<tr class="separator:a01113158a0457b8eca3aa01f4a68f19a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa24090a62a4744d254b7c4f6711a169"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aaa24090a62a4744d254b7c4f6711a169">append</a> (long double value)</td></tr>
<tr class="separator:aaa24090a62a4744d254b7c4f6711a169"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a437b4bf3c704c5a9beaa82a78c425fbe"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a437b4bf3c704c5a9beaa82a78c425fbe">append</a> (std::size_t count, T value)</td></tr>
<tr class="separator:a437b4bf3c704c5a9beaa82a78c425fbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17bd172896ff73d97cdb0cc612bb7e28"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a17bd172896ff73d97cdb0cc612bb7e28">append</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str)</td></tr>
<tr class="separator:a17bd172896ff73d97cdb0cc612bb7e28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3205fe9991c3b207853cf8be2c6d094e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a3205fe9991c3b207853cf8be2c6d094e">append</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str, std::size_t index, std::size_t count)</td></tr>
<tr class="separator:a3205fe9991c3b207853cf8be2c6d094e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f94818d9322f516124b918c202d7ab4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a2f94818d9322f516124b918c202d7ab4">append</a> (const T *str, std::size_t count)</td></tr>
<tr class="separator:a2f94818d9322f516124b918c202d7ab4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3f8fdfea90fe2f7dfe5ba74da485b99"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ac3f8fdfea90fe2f7dfe5ba74da485b99">append</a> (const T *str)</td></tr>
<tr class="separator:ac3f8fdfea90fe2f7dfe5ba74da485b99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefcc5c42ddaddc5a4c63b4af9a54086b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aefcc5c42ddaddc5a4c63b4af9a54086b">append</a> (std::string const &amp;str)</td></tr>
<tr class="separator:aefcc5c42ddaddc5a4c63b4af9a54086b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac81947765f131eb41fd35c111edb165d"><td class="memTemplParams" colspan="2">template&lt;class InputIterator &gt; </td></tr>
<tr class="memitem:ac81947765f131eb41fd35c111edb165d"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ac81947765f131eb41fd35c111edb165d">append</a> (InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a87336e1c57b46a945b6edf733b0a926d">begin</a>, InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40d0473b2964f19ba6f4a98696cc91b2">end</a>)</td></tr>
<tr class="separator:ac81947765f131eb41fd35c111edb165d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77dc49f9e04a64d0adce9bb8afe7daa2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a77dc49f9e04a64d0adce9bb8afe7daa2">append</a> (std::initializer_list&lt; T &gt; list)</td></tr>
<tr class="separator:a77dc49f9e04a64d0adce9bb8afe7daa2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad41793193f7610c892d24bb650c272db"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ad41793193f7610c892d24bb650c272db">compare</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str) const </td></tr>
<tr class="separator:ad41793193f7610c892d24bb650c272db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5be5efba3e60692f0b7d68a81251b967"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a5be5efba3e60692f0b7d68a81251b967">compare</a> (std::size_t tPos, std::size_t tCount, <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str) const </td></tr>
<tr class="separator:a5be5efba3e60692f0b7d68a81251b967"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c26227c3a27b11bf07be636cc004c6f"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a3c26227c3a27b11bf07be636cc004c6f">compare</a> (std::size_t tPos, std::size_t tCount, <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str, std::size_t sPos, std::size_t sCount) const </td></tr>
<tr class="separator:a3c26227c3a27b11bf07be636cc004c6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad141c8c93180d61ac18f9da85ff6a62d"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ad141c8c93180d61ac18f9da85ff6a62d">compare</a> (const T *str) const </td></tr>
<tr class="separator:ad141c8c93180d61ac18f9da85ff6a62d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65cf63fe6927e45827cb486bd4fc69d1"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a65cf63fe6927e45827cb486bd4fc69d1">compare</a> (std::size_t tPos, std::size_t tCount, const T *str) const </td></tr>
<tr class="separator:a65cf63fe6927e45827cb486bd4fc69d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17385a3e70dec404d8c58eaeaaa0a4b1"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a17385a3e70dec404d8c58eaeaaa0a4b1">compare</a> (std::size_t tPos, std::size_t tCount, const T *str, std::size_t sPos, std::size_t sCount) const </td></tr>
<tr class="separator:a17385a3e70dec404d8c58eaeaaa0a4b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a047e6ea23a748f1001aab1c7e913171a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a047e6ea23a748f1001aab1c7e913171a">startsWith</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str) const </td></tr>
<tr class="separator:a047e6ea23a748f1001aab1c7e913171a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ca87fa6562bfd1a1342978d0dfbd60b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a0ca87fa6562bfd1a1342978d0dfbd60b">startsWith</a> (T value) const </td></tr>
<tr class="separator:a0ca87fa6562bfd1a1342978d0dfbd60b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f2456c9acbacc6c2b8692324aba86af"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a8f2456c9acbacc6c2b8692324aba86af">startsWith</a> (const T *str) const </td></tr>
<tr class="separator:a8f2456c9acbacc6c2b8692324aba86af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a477dbc8a44874807dd41a2d8b91ec14b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a477dbc8a44874807dd41a2d8b91ec14b">endsWith</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str) const </td></tr>
<tr class="separator:a477dbc8a44874807dd41a2d8b91ec14b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4fee0d4f5bbc6235754f14b99fbaa60a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a4fee0d4f5bbc6235754f14b99fbaa60a">endsWith</a> (T value) const </td></tr>
<tr class="separator:a4fee0d4f5bbc6235754f14b99fbaa60a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada05264b34bafd8bd7d76979852520a6"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ada05264b34bafd8bd7d76979852520a6">endsWith</a> (const T *str) const </td></tr>
<tr class="separator:ada05264b34bafd8bd7d76979852520a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac196e1a45da4c10b3cea7ac859704c66"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ac196e1a45da4c10b3cea7ac859704c66">replace</a> (std::size_t pos, std::size_t count, <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str)</td></tr>
<tr class="separator:ac196e1a45da4c10b3cea7ac859704c66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4dc5a2b396270298682358aa7667ce69"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a4dc5a2b396270298682358aa7667ce69">replace</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a> start, <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40d0473b2964f19ba6f4a98696cc91b2">end</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str)</td></tr>
<tr class="separator:a4dc5a2b396270298682358aa7667ce69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a1833c4bc94071b2884d15dc01b8bf1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a3a1833c4bc94071b2884d15dc01b8bf1">replace</a> (std::size_t tPos, std::size_t tCount, <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str, std::size_t sPos, std::size_t sCount)</td></tr>
<tr class="separator:a3a1833c4bc94071b2884d15dc01b8bf1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15a6b724fd6dd01df42db1c70404722d"><td class="memTemplParams" colspan="2">template&lt;class InputIterator &gt; </td></tr>
<tr class="memitem:a15a6b724fd6dd01df42db1c70404722d"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a15a6b724fd6dd01df42db1c70404722d">replace</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a> tStart, <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a> tEnd, <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str, InputIterator sStart, InputIterator sEnd)</td></tr>
<tr class="separator:a15a6b724fd6dd01df42db1c70404722d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6babb3a40ac571290391347dcfeb1182"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6babb3a40ac571290391347dcfeb1182">replace</a> (std::size_t pos, std::size_t tCount, const T *str, std::size_t sCount)</td></tr>
<tr class="separator:a6babb3a40ac571290391347dcfeb1182"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d78b95be2f40cb6fbbf41c2246c941c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a7d78b95be2f40cb6fbbf41c2246c941c">replace</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a> start, <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40d0473b2964f19ba6f4a98696cc91b2">end</a>, const T *str, std::size_t sCount)</td></tr>
<tr class="separator:a7d78b95be2f40cb6fbbf41c2246c941c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a809f6cddf662a64fb73c416e1157ec2f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a809f6cddf662a64fb73c416e1157ec2f">replace</a> (std::size_t pos, std::size_t count, const T *str)</td></tr>
<tr class="separator:a809f6cddf662a64fb73c416e1157ec2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab762acab3ed28387534fec5e78c5d87b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab762acab3ed28387534fec5e78c5d87b">replace</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a> start, <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40d0473b2964f19ba6f4a98696cc91b2">end</a>, const T *str)</td></tr>
<tr class="separator:ab762acab3ed28387534fec5e78c5d87b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a9e9a68ae0d503083faa6d3c6b71001"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a0a9e9a68ae0d503083faa6d3c6b71001">replace</a> (std::size_t pos, std::size_t tCount, T value, std::size_t sCount)</td></tr>
<tr class="separator:a0a9e9a68ae0d503083faa6d3c6b71001"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e783583a07979d7967e7d01a55e0d18"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a0e783583a07979d7967e7d01a55e0d18">replace</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a> start, <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40d0473b2964f19ba6f4a98696cc91b2">end</a>, T value, std::size_t sCount)</td></tr>
<tr class="separator:a0e783583a07979d7967e7d01a55e0d18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a209163aab69f8989c05ef621ed3cd8c2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a209163aab69f8989c05ef621ed3cd8c2">replace</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a> start, <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40d0473b2964f19ba6f4a98696cc91b2">end</a>, std::initializer_list&lt; T &gt; list)</td></tr>
<tr class="separator:a209163aab69f8989c05ef621ed3cd8c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0639e5b3e9ecf3f6fc07a0c13347266b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a0639e5b3e9ecf3f6fc07a0c13347266b">substr</a> (std::size_t pos, std::size_t count) const </td></tr>
<tr class="separator:a0639e5b3e9ecf3f6fc07a0c13347266b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1db70d8010b41e9d5d2f773cce692359"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a1db70d8010b41e9d5d2f773cce692359">copy</a> (T *str, std::size_t pos, std::size_t count) const </td></tr>
<tr class="separator:a1db70d8010b41e9d5d2f773cce692359"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a828b20842d0d6de3e052f51e83f8dcec"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a828b20842d0d6de3e052f51e83f8dcec">resize</a> (std::size_t count)</td></tr>
<tr class="separator:a828b20842d0d6de3e052f51e83f8dcec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea55af05648a6ff2a5e93cd2cf95c591"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aea55af05648a6ff2a5e93cd2cf95c591">resize</a> (std::size_t count, T value)</td></tr>
<tr class="separator:aea55af05648a6ff2a5e93cd2cf95c591"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c5b14da8a367e0cb88268194e721ce0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6c5b14da8a367e0cb88268194e721ce0">swap</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;str)</td></tr>
<tr class="separator:a6c5b14da8a367e0cb88268194e721ce0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe91c26205f7c7f70d2a3edfb242fb88"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#afe91c26205f7c7f70d2a3edfb242fb88">shrinkToFit</a> ()</td></tr>
<tr class="separator:afe91c26205f7c7f70d2a3edfb242fb88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9cd15fa3754a286297b35ea3946db3b2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a9cd15fa3754a286297b35ea3946db3b2">contains</a> (const T *str) const </td></tr>
<tr class="separator:a9cd15fa3754a286297b35ea3946db3b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae34bc09210c179fad41babad1f94cc01"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ae34bc09210c179fad41babad1f94cc01">contains</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str) const </td></tr>
<tr class="separator:ae34bc09210c179fad41babad1f94cc01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a173b725cf3bfbbcf401cdf2a44b16609"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a173b725cf3bfbbcf401cdf2a44b16609">find</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str, std::size_t pos=0) const </td></tr>
<tr class="separator:a173b725cf3bfbbcf401cdf2a44b16609"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4180e49b43fad06984367dbe35401ddc"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a4180e49b43fad06984367dbe35401ddc">find</a> (std::size_t count, const T *str, std::size_t pos=0) const </td></tr>
<tr class="separator:a4180e49b43fad06984367dbe35401ddc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf14ff35915cf394e6935c174d199bce"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aaf14ff35915cf394e6935c174d199bce">find</a> (const T *str, std::size_t pos=0) const </td></tr>
<tr class="separator:aaf14ff35915cf394e6935c174d199bce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43968a1e6f05fef1ec959f37d2e2739d"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a43968a1e6f05fef1ec959f37d2e2739d">find</a> (T value, std::size_t pos=0) const </td></tr>
<tr class="separator:a43968a1e6f05fef1ec959f37d2e2739d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6b6578b24ac6d25bab6829a0ca445da"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ae6b6578b24ac6d25bab6829a0ca445da">rfind</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str, std::size_t pos) const </td></tr>
<tr class="separator:ae6b6578b24ac6d25bab6829a0ca445da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab444c88955b7061381c05d2a77a04c18"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab444c88955b7061381c05d2a77a04c18">rfind</a> (std::size_t count, const T *str, std::size_t pos) const </td></tr>
<tr class="separator:ab444c88955b7061381c05d2a77a04c18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c0488ba233f682afc89b592e3c49657"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6c0488ba233f682afc89b592e3c49657">rfind</a> (const T *str, std::size_t pos) const </td></tr>
<tr class="separator:a6c0488ba233f682afc89b592e3c49657"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51fcbc02f5c2c0db76f4bc164854a1df"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a51fcbc02f5c2c0db76f4bc164854a1df">rfind</a> (T value, std::size_t pos) const </td></tr>
<tr class="separator:a51fcbc02f5c2c0db76f4bc164854a1df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a364d9113d5f5ffe468e2abc0843c1b3b"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a364d9113d5f5ffe468e2abc0843c1b3b">findFirstOf</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str, std::size_t pos=0) const </td></tr>
<tr class="separator:a364d9113d5f5ffe468e2abc0843c1b3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93323a167408c3a44cb52770197ade74"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a93323a167408c3a44cb52770197ade74">findFirstOf</a> (std::size_t count, const T *str, std::size_t pos=0) const </td></tr>
<tr class="separator:a93323a167408c3a44cb52770197ade74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a0e4d4f7295afb0038e7d8c5c7fa267"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a9a0e4d4f7295afb0038e7d8c5c7fa267">findFirstOf</a> (const T *str, std::size_t pos=0) const </td></tr>
<tr class="separator:a9a0e4d4f7295afb0038e7d8c5c7fa267"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff39311e04d9bab37d8f9e1123c05354"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aff39311e04d9bab37d8f9e1123c05354">findFirstOf</a> (T value, std::size_t pos=0) const </td></tr>
<tr class="separator:aff39311e04d9bab37d8f9e1123c05354"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5479bebe9d7dbde8be07e476935468b2"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a5479bebe9d7dbde8be07e476935468b2">findFirstNotOf</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str, std::size_t pos=0) const </td></tr>
<tr class="separator:a5479bebe9d7dbde8be07e476935468b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affa05c2f41e2ef8936ae1f71994cd61b"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#affa05c2f41e2ef8936ae1f71994cd61b">findFirstNotOf</a> (std::size_t count, const T *str, std::size_t pos=0) const </td></tr>
<tr class="separator:affa05c2f41e2ef8936ae1f71994cd61b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a007fdab8cb51260e5b6e0b303fbbb516"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a007fdab8cb51260e5b6e0b303fbbb516">findFirstNotOf</a> (const T *str, std::size_t pos=0) const </td></tr>
<tr class="separator:a007fdab8cb51260e5b6e0b303fbbb516"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5e703c7653f2f32425a6ff6581a6a14"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ad5e703c7653f2f32425a6ff6581a6a14">findFirstNotOf</a> (T value, std::size_t pos=0) const </td></tr>
<tr class="separator:ad5e703c7653f2f32425a6ff6581a6a14"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ee2c392596a64a276edf3d90b3dc01a"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a7ee2c392596a64a276edf3d90b3dc01a">findLastOf</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str, std::size_t pos) const </td></tr>
<tr class="separator:a7ee2c392596a64a276edf3d90b3dc01a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf6b9c73f1b26b414b7366de5b4a6cd4"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#acf6b9c73f1b26b414b7366de5b4a6cd4">findLastOf</a> (std::size_t count, const T *str, std::size_t pos) const </td></tr>
<tr class="separator:acf6b9c73f1b26b414b7366de5b4a6cd4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac54629878f6a29de68c35b89fd860bd2"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ac54629878f6a29de68c35b89fd860bd2">findLastOf</a> (const T *str, std::size_t pos) const </td></tr>
<tr class="separator:ac54629878f6a29de68c35b89fd860bd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef0f9908b934f09ab7e94c9f0471fe46"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aef0f9908b934f09ab7e94c9f0471fe46">findLastOf</a> (T value, std::size_t pos) const </td></tr>
<tr class="separator:aef0f9908b934f09ab7e94c9f0471fe46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe13e8614d8f30631ee893758c69275f"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#afe13e8614d8f30631ee893758c69275f">findLastNotOf</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str, std::size_t pos) const </td></tr>
<tr class="separator:afe13e8614d8f30631ee893758c69275f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c46c66eadeae49916dc2e54fd302eb6"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a7c46c66eadeae49916dc2e54fd302eb6">findLastNotOf</a> (std::size_t count, const T *str, std::size_t pos) const </td></tr>
<tr class="separator:a7c46c66eadeae49916dc2e54fd302eb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae47fed6bacfdd1ca6923b6aaa5f8f61e"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ae47fed6bacfdd1ca6923b6aaa5f8f61e">findLastNotOf</a> (const T *str, std::size_t pos) const </td></tr>
<tr class="separator:ae47fed6bacfdd1ca6923b6aaa5f8f61e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e304a4df2a7efae006b7044ded91849"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a4e304a4df2a7efae006b7044ded91849">findLastNotOf</a> (T value, std::size_t pos) const </td></tr>
<tr class="separator:a4e304a4df2a7efae006b7044ded91849"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace21e34dff89527e0e17355e0b6bfa24"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ace21e34dff89527e0e17355e0b6bfa24">operator[]</a> (std::size_t index)</td></tr>
<tr class="separator:ace21e34dff89527e0e17355e0b6bfa24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3902a5024a884655e6d759d8a9e5fdca"><td class="memItemLeft" align="right" valign="top">T const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a3902a5024a884655e6d759d8a9e5fdca">operator[]</a> (std::size_t index) const </td></tr>
<tr class="separator:a3902a5024a884655e6d759d8a9e5fdca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a6ad7eedb04b8fea0193e1d80275ba6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a2a6ad7eedb04b8fea0193e1d80275ba6">operator=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str)</td></tr>
<tr class="separator:a2a6ad7eedb04b8fea0193e1d80275ba6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ac20b4bf7b077d252e0983e1d73ce98"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a4ac20b4bf7b077d252e0983e1d73ce98">operator=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&amp;str)</td></tr>
<tr class="separator:a4ac20b4bf7b077d252e0983e1d73ce98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7f74d20e9be29852138c5141e76e97d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aa7f74d20e9be29852138c5141e76e97d">operator=</a> (const T *str)</td></tr>
<tr class="separator:aa7f74d20e9be29852138c5141e76e97d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84f17cee41ffe4e58eb371db8eb614cb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a84f17cee41ffe4e58eb371db8eb614cb">operator=</a> (T value)</td></tr>
<tr class="separator:a84f17cee41ffe4e58eb371db8eb614cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1da605ba807fd74d9936dc231974ee7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab1da605ba807fd74d9936dc231974ee7">operator=</a> (std::initializer_list&lt; T &gt; list)</td></tr>
<tr class="separator:ab1da605ba807fd74d9936dc231974ee7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4db6b5abd9d325e1a343e257b8799a2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab4db6b5abd9d325e1a343e257b8799a2">operator+=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str)</td></tr>
<tr class="separator:ab4db6b5abd9d325e1a343e257b8799a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a954159d735c0da5b5fc4cd5e0ec6e9cb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a954159d735c0da5b5fc4cd5e0ec6e9cb">operator+=</a> (T value)</td></tr>
<tr class="separator:a954159d735c0da5b5fc4cd5e0ec6e9cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc140e485a8a83de3f3c52496035231d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#adc140e485a8a83de3f3c52496035231d">operator+=</a> (const T *str)</td></tr>
<tr class="separator:adc140e485a8a83de3f3c52496035231d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2167114fbd1b521c9f18bd7515858a3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab2167114fbd1b521c9f18bd7515858a3">operator+=</a> (std::initializer_list&lt; T &gt; list)</td></tr>
<tr class="separator:ab2167114fbd1b521c9f18bd7515858a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2cf9e947bb8ed9a5deae560978c131be"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a2cf9e947bb8ed9a5deae560978c131be">operator==</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str) const </td></tr>
<tr class="separator:a2cf9e947bb8ed9a5deae560978c131be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afaef88927e530b9475ce143779b7f851"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#afaef88927e530b9475ce143779b7f851">operator!=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str) const </td></tr>
<tr class="separator:afaef88927e530b9475ce143779b7f851"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab06ee127d12a726f58c955365592fe3f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab06ee127d12a726f58c955365592fe3f">operator&lt;</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str) const </td></tr>
<tr class="separator:ab06ee127d12a726f58c955365592fe3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d68e5ffd1eac743a66f364e1e064536"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a7d68e5ffd1eac743a66f364e1e064536">operator&lt;=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str) const </td></tr>
<tr class="separator:a7d68e5ffd1eac743a66f364e1e064536"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa55fab1b4557936778147ed3450c0427"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aa55fab1b4557936778147ed3450c0427">operator&gt;</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str) const </td></tr>
<tr class="separator:aa55fab1b4557936778147ed3450c0427"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e216345ab62dd5997b65c21b333339f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a8e216345ab62dd5997b65c21b333339f">operator&gt;=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;str) const </td></tr>
<tr class="separator:a8e216345ab62dd5997b65c21b333339f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3869ddf5653784b3b5734572bbfd3159"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a3869ddf5653784b3b5734572bbfd3159">toString</a> () const </td></tr>
<tr class="separator:a3869ddf5653784b3b5734572bbfd3159"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c42d379cd90d3c8c02a0eeb31fd7482"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:a8c42d379cd90d3c8c02a0eeb31fd7482"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a8c42d379cd90d3c8c02a0eeb31fd7482">operator&lt;&lt;</a> (K const &amp;o)</td></tr>
<tr class="separator:a8c42d379cd90d3c8c02a0eeb31fd7482"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:a69e75ea27ac8b51a196c893d05c07a81"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a69e75ea27ac8b51a196c893d05c07a81"></a>
static constexpr std::size_t&#160;</td><td class="memItemRight" valign="bottom"><b>NOT_FOUND</b> = -1</td></tr>
<tr class="separator:a69e75ea27ac8b51a196c893d05c07a81"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;class T&gt;<br />
class NRE::Utility::BasicString&lt; T &gt;</h3>

<p>A basic template string, with dynamic size, guarantee to be in contiguous memory. </p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a class="anchor" id="a557d930ae5e01b60275a3b01a3a19f86"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef const T* <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Shortcut to hide ReverseIterator implementation </p>

</div>
</div>
<a class="anchor" id="a84fd549f39f627b1caf412fac4459597"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef T* <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a84fd549f39f627b1caf412fac4459597">Iterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>&lt; Shortcut to hide Iterator implementation Shortcut to hide ConstIterator implementation </p>

</div>
</div>
<a class="anchor" id="a6ed577da05148ce11444e7aaa61e8619"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef std::reverse_iterator&lt;T*&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6ed577da05148ce11444e7aaa61e8619">ReverseIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Shortcut to hide ConstReverseIterator implementation </p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a9a3f02658ae8cb4aefeaebfd72b92020"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct an empty string </p>

</div>
</div>
<a class="anchor" id="aafcdc42cb6c6c15740c2bc90f15b32b2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct a string filled with count copy of value </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the number of copy to perform, will be the string capacity and length </td></tr>
    <tr><td class="paramname">value</td><td>the value to fill the string with </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a22c30b99214255bb730c8672a3904866"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct a string with count element starting at pos from str </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>the start position </td></tr>
    <tr><td class="paramname">count</td><td>the number of element to take from str </td></tr>
    <tr><td class="paramname">str</td><td>the other string </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2b49cf0023848f6cbe9f954d46cf3ff5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct a string with count first element from str </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the number of element to take from str </td></tr>
    <tr><td class="paramname">str</td><td>the other string </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aee30c7d284a0db0c0620e1a6903ea302"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct a string filled with str element, str need to be terminated by a null character </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the other string </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6917a729f68384e412f0702a57da5abd"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class InputIterator &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> </td>
          <td>(</td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct a string filled with element between 2 iterators </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>the begin iterator </td></tr>
    <tr><td class="paramname">end</td><td>the end iterator, pointing after the last element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>begin and end are not iterator from the string </dd></dl>

</div>
</div>
<a class="anchor" id="a2c4f5cf3fea12096e51c6e5f55c35629"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; T &gt;&#160;</td>
          <td class="paramname"><em>init</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct a string from an initializer list </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">init</td><td>the list to fill the string with </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>list don't contain string reference </dd></dl>

</div>
</div>
<a class="anchor" id="a86b62ef1ead351c7cd9e8868d1bdf4fd"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy str into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to copy </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af2e21d830517beb02a3cb3a1310fcd9c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Move str into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to move </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4767aa21ed166bbcbba3346e20063c81"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::~<a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php" title="A basic template string, with dynamic size, guarantee to be in contiguous memory. ...">BasicString</a> Deconstructor </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a20fb2d291dad6b589ddc5089c50fea1d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::append </td>
          <td>(</td>
          <td class="paramtype">K const &amp;&#160;</td>
          <td class="paramname"><em>o</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append the object to string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">o</td><td>the object to append </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a79b367b1b7cc3c95851d67061e6e20f0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::append </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append the object to string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the object to append </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="ad6a5d675e0e9dac8ae9bb0de1810845e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::append </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append the object to string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the object to append </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a604e598bb4291331936837f03daa221f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::append </td>
          <td>(</td>
          <td class="paramtype">short int&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append the object to string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the object to append </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a07fc84ee065d04e1d120c6cf46b3d7bd"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::append </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append the object to string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the object to append </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="ac0ff6c2544d0a49345e56e6947239549"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::append </td>
          <td>(</td>
          <td class="paramtype">long int&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append the object to string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the object to append </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="ae6995eb183265766342d7e1aa7035b9b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::append </td>
          <td>(</td>
          <td class="paramtype">long long int&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append the object to string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the object to append </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a03aaef153454a9dc6eb4ffb2c3ec69c3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::append </td>
          <td>(</td>
          <td class="paramtype">unsigned short int&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append the object to string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the object to append </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="aee33d570595e1240c0b4f6326ffa2e30"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::append </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append the object to string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the object to append </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="addefc97d40ebfd0ea3b50f2a42373674"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::append </td>
          <td>(</td>
          <td class="paramtype">unsigned long int&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append the object to string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the object to append </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="ab682ac9c90b8b6a3d24a0468cb7b7502"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::append </td>
          <td>(</td>
          <td class="paramtype">unsigned long long int&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append the object to string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the object to append </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a9dcc848aefd7ea1b49cc02dea5c60f8b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::append </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append the object to string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the object to append </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a01113158a0457b8eca3aa01f4a68f19a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::append </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append the object to string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the object to append </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="aaa24090a62a4744d254b7c4f6711a169"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::append </td>
          <td>(</td>
          <td class="paramtype">long double&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append the object to string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the object to append </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a437b4bf3c704c5a9beaa82a78c425fbe"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::append </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append count copy of value at the end of the string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the number of copy </td></tr>
    <tr><td class="paramname">value</td><td>the value to append </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a17bd172896ff73d97cdb0cc612bb7e28"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::append </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append the given string at the end of the string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to append </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a3205fe9991c3b207853cf8be2c6d094e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::append </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append a part of the given string at the end of the string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to append </td></tr>
    <tr><td class="paramname">index</td><td>the index of the first character </td></tr>
    <tr><td class="paramname">count</td><td>the number of character to copy </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a2f94818d9322f516124b918c202d7ab4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::append </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append the count first character of the given string at the end </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to append </td></tr>
    <tr><td class="paramname">count</td><td>the number of character to take </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="ac3f8fdfea90fe2f7dfe5ba74da485b99"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::append </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append the given string at the end, the string need to be NULL terminated </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to append </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="aefcc5c42ddaddc5a4c63b4af9a54086b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::append </td>
          <td>(</td>
          <td class="paramtype">std::string const &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append the given string at the end </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to append </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="ac81947765f131eb41fd35c111edb165d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class InputIterator &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::append </td>
          <td>(</td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append all character between given iterators </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>the begin iterator </td></tr>
    <tr><td class="paramname">end</td><td>the end iterator </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a77dc49f9e04a64d0adce9bb8afe7daa2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::append </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; T &gt;&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append all character in the list </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>the initializer list </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a009f07466409c0f15528f63e273f0a5e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::assign </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Assign the string with count copy of value, starting from the beginning </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the number of copy </td></tr>
    <tr><td class="paramname">value</td><td>the copy to fill the string with </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference on himself </dd></dl>

</div>
</div>
<a class="anchor" id="ab04d419d62fa599e802084a8a33dcd54"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::assign </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Replace the string content with the given one </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the other string </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference on himself </dd></dl>

</div>
</div>
<a class="anchor" id="a23db49a6689502a918d487fddf14346d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::assign </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Replace the string content with count element starting at pos from str </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>the start position </td></tr>
    <tr><td class="paramname">count</td><td>the number of element to take from str </td></tr>
    <tr><td class="paramname">str</td><td>the other string </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference on himself </dd></dl>

</div>
</div>
<a class="anchor" id="a12b1678540e15327f9ebcabafd51afc1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::assign </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Replace the string content with the given one </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the other string </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference on himself </dd></dl>

</div>
</div>
<a class="anchor" id="a40ba4bea020e19d1835c3b64f5f7fb37"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::assign </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Replace the string content with count first element from str </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the number of element to take from str </td></tr>
    <tr><td class="paramname">str</td><td>the other string </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference on himself </dd></dl>

</div>
</div>
<a class="anchor" id="a89b70adb308a6301e29e97c5c3892e46"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::assign </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Replace the string content filled with str element, str need to be terminated by a null character </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the other string </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference on himself </dd></dl>

</div>
</div>
<a class="anchor" id="a8327bffba598171ede088d3b1fc16ace"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class InputIterator &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::assign </td>
          <td>(</td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Replace the string content with element between 2 iterators </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>the begin iterator </td></tr>
    <tr><td class="paramname">end</td><td>the end iterator, pointing after the last element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>begin and end are not iterator from the string </dd></dl>
<dl class="section return"><dt>Returns</dt><dd>the reference on himself </dd></dl>

</div>
</div>
<a class="anchor" id="a19e77dd1dcd1204e991a95cc62405812"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::assign </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; T &gt;&#160;</td>
          <td class="paramname"><em>init</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Replace the string content with content from an initializer list </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">init</td><td>the list to fill the string with </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>list don't contain string reference </dd></dl>
<dl class="section return"><dt>Returns</dt><dd>the reference on himself </dd></dl>

</div>
</div>
<a class="anchor" id="a87336e1c57b46a945b6edf733b0a926d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a84fd549f39f627b1caf412fac4459597">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>an iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a5bdd1cd2ef63b3fd7fd48e0e92e96d07"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a4fbaa10da05afb1e38f01550f089ec3b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::cbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="aa620f4b3a6a6e8783fdb343b919e0ef6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::cend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a6035700c6308e4161bfec5fee48730e0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Clear all object in the vector, not actually releasing memory </p>

</div>
</div>
<a class="anchor" id="ad41793193f7610c892d24bb650c272db"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::compare </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compare the given string to this, by first comparing size then memory </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to compare with this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>&lt;0 if this is lesser than str, &gt;0 if this is greater than str, 0 if equals </dd></dl>

</div>
</div>
<a class="anchor" id="a5be5efba3e60692f0b7d68a81251b967"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::compare </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>tPos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>tCount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compare the given string to a part of this, by first comparing size then memory </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tPos</td><td>the first character of this </td></tr>
    <tr><td class="paramname">tCount</td><td>the number of character from this </td></tr>
    <tr><td class="paramname">str</td><td>the string to compare with this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>&lt;0 if this is lesser than str, &gt;0 if this is greater than str, 0 if equals </dd></dl>

</div>
</div>
<a class="anchor" id="a3c26227c3a27b11bf07be636cc004c6f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::compare </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>tPos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>tCount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>sPos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>sCount</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compare a part of the given string to a part of this, by first comparing size then memory </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tPos</td><td>the first character of this </td></tr>
    <tr><td class="paramname">tCount</td><td>the number of character from this </td></tr>
    <tr><td class="paramname">str</td><td>the string to compare with this </td></tr>
    <tr><td class="paramname">sPos</td><td>the first character of str </td></tr>
    <tr><td class="paramname">sCount</td><td>the number of character from str </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>&lt;0 if this is lesser than str, &gt;0 if this is greater than str, 0 if equals </dd></dl>

</div>
</div>
<a class="anchor" id="ad141c8c93180d61ac18f9da85ff6a62d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::compare </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compare the given NULL terminated string to this, by first comparing size then memory </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to compare with this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>&lt;0 if this is lesser than str, &gt;0 if this is greater than str, 0 if equals </dd></dl>

</div>
</div>
<a class="anchor" id="a65cf63fe6927e45827cb486bd4fc69d1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::compare </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>tPos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>tCount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compare the given NULL terminated string to a part of this, by first comparing size then memory </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tPos</td><td>the first character of this </td></tr>
    <tr><td class="paramname">tCount</td><td>the number of character from this </td></tr>
    <tr><td class="paramname">str</td><td>the string to compare with this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>&lt;0 if this is lesser than str, &gt;0 if this is greater than str, 0 if equals </dd></dl>

</div>
</div>
<a class="anchor" id="a17385a3e70dec404d8c58eaeaaa0a4b1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::compare </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>tPos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>tCount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>sPos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>sCount</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compare a part of the given NULL terminated string to a part of this, by first comparing size then memory </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tPos</td><td>the first character of this </td></tr>
    <tr><td class="paramname">tCount</td><td>the number of character from this </td></tr>
    <tr><td class="paramname">str</td><td>the string to compare with this </td></tr>
    <tr><td class="paramname">sPos</td><td>the first character of str </td></tr>
    <tr><td class="paramname">sCount</td><td>the number of character from str </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>&lt;0 if this is lesser than str, &gt;0 if this is greater than str, 0 if equals </dd></dl>

</div>
</div>
<a class="anchor" id="a9cd15fa3754a286297b35ea3946db3b2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::contains </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Test if the string contains the given string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to test </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if the string is contained </dd></dl>

</div>
</div>
<a class="anchor" id="ae34bc09210c179fad41babad1f94cc01"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::contains </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Test if the string contains the given string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to test </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if the string is contained </dd></dl>

</div>
</div>
<a class="anchor" id="a1db70d8010b41e9d5d2f773cce692359"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::copy </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy the given range into the given string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to copy in </td></tr>
    <tr><td class="paramname">pos</td><td>the start index </td></tr>
    <tr><td class="paramname">count</td><td>the number of character to copy </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the number of copied character </dd></dl>

</div>
</div>
<a class="anchor" id="a50d7fda113a402d7e7b18669aa7ea227"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">ConstReverseIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::crbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const reverse iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="ae487050caf2434abc9b16bfab7241eba"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">ConstReverseIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::crend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const reverse iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a40d0473b2964f19ba6f4a98696cc91b2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a84fd549f39f627b1caf412fac4459597">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>an iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="add891802026c21f0982402995b25fe43"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a477dbc8a44874807dd41a2d8b91ec14b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::endsWith </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Check if the string ends with the given one </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the suffix to check </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if the string ends with the suffix </dd></dl>

</div>
</div>
<a class="anchor" id="a4fee0d4f5bbc6235754f14b99fbaa60a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::endsWith </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Check if the string ends with the given character </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the suffix to check </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if the string ends with the suffix </dd></dl>

</div>
</div>
<a class="anchor" id="ada05264b34bafd8bd7d76979852520a6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::endsWith </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Check if the string ends with the given one, need to be NULL terminated </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the suffix to check </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if the string ends with the suffix </dd></dl>

</div>
</div>
<a class="anchor" id="a8b2e04417a714f974453663ba7ffb6ef"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::erase </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase count character starting by index </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the start index </td></tr>
    <tr><td class="paramname">count</td><td>the number of character to erase </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference on himself </dd></dl>

</div>
</div>
<a class="anchor" id="a1bf88394c90dcdead82d565616b57c1f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a84fd549f39f627b1caf412fac4459597">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>position</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase the character at the given position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">position</td><td>the position to erase </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator after the erased value </dd></dl>

</div>
</div>
<a class="anchor" id="aefa48bb2f2b634ef7661880d2757d3e4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a84fd549f39f627b1caf412fac4459597">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase character between 2 iterators </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>the start position </td></tr>
    <tr><td class="paramname">end</td><td>the end position </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator after the erased value </dd></dl>

</div>
</div>
<a class="anchor" id="a173b725cf3bfbbcf401cdf2a44b16609"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::find </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Search the first occurrence of the given string, start the search at the given position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to search </td></tr>
    <tr><td class="paramname">pos</td><td>the search start </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the position of the found string, NOT_FOUND if no occurrence found </dd></dl>

</div>
</div>
<a class="anchor" id="a4180e49b43fad06984367dbe35401ddc"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::find </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Search the first occurrence of the given string part, start the search at the given position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the max range in the given string </td></tr>
    <tr><td class="paramname">str</td><td>the string to search </td></tr>
    <tr><td class="paramname">pos</td><td>the search start </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the position of the found string, NOT_FOUND if no occurrence found </dd></dl>

</div>
</div>
<a class="anchor" id="aaf14ff35915cf394e6935c174d199bce"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::find </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Search the first occurrence of the given string, need to be NULL terminated, start the search at the given position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to search </td></tr>
    <tr><td class="paramname">pos</td><td>the search start </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the position of the found string, NOT_FOUND if no occurrence found </dd></dl>

</div>
</div>
<a class="anchor" id="a43968a1e6f05fef1ec959f37d2e2739d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::find </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Search the first occurrence of the given character, start the search at the given position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the character to search </td></tr>
    <tr><td class="paramname">pos</td><td>the search start </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the position of the found character, NOT_FOUND if no occurrence found </dd></dl>

</div>
</div>
<a class="anchor" id="a5479bebe9d7dbde8be07e476935468b2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::findFirstNotOf </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Search the first character that match no character in the given string, start the search at the given position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to search </td></tr>
    <tr><td class="paramname">pos</td><td>the search start </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the position of the found string, NOT_FOUND if no occurrence found </dd></dl>

</div>
</div>
<a class="anchor" id="affa05c2f41e2ef8936ae1f71994cd61b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::findFirstNotOf </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Search the first character that match no character in the given string part, start the search at the given position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the max range in the given string </td></tr>
    <tr><td class="paramname">str</td><td>the string to search </td></tr>
    <tr><td class="paramname">pos</td><td>the search start </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the position of the found string, NOT_FOUND if no occurrence found </dd></dl>

</div>
</div>
<a class="anchor" id="a007fdab8cb51260e5b6e0b303fbbb516"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::findFirstNotOf </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Search the first character that match no character in the given string, need to be NULL terminated, start the search at the given position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to search </td></tr>
    <tr><td class="paramname">pos</td><td>the search start </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the position of the found string, NOT_FOUND if no occurrence found </dd></dl>

</div>
</div>
<a class="anchor" id="ad5e703c7653f2f32425a6ff6581a6a14"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::findFirstNotOf </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Search the first character that doesn't match with the given character, start the search at the given position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the character to search </td></tr>
    <tr><td class="paramname">pos</td><td>the search start </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the position of the found character, NOT_FOUND if no occurrence found </dd></dl>

</div>
</div>
<a class="anchor" id="a364d9113d5f5ffe468e2abc0843c1b3b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::findFirstOf </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Search the first character that match a character in the given string, start the search at the given position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to search </td></tr>
    <tr><td class="paramname">pos</td><td>the search start </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the position of the found string, NOT_FOUND if no occurrence found </dd></dl>

</div>
</div>
<a class="anchor" id="a93323a167408c3a44cb52770197ade74"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::findFirstOf </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Search the first character that match a character in the given string part, start the search at the given position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the max range in the given string </td></tr>
    <tr><td class="paramname">str</td><td>the string to search </td></tr>
    <tr><td class="paramname">pos</td><td>the search start </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the position of the found string, NOT_FOUND if no occurrence found </dd></dl>

</div>
</div>
<a class="anchor" id="a9a0e4d4f7295afb0038e7d8c5c7fa267"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::findFirstOf </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Search the first character that match a character in the given string, need to be NULL terminated, start the search at the given position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to search </td></tr>
    <tr><td class="paramname">pos</td><td>the search start </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the position of the found string, NOT_FOUND if no occurrence found </dd></dl>

</div>
</div>
<a class="anchor" id="aff39311e04d9bab37d8f9e1123c05354"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::findFirstOf </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Search the first character that match the given character, start the search at the given position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the character to search </td></tr>
    <tr><td class="paramname">pos</td><td>the search start </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the position of the found character, NOT_FOUND if no occurrence found </dd></dl>

</div>
</div>
<a class="anchor" id="afe13e8614d8f30631ee893758c69275f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::findLastNotOf </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Search the first character that match no character in the given string, start the search at the given position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to search </td></tr>
    <tr><td class="paramname">pos</td><td>the search start </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the position of the found string, NOT_FOUND if no occurrence found </dd></dl>

</div>
</div>
<a class="anchor" id="a7c46c66eadeae49916dc2e54fd302eb6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::findLastNotOf </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Search the first character that match no character in the given string part, start the search at the given position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the max range in the given string </td></tr>
    <tr><td class="paramname">str</td><td>the string to search </td></tr>
    <tr><td class="paramname">pos</td><td>the search start </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the position of the found string, NOT_FOUND if no occurrence found </dd></dl>

</div>
</div>
<a class="anchor" id="ae47fed6bacfdd1ca6923b6aaa5f8f61e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::findLastNotOf </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Search the first character that match no character in the given string, need to be NULL terminated, start the search at the given position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to search </td></tr>
    <tr><td class="paramname">pos</td><td>the search start </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the position of the found string, NOT_FOUND if no occurrence found </dd></dl>

</div>
</div>
<a class="anchor" id="a4e304a4df2a7efae006b7044ded91849"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::findLastNotOf </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Search the first character that doesn't match with the given character, start the search at the given position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the character to search </td></tr>
    <tr><td class="paramname">pos</td><td>the search start </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the position of the found character, NOT_FOUND if no occurrence found </dd></dl>

</div>
</div>
<a class="anchor" id="a7ee2c392596a64a276edf3d90b3dc01a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::findLastOf </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Search the first character that match a character in the given string, start the search at the given position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to search </td></tr>
    <tr><td class="paramname">pos</td><td>the search start </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the position of the found string, NOT_FOUND if no occurrence found </dd></dl>

</div>
</div>
<a class="anchor" id="acf6b9c73f1b26b414b7366de5b4a6cd4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::findLastOf </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Search the first character that match a character in the given string part, start the search at the given position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the max range in the given string </td></tr>
    <tr><td class="paramname">str</td><td>the string to search </td></tr>
    <tr><td class="paramname">pos</td><td>the search start </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the position of the found string, NOT_FOUND if no occurrence found </dd></dl>

</div>
</div>
<a class="anchor" id="ac54629878f6a29de68c35b89fd860bd2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::findLastOf </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Search the first character that match a character in the given string, need to be NULL terminated, start the search at the given position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to search </td></tr>
    <tr><td class="paramname">pos</td><td>the search start </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the position of the found string, NOT_FOUND if no occurrence found </dd></dl>

</div>
</div>
<a class="anchor" id="aef0f9908b934f09ab7e94c9f0471fe46"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::findLastOf </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Search the first character that match the given character, start the search at the given position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the character to search </td></tr>
    <tr><td class="paramname">pos</td><td>the search start </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the position of the found character, NOT_FOUND if no occurrence found </dd></dl>

</div>
</div>
<a class="anchor" id="a1ee35a3d0dc9aaa82ef5d1f2161adb1b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::get </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element with bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the element index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="a38195baf7bd0232759d4a8f144684a1e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T const&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::get </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element with bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the element index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="a328ebd77a8bbb49a6776fefd417ebf4a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::getCapacity </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the string capacity </dd></dl>

</div>
</div>
<a class="anchor" id="a0077ab896a00c0aa6e785fffb2b417d5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const T* <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::getCData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the internal data array </dd></dl>

</div>
</div>
<a class="anchor" id="aa168f5bdce940de92d3f5c39e8159759"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const T* <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::getData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the internal data array </dd></dl>

</div>
</div>
<a class="anchor" id="ab3e4c324e16594a98292ff51b0b00267"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::getFront </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a09ef555d16d12a3c42d31cf7eefbf5a7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T const&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::getFront </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a5e466d36e361dc572931d21896c527cd"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::getLast </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the last element </dd></dl>

</div>
</div>
<a class="anchor" id="aed8592590a7a0097dc9cf28f6101799c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T const&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::getLast </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the last element </dd></dl>

</div>
</div>
<a class="anchor" id="a6ed01f192a9c748153b095d56da2796a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::getLength </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the string effective size </dd></dl>

</div>
</div>
<a class="anchor" id="a649e9db31cfa007fcb42d3a72b67284c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::getMaxSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the maximum array size </dd></dl>

</div>
</div>
<a class="anchor" id="a446670e0a8bf0b49e2c4dde3d7e68542"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::getSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the string effective size </dd></dl>

</div>
</div>
<a class="anchor" id="a408cb985f4efc28bc4a77b672ad65cf0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::insert </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert count copy of value at the specified position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the position to insert values </td></tr>
    <tr><td class="paramname">count</td><td>the number of copy </td></tr>
    <tr><td class="paramname">value</td><td>the value to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference on himself </dd></dl>

</div>
</div>
<a class="anchor" id="a698ce5fcbcb0c124a6411c426eeef386"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::insert </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert str elements, str need to be NULL terminated </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the position to insert values </td></tr>
    <tr><td class="paramname">str</td><td>the other string </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference on himself </dd></dl>

</div>
</div>
<a class="anchor" id="a556f4cdfea29a0430cf37f33873a16f5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::insert </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert str elements </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the position to insert values </td></tr>
    <tr><td class="paramname">count</td><td>the number of element to take from str </td></tr>
    <tr><td class="paramname">str</td><td>the other string </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference on himself </dd></dl>

</div>
</div>
<a class="anchor" id="a2c7336f4719ec36b9fdc8277aebccc99"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::insert </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert a string at the specified position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the position to insert values </td></tr>
    <tr><td class="paramname">str</td><td>the string to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference on himself </dd></dl>

</div>
</div>
<a class="anchor" id="a019fce3826f9d7d1cadbdfd133b715a3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::insert </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert a string part at the specified position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the position to insert values </td></tr>
    <tr><td class="paramname">str</td><td>the string to insert </td></tr>
    <tr><td class="paramname">index</td><td>the start index in the string </td></tr>
    <tr><td class="paramname">count</td><td>the number of character to take from the string </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference on himself </dd></dl>

</div>
</div>
<a class="anchor" id="a2507a9cb1f068ad86aa82d0b61ed9ebe"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a84fd549f39f627b1caf412fac4459597">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert the character at the specified position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the position to insert values </td></tr>
    <tr><td class="paramname">value</td><td>the value to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the first inserted value </dd></dl>

</div>
</div>
<a class="anchor" id="aa4cc21bcc8a8d686a8a02d1ede47afd4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a84fd549f39f627b1caf412fac4459597">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert count copy of the character at the specified position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the position to insert values </td></tr>
    <tr><td class="paramname">count</td><td>the number of copy </td></tr>
    <tr><td class="paramname">value</td><td>the value to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the first inserted value </dd></dl>

</div>
</div>
<a class="anchor" id="a13757cedd43c3f03ab141f9f77a131c9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class InputIterator &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a84fd549f39f627b1caf412fac4459597">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert a copy of element between begin and end at the specified position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the position to insert values </td></tr>
    <tr><td class="paramname">begin</td><td>the begin iterator </td></tr>
    <tr><td class="paramname">end</td><td>the end iterator, pointing after the last element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the first inserted value </dd></dl>
<dl class="section pre"><dt>Precondition</dt><dd>begin and end are not iterator from the string </dd></dl>

</div>
</div>
<a class="anchor" id="ae0898bf3a5f72eb5bf6ca3e59de50957"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a84fd549f39f627b1caf412fac4459597">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::initializer_list&lt; T &gt;&#160;</td>
          <td class="paramname"><em>list</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert a list of value at the specified position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the position to insert values </td></tr>
    <tr><td class="paramname">list</td><td>the list to fill the vector with </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the first inserted value </dd></dl>
<dl class="section pre"><dt>Precondition</dt><dd>list don't contain string reference </dd></dl>

</div>
</div>
<a class="anchor" id="a20203ddad7a07bb0bdfb23260d7585f2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::isEmpty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>if the array is empty </dd></dl>

</div>
</div>
<a class="anchor" id="afaef88927e530b9475ce143779b7f851"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::operator!= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Inequality test between this and str </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the other string to compare with this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<a class="anchor" id="ab4db6b5abd9d325e1a343e257b8799a2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::operator+= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append the given string to this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to append </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a954159d735c0da5b5fc4cd5e0ec6e9cb"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::operator+= </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append the given character to this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the character to append </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="adc140e485a8a83de3f3c52496035231d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::operator+= </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append the given string to this, the string need to be NULL terminated </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to append </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="ab2167114fbd1b521c9f18bd7515858a3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::operator+= </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; T &gt;&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append the given character list to this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>the list to append </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="ab06ee127d12a726f58c955365592fe3f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::operator&lt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Inferiority test between this and str </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the other string to compare with this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<a class="anchor" id="a8c42d379cd90d3c8c02a0eeb31fd7482"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">K const &amp;&#160;</td>
          <td class="paramname"><em>o</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Output stream operator for object </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">o</td><td>the object to add in the string </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a7d68e5ffd1eac743a66f364e1e064536"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::operator&lt;= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Inferior or Equal test between this and str </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the other string to compare with this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<a class="anchor" id="a2a6ad7eedb04b8fea0193e1d80275ba6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy str into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to copy into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a4ac20b4bf7b077d252e0983e1d73ce98"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Move str into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to move into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="aa7f74d20e9be29852138c5141e76e97d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy str into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to copy into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a84f17cee41ffe4e58eb371db8eb614cb"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy value into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the character to copy into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="ab1da605ba807fd74d9936dc231974ee7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; T &gt;&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy list elements into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>the list of character to copy into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a2cf9e947bb8ed9a5deae560978c131be"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Equality test between this and str </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the other string to compare with this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<a class="anchor" id="aa55fab1b4557936778147ed3450c0427"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::operator&gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Superiority test between this and str </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the other string to compare with this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<a class="anchor" id="a8e216345ab62dd5997b65c21b333339f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::operator&gt;= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Superior or Equal or Equal test between this and str </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the other string to compare with this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<a class="anchor" id="ace21e34dff89527e0e17355e0b6bfa24"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element without bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the element index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="a3902a5024a884655e6d759d8a9e5fdca"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T const&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element without bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the element index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="a51b3da7e0493d6fd6a870629dabc871a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::popBack </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Pop back the last character </p>

</div>
</div>
<a class="anchor" id="a1fc5c8410a87b1802e3b006a7177569c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::pushBack </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert a character at the end of the string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the value to insert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a295b7f396e515c30e490d0d8a10b7e30"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6ed577da05148ce11444e7aaa61e8619">ReverseIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::rbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a reverse iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a428f523963a236e6e9b165f01e1ecd8c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">ConstReverseIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::rbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const reverse iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a009469819f09df8cafa2dce131d19cb2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6ed577da05148ce11444e7aaa61e8619">ReverseIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::rend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a reverse iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a579ac9b5d39c1e924c1a2ff45d59d68f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">ConstReverseIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::rend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const reverse iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="ac196e1a45da4c10b3cea7ac859704c66"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::replace </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Replace the given part by the given string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>the start position to replace </td></tr>
    <tr><td class="paramname">count</td><td>the number of character to replace </td></tr>
    <tr><td class="paramname">str</td><td>the replacement string </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a4dc5a2b396270298682358aa7667ce69"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::replace </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Replace the given part by the given string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the start position to replace </td></tr>
    <tr><td class="paramname">end</td><td>the end range </td></tr>
    <tr><td class="paramname">str</td><td>the replacement string </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a3a1833c4bc94071b2884d15dc01b8bf1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::replace </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>tPos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>tCount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>sPos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>sCount</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Replace the given part by a part of the given string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tPos</td><td>the start position to replace </td></tr>
    <tr><td class="paramname">tCount</td><td>the number of character to replace </td></tr>
    <tr><td class="paramname">str</td><td>the replacement string </td></tr>
    <tr><td class="paramname">sPos</td><td>the start position in the replacement string </td></tr>
    <tr><td class="paramname">sCount</td><td>the number of character in the replacement string </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a15a6b724fd6dd01df42db1c70404722d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class InputIterator &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::replace </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>tStart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>tEnd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>sStart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>sEnd</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Replace the given part by a part of the given string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">tStart</td><td>the start position to replace </td></tr>
    <tr><td class="paramname">tEnd</td><td>the end range </td></tr>
    <tr><td class="paramname">str</td><td>the replacement string </td></tr>
    <tr><td class="paramname">sStart</td><td>the start position in the replacement string </td></tr>
    <tr><td class="paramname">sEnd</td><td>the end range in the replacement string </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a6babb3a40ac571290391347dcfeb1182"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::replace </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>tCount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>sCount</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Replace the given part by the given string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>the start position to replace </td></tr>
    <tr><td class="paramname">tCount</td><td>the number of character to replace </td></tr>
    <tr><td class="paramname">str</td><td>the replacement string </td></tr>
    <tr><td class="paramname">sCount</td><td>the number of character in the replacement string </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a7d78b95be2f40cb6fbbf41c2246c941c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::replace </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>sCount</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Replace the given part by the given string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the start position to replace </td></tr>
    <tr><td class="paramname">end</td><td>the end range </td></tr>
    <tr><td class="paramname">str</td><td>the replacement string </td></tr>
    <tr><td class="paramname">sCount</td><td>the number of character in the replacement string </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a809f6cddf662a64fb73c416e1157ec2f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::replace </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Replace the given part by the given string, need to be NULL terminated </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>the start position to replace </td></tr>
    <tr><td class="paramname">count</td><td>the number of character to replace </td></tr>
    <tr><td class="paramname">str</td><td>the replacement string </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="ab762acab3ed28387534fec5e78c5d87b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::replace </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Replace the given part by the given string, need to be NULL terminated </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the start position to replace </td></tr>
    <tr><td class="paramname">end</td><td>the end range </td></tr>
    <tr><td class="paramname">str</td><td>the replacement string </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a0a9e9a68ae0d503083faa6d3c6b71001"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::replace </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>tCount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>sCount</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Replace the given part by sCount copy of the given character </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>the start position to replace </td></tr>
    <tr><td class="paramname">tCount</td><td>the number of character to replace </td></tr>
    <tr><td class="paramname">value</td><td>the character to copy </td></tr>
    <tr><td class="paramname">sCount</td><td>the number of copy </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a0e783583a07979d7967e7d01a55e0d18"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::replace </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>sCount</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Replace the given part by sCount copy of the given character </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the start position to replace </td></tr>
    <tr><td class="paramname">end</td><td>the end range </td></tr>
    <tr><td class="paramname">value</td><td>the character to copy </td></tr>
    <tr><td class="paramname">sCount</td><td>the number of copy </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a209163aab69f8989c05ef621ed3cd8c2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::replace </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::initializer_list&lt; T &gt;&#160;</td>
          <td class="paramname"><em>list</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Replace the given part by the given character list </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the start position to replace </td></tr>
    <tr><td class="paramname">end</td><td>the end range </td></tr>
    <tr><td class="paramname">list</td><td>the character list </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a21efaef50166a748a6a26db815cfeef5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::reserve </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set the string capacity to a minimum of size, reallocating memory if needed </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">size</td><td>the new capacity </td></tr>
  </table>
  </dd>
</dl>
<dl class="section warning"><dt>Warning</dt><dd>size value is not checked against <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a649e9db31cfa007fcb42d3a72b67284c">getMaxSize()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a828b20842d0d6de3e052f51e83f8dcec"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::resize </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Resize the string up the given size, insert value if needed </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the new capacity </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aea55af05648a6ff2a5e93cd2cf95c591"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::resize </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Resize the string up the given size, insert value if needed </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the new capacity </td></tr>
    <tr><td class="paramname">value</td><td>the value used when inserting </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a043d8789a2fcc13972175e55cb0ae9c0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::reverse </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Reverse the whole string </p>

</div>
</div>
<a class="anchor" id="adc0af8aedbfa789a79f0ae92d9a2898a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::reverse </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Reverse a part of the string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>the start for the reverse </td></tr>
    <tr><td class="paramname">count</td><td>the number of character to reverse </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae6b6578b24ac6d25bab6829a0ca445da"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::rfind </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Search the first occurrence of the given string, start the search at the given position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to search </td></tr>
    <tr><td class="paramname">pos</td><td>the search start </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the position of the found string, NOT_FOUND if no occurrence found </dd></dl>

</div>
</div>
<a class="anchor" id="ab444c88955b7061381c05d2a77a04c18"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::rfind </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Search the first occurrence of the given string part, start the search at the given position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the max range in the given string </td></tr>
    <tr><td class="paramname">str</td><td>the string to search </td></tr>
    <tr><td class="paramname">pos</td><td>the search start </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the position of the found string, NOT_FOUND if no occurrence found </dd></dl>

</div>
</div>
<a class="anchor" id="a6c0488ba233f682afc89b592e3c49657"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::rfind </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Search the first occurrence of the given string, need to be NULL terminated, start the search at the given position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the string to search </td></tr>
    <tr><td class="paramname">pos</td><td>the search start </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the position of the found string, NOT_FOUND if no occurrence found </dd></dl>

</div>
</div>
<a class="anchor" id="a51fcbc02f5c2c0db76f4bc164854a1df"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::rfind </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Search the first occurrence of the given character, start the search at the given position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the character to search </td></tr>
    <tr><td class="paramname">pos</td><td>the search start </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the position of the found character, NOT_FOUND if no occurrence found </dd></dl>

</div>
</div>
<a class="anchor" id="afe91c26205f7c7f70d2a3edfb242fb88"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::shrinkToFit </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Shrink to fit the actual size, actually freeing memory </p>

</div>
</div>
<a class="anchor" id="a047e6ea23a748f1001aab1c7e913171a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::startsWith </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Check if the string starts with the given one </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the prefix to check </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if the string starts with the prefix </dd></dl>

</div>
</div>
<a class="anchor" id="a0ca87fa6562bfd1a1342978d0dfbd60b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::startsWith </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Check if the string starts with the given character </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the prefix to check </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if the string starts with the prefix </dd></dl>

</div>
</div>
<a class="anchor" id="a8f2456c9acbacc6c2b8692324aba86af"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::startsWith </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Check if the string starts with the given one, need to be NULL terminated </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the prefix to check </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if the string starts with the prefix </dd></dl>

</div>
</div>
<a class="anchor" id="a0639e5b3e9ecf3f6fc07a0c13347266b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::substr </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>pos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Create a copy of the given range </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>the start index </td></tr>
    <tr><td class="paramname">count</td><td>the number of character to copy </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the sub string </dd></dl>

</div>
</div>
<a class="anchor" id="a6c5b14da8a367e0cb88268194e721ce0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Swap the string with an other string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>the other string </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a3869ddf5653784b3b5734572bbfd3159"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> const&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a>&lt; T &gt;::toString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Convert the object into a string representation </p><dl class="section return"><dt>Returns</dt><dd>the converted object </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/mnt/c/Users/abell/Documents/GitHub/NRE-Utility/src/Utility/String/<a class="el" href="_n_r_e___string_8hpp_source.php">NRE_String.hpp</a></li>
</ul>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.8-->
<!-- start footer part -->
</div>
</div>
</div>
</div>
</div>
</div>
</body>
</html>
