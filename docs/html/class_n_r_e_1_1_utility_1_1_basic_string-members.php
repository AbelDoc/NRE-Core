<!-- HTML header for doxygen 1.8.8-->
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <!-- For Mobile Devices -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
        <meta name="generator" content="Doxygen 1.8.11"/>
        <script type="text/javascript" src="../../js/jquery-2.1.1.min.js"></script>
        <title>NRE-Utility: Member List</title>
        <!--<link href="tabs.css" rel="stylesheet" type="text/css"/>-->
        <script type="text/javascript" src="dynsections.js"></script>
        <link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <link href='https://fonts.googleapis.com/css?family=Roboto+Slab' rel='stylesheet' type='text/css'>
        <?php
            include '../../php/navigation.php';
            if (!isset($_COOKIE["theme"]) || $_COOKIE["theme"] == "dark") {
                echo '<link href="../../css/dark/bootstrap.css" rel="stylesheet">';
            } else {
                echo '<link href="../../css/light/bootstrap.css" rel="stylesheet">';
            }
        ?>
        <script src="../../js/bootstrap.min.js"></script>
        <script type="text/javascript" src="doxy-boot.js"></script>
    </head>
    <body>
        <div class="container-fluid">
            <header class="page-header">
                <a href="../../../index.php">
                    <img src="../../img/Logo.png" class="logo img-responsive"/>
                </a>
            </header>
            <?php addNavigationBarInl(false); ?>
            <div id="top" class="row"><!-- do not remove this div, it is closed by doxygen! -->
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-body">
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespace_n_r_e.php">NRE</a></li><li class="navelem"><b>Utility</b></li><li class="navelem"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">NRE::Utility::BasicString&lt; T &gt; Member List</div>  </div>
</div><!--header-->
<div class="contents">

<p>This is the complete list of members for <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a>, including all inherited members.</p>
<table class="directory">
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20fb2d291dad6b589ddc5089c50fea1d">append</a>(K const &amp;o)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a79b367b1b7cc3c95851d67061e6e20f0">append</a>(bool value)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ad6a5d675e0e9dac8ae9bb0de1810845e">append</a>(T value)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a604e598bb4291331936837f03daa221f">append</a>(short int value)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a07fc84ee065d04e1d120c6cf46b3d7bd">append</a>(int value)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ac0ff6c2544d0a49345e56e6947239549">append</a>(long int value)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ae6995eb183265766342d7e1aa7035b9b">append</a>(long long int value)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a03aaef153454a9dc6eb4ffb2c3ec69c3">append</a>(unsigned short int value)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aee33d570595e1240c0b4f6326ffa2e30">append</a>(unsigned int value)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#addefc97d40ebfd0ea3b50f2a42373674">append</a>(unsigned long int value)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab682ac9c90b8b6a3d24a0468cb7b7502">append</a>(unsigned long long int value)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a9dcc848aefd7ea1b49cc02dea5c60f8b">append</a>(float value)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a01113158a0457b8eca3aa01f4a68f19a">append</a>(double value)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aaa24090a62a4744d254b7c4f6711a169">append</a>(long double value)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a437b4bf3c704c5a9beaa82a78c425fbe">append</a>(std::size_t count, T value)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a17bd172896ff73d97cdb0cc612bb7e28">append</a>(BasicString const &amp;str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a3205fe9991c3b207853cf8be2c6d094e">append</a>(BasicString const &amp;str, std::size_t index, std::size_t count)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a2f94818d9322f516124b918c202d7ab4">append</a>(const T *str, std::size_t count)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ac3f8fdfea90fe2f7dfe5ba74da485b99">append</a>(const T *str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aefcc5c42ddaddc5a4c63b4af9a54086b">append</a>(std::string const &amp;str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ac81947765f131eb41fd35c111edb165d">append</a>(InputIterator begin, InputIterator end)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a77dc49f9e04a64d0adce9bb8afe7daa2">append</a>(std::initializer_list&lt; T &gt; list)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a009f07466409c0f15528f63e273f0a5e">assign</a>(std::size_t count, T value)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab04d419d62fa599e802084a8a33dcd54">assign</a>(BasicString const &amp;str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a23db49a6689502a918d487fddf14346d">assign</a>(std::size_t pos, std::size_t count, BasicString const &amp;str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a12b1678540e15327f9ebcabafd51afc1">assign</a>(BasicString &amp;&amp;str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40ba4bea020e19d1835c3b64f5f7fb37">assign</a>(std::size_t count, const T *str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a89b70adb308a6301e29e97c5c3892e46">assign</a>(const T *str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a8327bffba598171ede088d3b1fc16ace">assign</a>(InputIterator begin, InputIterator end)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a19e77dd1dcd1204e991a95cc62405812">assign</a>(std::initializer_list&lt; T &gt; init)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a9a3f02658ae8cb4aefeaebfd72b92020">BasicString</a>()</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aafcdc42cb6c6c15740c2bc90f15b32b2">BasicString</a>(std::size_t count, T value)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a22c30b99214255bb730c8672a3904866">BasicString</a>(std::size_t pos, std::size_t count, BasicString const &amp;str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a2b49cf0023848f6cbe9f954d46cf3ff5">BasicString</a>(std::size_t count, const T *str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aee30c7d284a0db0c0620e1a6903ea302">BasicString</a>(const T *str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6917a729f68384e412f0702a57da5abd">BasicString</a>(InputIterator begin, InputIterator end)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a2c4f5cf3fea12096e51c6e5f55c35629">BasicString</a>(std::initializer_list&lt; T &gt; init)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a86b62ef1ead351c7cd9e8868d1bdf4fd">BasicString</a>(BasicString const &amp;str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#af2e21d830517beb02a3cb3a1310fcd9c">BasicString</a>(BasicString &amp;&amp;str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a87336e1c57b46a945b6edf733b0a926d">begin</a>()</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a5bdd1cd2ef63b3fd7fd48e0e92e96d07">begin</a>() const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a4fbaa10da05afb1e38f01550f089ec3b">cbegin</a>() const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aa620f4b3a6a6e8783fdb343b919e0ef6">cend</a>() const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6035700c6308e4161bfec5fee48730e0">clear</a>()</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ad41793193f7610c892d24bb650c272db">compare</a>(BasicString const &amp;str) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a5be5efba3e60692f0b7d68a81251b967">compare</a>(std::size_t tPos, std::size_t tCount, BasicString const &amp;str) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a3c26227c3a27b11bf07be636cc004c6f">compare</a>(std::size_t tPos, std::size_t tCount, BasicString const &amp;str, std::size_t sPos, std::size_t sCount) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ad141c8c93180d61ac18f9da85ff6a62d">compare</a>(const T *str) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a65cf63fe6927e45827cb486bd4fc69d1">compare</a>(std::size_t tPos, std::size_t tCount, const T *str) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a17385a3e70dec404d8c58eaeaaa0a4b1">compare</a>(std::size_t tPos, std::size_t tCount, const T *str, std::size_t sPos, std::size_t sCount) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a> typedef</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>ConstReverseIterator</b> typedef (defined in <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a>)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a9cd15fa3754a286297b35ea3946db3b2">contains</a>(const T *str) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ae34bc09210c179fad41babad1f94cc01">contains</a>(BasicString const &amp;str) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a1db70d8010b41e9d5d2f773cce692359">copy</a>(T *str, std::size_t pos, std::size_t count) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a50d7fda113a402d7e7b18669aa7ea227">crbegin</a>() const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ae487050caf2434abc9b16bfab7241eba">crend</a>() const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40d0473b2964f19ba6f4a98696cc91b2">end</a>()</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#add891802026c21f0982402995b25fe43">end</a>() const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a477dbc8a44874807dd41a2d8b91ec14b">endsWith</a>(BasicString const &amp;str) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a4fee0d4f5bbc6235754f14b99fbaa60a">endsWith</a>(T value) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ada05264b34bafd8bd7d76979852520a6">endsWith</a>(const T *str) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a8b2e04417a714f974453663ba7ffb6ef">erase</a>(std::size_t index, std::size_t count)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a1bf88394c90dcdead82d565616b57c1f">erase</a>(ConstIterator position)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aefa48bb2f2b634ef7661880d2757d3e4">erase</a>(ConstIterator begin, ConstIterator end)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a173b725cf3bfbbcf401cdf2a44b16609">find</a>(BasicString const &amp;str, std::size_t pos=0) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a4180e49b43fad06984367dbe35401ddc">find</a>(std::size_t count, const T *str, std::size_t pos=0) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aaf14ff35915cf394e6935c174d199bce">find</a>(const T *str, std::size_t pos=0) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a43968a1e6f05fef1ec959f37d2e2739d">find</a>(T value, std::size_t pos=0) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a5479bebe9d7dbde8be07e476935468b2">findFirstNotOf</a>(BasicString const &amp;str, std::size_t pos=0) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#affa05c2f41e2ef8936ae1f71994cd61b">findFirstNotOf</a>(std::size_t count, const T *str, std::size_t pos=0) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a007fdab8cb51260e5b6e0b303fbbb516">findFirstNotOf</a>(const T *str, std::size_t pos=0) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ad5e703c7653f2f32425a6ff6581a6a14">findFirstNotOf</a>(T value, std::size_t pos=0) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a364d9113d5f5ffe468e2abc0843c1b3b">findFirstOf</a>(BasicString const &amp;str, std::size_t pos=0) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a93323a167408c3a44cb52770197ade74">findFirstOf</a>(std::size_t count, const T *str, std::size_t pos=0) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a9a0e4d4f7295afb0038e7d8c5c7fa267">findFirstOf</a>(const T *str, std::size_t pos=0) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aff39311e04d9bab37d8f9e1123c05354">findFirstOf</a>(T value, std::size_t pos=0) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#afe13e8614d8f30631ee893758c69275f">findLastNotOf</a>(BasicString const &amp;str, std::size_t pos) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a7c46c66eadeae49916dc2e54fd302eb6">findLastNotOf</a>(std::size_t count, const T *str, std::size_t pos) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ae47fed6bacfdd1ca6923b6aaa5f8f61e">findLastNotOf</a>(const T *str, std::size_t pos) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a4e304a4df2a7efae006b7044ded91849">findLastNotOf</a>(T value, std::size_t pos) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a7ee2c392596a64a276edf3d90b3dc01a">findLastOf</a>(BasicString const &amp;str, std::size_t pos) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#acf6b9c73f1b26b414b7366de5b4a6cd4">findLastOf</a>(std::size_t count, const T *str, std::size_t pos) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ac54629878f6a29de68c35b89fd860bd2">findLastOf</a>(const T *str, std::size_t pos) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aef0f9908b934f09ab7e94c9f0471fe46">findLastOf</a>(T value, std::size_t pos) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a1ee35a3d0dc9aaa82ef5d1f2161adb1b">get</a>(std::size_t index)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a38195baf7bd0232759d4a8f144684a1e">get</a>(std::size_t index) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a328ebd77a8bbb49a6776fefd417ebf4a">getCapacity</a>() const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a0077ab896a00c0aa6e785fffb2b417d5">getCData</a>() const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aa168f5bdce940de92d3f5c39e8159759">getData</a>() const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab3e4c324e16594a98292ff51b0b00267">getFront</a>()</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a09ef555d16d12a3c42d31cf7eefbf5a7">getFront</a>() const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a5e466d36e361dc572931d21896c527cd">getLast</a>()</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aed8592590a7a0097dc9cf28f6101799c">getLast</a>() const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6ed01f192a9c748153b095d56da2796a">getLength</a>() const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a649e9db31cfa007fcb42d3a72b67284c">getMaxSize</a>() const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a446670e0a8bf0b49e2c4dde3d7e68542">getSize</a>() const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a408cb985f4efc28bc4a77b672ad65cf0">insert</a>(std::size_t start, std::size_t count, T value)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a698ce5fcbcb0c124a6411c426eeef386">insert</a>(std::size_t start, const T *str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a556f4cdfea29a0430cf37f33873a16f5">insert</a>(std::size_t start, std::size_t count, const T *str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a2c7336f4719ec36b9fdc8277aebccc99">insert</a>(std::size_t start, BasicString const &amp;str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a019fce3826f9d7d1cadbdfd133b715a3">insert</a>(std::size_t start, BasicString const &amp;str, std::size_t index, std::size_t count)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a2507a9cb1f068ad86aa82d0b61ed9ebe">insert</a>(ConstIterator start, T value)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aa4cc21bcc8a8d686a8a02d1ede47afd4">insert</a>(ConstIterator start, std::size_t count, T value)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a13757cedd43c3f03ab141f9f77a131c9">insert</a>(ConstIterator start, InputIterator begin, InputIterator end)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ae0898bf3a5f72eb5bf6ca3e59de50957">insert</a>(ConstIterator start, std::initializer_list&lt; T &gt; list)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20203ddad7a07bb0bdfb23260d7585f2">isEmpty</a>() const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a84fd549f39f627b1caf412fac4459597">Iterator</a> typedef</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0" class="even"><td class="entry"><b>NOT_FOUND</b> (defined in <a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a>)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"><span class="mlabel">static</span></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#afaef88927e530b9475ce143779b7f851">operator!=</a>(BasicString const &amp;str) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab4db6b5abd9d325e1a343e257b8799a2">operator+=</a>(BasicString const &amp;str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a954159d735c0da5b5fc4cd5e0ec6e9cb">operator+=</a>(T value)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#adc140e485a8a83de3f3c52496035231d">operator+=</a>(const T *str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab2167114fbd1b521c9f18bd7515858a3">operator+=</a>(std::initializer_list&lt; T &gt; list)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab06ee127d12a726f58c955365592fe3f">operator&lt;</a>(BasicString const &amp;str) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a8c42d379cd90d3c8c02a0eeb31fd7482">operator&lt;&lt;</a>(K const &amp;o)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a7d68e5ffd1eac743a66f364e1e064536">operator&lt;=</a>(BasicString const &amp;str) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a2a6ad7eedb04b8fea0193e1d80275ba6">operator=</a>(BasicString const &amp;str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a4ac20b4bf7b077d252e0983e1d73ce98">operator=</a>(BasicString &amp;&amp;str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aa7f74d20e9be29852138c5141e76e97d">operator=</a>(const T *str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a84f17cee41ffe4e58eb371db8eb614cb">operator=</a>(T value)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab1da605ba807fd74d9936dc231974ee7">operator=</a>(std::initializer_list&lt; T &gt; list)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a2cf9e947bb8ed9a5deae560978c131be">operator==</a>(BasicString const &amp;str) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aa55fab1b4557936778147ed3450c0427">operator&gt;</a>(BasicString const &amp;str) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a8e216345ab62dd5997b65c21b333339f">operator&gt;=</a>(BasicString const &amp;str) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ace21e34dff89527e0e17355e0b6bfa24">operator[]</a>(std::size_t index)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a3902a5024a884655e6d759d8a9e5fdca">operator[]</a>(std::size_t index) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a51b3da7e0493d6fd6a870629dabc871a">popBack</a>()</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a1fc5c8410a87b1802e3b006a7177569c">pushBack</a>(T value)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a295b7f396e515c30e490d0d8a10b7e30">rbegin</a>()</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a428f523963a236e6e9b165f01e1ecd8c">rbegin</a>() const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a009469819f09df8cafa2dce131d19cb2">rend</a>()</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a579ac9b5d39c1e924c1a2ff45d59d68f">rend</a>() const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ac196e1a45da4c10b3cea7ac859704c66">replace</a>(std::size_t pos, std::size_t count, BasicString const &amp;str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a4dc5a2b396270298682358aa7667ce69">replace</a>(ConstIterator start, ConstIterator end, BasicString const &amp;str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a3a1833c4bc94071b2884d15dc01b8bf1">replace</a>(std::size_t tPos, std::size_t tCount, BasicString const &amp;str, std::size_t sPos, std::size_t sCount)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a15a6b724fd6dd01df42db1c70404722d">replace</a>(ConstIterator tStart, ConstIterator tEnd, BasicString const &amp;str, InputIterator sStart, InputIterator sEnd)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6babb3a40ac571290391347dcfeb1182">replace</a>(std::size_t pos, std::size_t tCount, const T *str, std::size_t sCount)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a7d78b95be2f40cb6fbbf41c2246c941c">replace</a>(ConstIterator start, ConstIterator end, const T *str, std::size_t sCount)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a809f6cddf662a64fb73c416e1157ec2f">replace</a>(std::size_t pos, std::size_t count, const T *str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab762acab3ed28387534fec5e78c5d87b">replace</a>(ConstIterator start, ConstIterator end, const T *str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a0a9e9a68ae0d503083faa6d3c6b71001">replace</a>(std::size_t pos, std::size_t tCount, T value, std::size_t sCount)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a0e783583a07979d7967e7d01a55e0d18">replace</a>(ConstIterator start, ConstIterator end, T value, std::size_t sCount)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a209163aab69f8989c05ef621ed3cd8c2">replace</a>(ConstIterator start, ConstIterator end, std::initializer_list&lt; T &gt; list)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a21efaef50166a748a6a26db815cfeef5">reserve</a>(std::size_t size)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a828b20842d0d6de3e052f51e83f8dcec">resize</a>(std::size_t count)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aea55af05648a6ff2a5e93cd2cf95c591">resize</a>(std::size_t count, T value)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a043d8789a2fcc13972175e55cb0ae9c0">reverse</a>()</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#adc0af8aedbfa789a79f0ae92d9a2898a">reverse</a>(std::size_t pos, std::size_t count)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6ed577da05148ce11444e7aaa61e8619">ReverseIterator</a> typedef</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ae6b6578b24ac6d25bab6829a0ca445da">rfind</a>(BasicString const &amp;str, std::size_t pos) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab444c88955b7061381c05d2a77a04c18">rfind</a>(std::size_t count, const T *str, std::size_t pos) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6c0488ba233f682afc89b592e3c49657">rfind</a>(const T *str, std::size_t pos) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a51fcbc02f5c2c0db76f4bc164854a1df">rfind</a>(T value, std::size_t pos) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#afe91c26205f7c7f70d2a3edfb242fb88">shrinkToFit</a>()</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a047e6ea23a748f1001aab1c7e913171a">startsWith</a>(BasicString const &amp;str) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a0ca87fa6562bfd1a1342978d0dfbd60b">startsWith</a>(T value) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a8f2456c9acbacc6c2b8692324aba86af">startsWith</a>(const T *str) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a0639e5b3e9ecf3f6fc07a0c13347266b">substr</a>(std::size_t pos, std::size_t count) const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6c5b14da8a367e0cb88268194e721ce0">swap</a>(BasicString &amp;str)</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a3869ddf5653784b3b5734572bbfd3159">toString</a>() const </td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a4767aa21ed166bbcbba3346e20063c81">~BasicString</a>()</td><td class="entry"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString&lt; T &gt;</a></td><td class="entry"></td></tr>
</table></div><!-- contents -->
<!-- HTML footer for doxygen 1.8.8-->
<!-- start footer part -->
</div>
</div>
</div>
</div>
</body>
</html>
