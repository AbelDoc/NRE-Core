<!-- HTML header for doxygen 1.8.8-->
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <!-- For Mobile Devices -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
        <meta name="generator" content="Doxygen 1.8.11"/>
        <script type="text/javascript" src="../../js/jquery-2.1.1.min.js"></script>
        <title>NRE-Utility: NRE::Utility::Detail::HashTable&lt; Key, T, StoreHash, Hash, KeyEqual &gt; Class Template Reference</title>
        <!--<link href="tabs.css" rel="stylesheet" type="text/css"/>-->
        <script type="text/javascript" src="dynsections.js"></script>
        <link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <link href='https://fonts.googleapis.com/css?family=Roboto+Slab' rel='stylesheet' type='text/css'>
        <?php
            include '../../php/navigation.php';
            if (!isset($_COOKIE["theme"]) || $_COOKIE["theme"] == "dark") {
                echo '<link href="../../css/dark/bootstrap.css" rel="stylesheet">';
            } else {
                echo '<link href="../../css/light/bootstrap.css" rel="stylesheet">';
            }
        ?>
        <script src="../../js/bootstrap.min.js"></script>
        <script type="text/javascript" src="doxy-boot.js"></script>
    </head>
    <body>
        <div class="container-fluid">
            <header class="page-header">
                <a href="../../../index.php">
                    <img src="../../img/Logo.png" class="logo img-responsive"/>
                </a>
            </header>
            <?php addNavigationBarInl(false); ?>
            <div id="top" class="row"><!-- do not remove this div, it is closed by doxygen! -->
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-body">
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespace_n_r_e.php">NRE</a></li><li class="navelem"><b>Utility</b></li><li class="navelem"><b>Detail</b></li><li class="navelem"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table-members.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">NRE::Utility::Detail::HashTable&lt; Key, T, StoreHash, Hash, KeyEqual &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Based on TSL Robin Hash, An hashtable used in map and set, an associative container using linear probing, robin hood and shift back optimisation.  
 <a href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_n_r_e___hash_table_8hpp_source.php">NRE_HashTable.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for NRE::Utility::Detail::HashTable&lt; Key, T, StoreHash, Hash, KeyEqual &gt;:</div>
<div class="dyncontent">
 <div class="center">
  <img src="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.png" usemap="#NRE::Utility::Detail::HashTable_3C_20Key_2C_20T_2C_20StoreHash_2C_20Hash_2C_20KeyEqual_20_3E_map" alt=""/>
  <map id="NRE::Utility::Detail::HashTable_3C_20Key_2C_20T_2C_20StoreHash_2C_20Hash_2C_20KeyEqual_20_3E_map" name="NRE::Utility::Detail::HashTable&lt; Key, T, StoreHash, Hash, KeyEqual &gt;_map">
<area href="class_n_r_e_1_1_utility_1_1_stringable.php" alt="NRE::Utility::Stringable&lt; HashTable&lt; Key, T, StoreHash, Hash, KeyEqual &gt; &gt;" shape="rect" coords="0,56,540,80"/>
<area href="class_n_r_e_1_1_utility_1_1_static_interface.php" title="Describe an object using CRTP to create static interface (static polymorphism) " alt="NRE::Utility::StaticInterface&lt; T, M &gt;" shape="rect" coords="0,0,540,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Hash table forward iterator.  <a href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_forward_iterator.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Hash table local forward iterator.  <a href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a7c59b024783746d4cd777c88a6bd5274"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7c59b024783746d4cd777c88a6bd5274"></a>
typedef <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt; Key, T &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>ValueType</b></td></tr>
<tr class="separator:a7c59b024783746d4cd777c88a6bd5274"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:addf51d407052beb57278f73dec86f7b0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="addf51d407052beb57278f73dec86f7b0"></a>
typedef <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry.php">BucketEntry</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a>, STORE_HASH &gt;::DistanceType&#160;</td><td class="memItemRight" valign="bottom"><b>DistanceType</b></td></tr>
<tr class="separator:addf51d407052beb57278f73dec86f7b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4f58d2185b517a31f7cd3f15b8dc52c"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a></td></tr>
<tr class="separator:aa4f58d2185b517a31f7cd3f15b8dc52c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21e1a7bba78650a7a682a0d4f1810a57"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a>&lt; const <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a></td></tr>
<tr class="separator:a21e1a7bba78650a7a682a0d4f1810a57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab231327983d1bd2c2d138e3bd951fe8a"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#ab231327983d1bd2c2d138e3bd951fe8a">LocalIterator</a></td></tr>
<tr class="separator:ab231327983d1bd2c2d138e3bd951fe8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada1d5799b9febfde69b635238211d77c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ada1d5799b9febfde69b635238211d77c"></a>
typedef <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a>&lt; const <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>ConstLocalIterator</b></td></tr>
<tr class="separator:ada1d5799b9febfde69b635238211d77c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a121255a050e66ac71ef1c8b0c40fd13a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a121255a050e66ac71ef1c8b0c40fd13a">HashTable</a> (std::size_t bucketCount, Hash const &amp;hasher, KeyEqual const &amp;equal)</td></tr>
<tr class="separator:a121255a050e66ac71ef1c8b0c40fd13a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a161946966092a975ab0347a1d2a8daae"><td class="memTemplParams" colspan="2">template&lt;class InputIterator &gt; </td></tr>
<tr class="memitem:a161946966092a975ab0347a1d2a8daae"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a161946966092a975ab0347a1d2a8daae">HashTable</a> (InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a0bf3449b4a0c9b2e2425785163fac33a">begin</a>, InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a614a80b3a34b2797fa7a6b96a57d3ece">end</a>, std::size_t bucketCount, Hash const &amp;hasher, KeyEqual const &amp;equal)</td></tr>
<tr class="separator:a161946966092a975ab0347a1d2a8daae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16aab801f767dd72ac9eb74e8f683b5b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a16aab801f767dd72ac9eb74e8f683b5b">HashTable</a> (std::initializer_list&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> &gt; list, std::size_t bucketCount, Hash const &amp;hasher, KeyEqual const &amp;equal)</td></tr>
<tr class="separator:a16aab801f767dd72ac9eb74e8f683b5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a833c400a5c6dad5e6928bbaabc7266f4"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a833c400a5c6dad5e6928bbaabc7266f4">HashTable</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a> const &amp;table)</td></tr>
<tr class="separator:a833c400a5c6dad5e6928bbaabc7266f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7729cfb898f1ea767e6e375d4e1de46"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa7729cfb898f1ea767e6e375d4e1de46">HashTable</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a> &amp;&amp;table)</td></tr>
<tr class="separator:aa7729cfb898f1ea767e6e375d4e1de46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a216cfd0a61ee8cd0f61c8de5a19c78d6"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a216cfd0a61ee8cd0f61c8de5a19c78d6">get</a> (Key const &amp;k)</td></tr>
<tr class="separator:a216cfd0a61ee8cd0f61c8de5a19c78d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e9bcf78b85cec9bdb7abcd66c0475bc"><td class="memItemLeft" align="right" valign="top">T const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a9e9bcf78b85cec9bdb7abcd66c0475bc">get</a> (Key const &amp;k) const </td></tr>
<tr class="separator:a9e9bcf78b85cec9bdb7abcd66c0475bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff2cc1654261bdb3f1da234aeceeabe4"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aff2cc1654261bdb3f1da234aeceeabe4">getBucketCount</a> () const </td></tr>
<tr class="separator:aff2cc1654261bdb3f1da234aeceeabe4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a65a8b0723df89a08b71e1fae567c3c"><td class="memItemLeft" align="right" valign="top">constexpr std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a4a65a8b0723df89a08b71e1fae567c3c">getMaxBucketCount</a> () const </td></tr>
<tr class="separator:a4a65a8b0723df89a08b71e1fae567c3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f9ca168e612b8ac9e2c63b2352f059b"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a8f9ca168e612b8ac9e2c63b2352f059b">getSize</a> () const </td></tr>
<tr class="separator:a8f9ca168e612b8ac9e2c63b2352f059b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ab1a6fc1bbfbc7992cacc29d71f627a"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a7ab1a6fc1bbfbc7992cacc29d71f627a">getMaxLoadFactor</a> () const </td></tr>
<tr class="separator:a7ab1a6fc1bbfbc7992cacc29d71f627a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae221561f6acdb325c70f1103f6b4ff8c"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#ae221561f6acdb325c70f1103f6b4ff8c">getLoadFactor</a> () const </td></tr>
<tr class="separator:ae221561f6acdb325c70f1103f6b4ff8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26448c710262c8b4a845daa60b5238a8"><td class="memItemLeft" align="right" valign="top">constexpr std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a26448c710262c8b4a845daa60b5238a8">getMaxSize</a> () const </td></tr>
<tr class="separator:a26448c710262c8b4a845daa60b5238a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec2a6bafe414da209eba10c715c6841d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aec2a6bafe414da209eba10c715c6841d">isEmpty</a> () const </td></tr>
<tr class="separator:aec2a6bafe414da209eba10c715c6841d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65ec5d89ce9368dcddc8c45c1b3ff7c3"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a65ec5d89ce9368dcddc8c45c1b3ff7c3">getCount</a> (Key const &amp;k) const </td></tr>
<tr class="separator:a65ec5d89ce9368dcddc8c45c1b3ff7c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93fcf51ad736c1aa479f7dd016636999"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a93fcf51ad736c1aa479f7dd016636999">getBucket</a> (Key const &amp;k) const </td></tr>
<tr class="separator:a93fcf51ad736c1aa479f7dd016636999"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30b8e3d3e2b6eb65f756aaddd312f9c8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a30b8e3d3e2b6eb65f756aaddd312f9c8">setMaxLoadFactor</a> (float factor)</td></tr>
<tr class="separator:a30b8e3d3e2b6eb65f756aaddd312f9c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0bf3449b4a0c9b2e2425785163fac33a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a0bf3449b4a0c9b2e2425785163fac33a">begin</a> ()</td></tr>
<tr class="separator:a0bf3449b4a0c9b2e2425785163fac33a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f0723eadb9715c63e2139175110c98e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a0f0723eadb9715c63e2139175110c98e">begin</a> () const </td></tr>
<tr class="separator:a0f0723eadb9715c63e2139175110c98e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50ae0542a98480efe830ff07cf56eba2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a50ae0542a98480efe830ff07cf56eba2">cbegin</a> () const </td></tr>
<tr class="separator:a50ae0542a98480efe830ff07cf56eba2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a614a80b3a34b2797fa7a6b96a57d3ece"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a614a80b3a34b2797fa7a6b96a57d3ece">end</a> ()</td></tr>
<tr class="separator:a614a80b3a34b2797fa7a6b96a57d3ece"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a741daf7434e3db0e3d37edfff0fef8e3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a741daf7434e3db0e3d37edfff0fef8e3">end</a> () const </td></tr>
<tr class="separator:a741daf7434e3db0e3d37edfff0fef8e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afcee821d48d6a0f6e02cb7a725f022cb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#afcee821d48d6a0f6e02cb7a725f022cb">cend</a> () const </td></tr>
<tr class="separator:afcee821d48d6a0f6e02cb7a725f022cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa064790d80bdfa7c7ad005369287c315"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#ab231327983d1bd2c2d138e3bd951fe8a">LocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa064790d80bdfa7c7ad005369287c315">begin</a> (std::size_t index)</td></tr>
<tr class="separator:aa064790d80bdfa7c7ad005369287c315"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a125d8ec1ebffcd65bc4242faaa091673"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a125d8ec1ebffcd65bc4242faaa091673">begin</a> (std::size_t index) const </td></tr>
<tr class="separator:a125d8ec1ebffcd65bc4242faaa091673"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99e76aa8ee7daa90c6e84a9562ca344f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a99e76aa8ee7daa90c6e84a9562ca344f">cbegin</a> (std::size_t index) const </td></tr>
<tr class="separator:a99e76aa8ee7daa90c6e84a9562ca344f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a42d108b776d9085d9745fc5237457acb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#ab231327983d1bd2c2d138e3bd951fe8a">LocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a42d108b776d9085d9745fc5237457acb">end</a> (std::size_t index)</td></tr>
<tr class="separator:a42d108b776d9085d9745fc5237457acb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb5f69cb2e3e9e2693f32dea480b20d1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#acb5f69cb2e3e9e2693f32dea480b20d1">end</a> (std::size_t index) const </td></tr>
<tr class="separator:acb5f69cb2e3e9e2693f32dea480b20d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53c2e7d14a15a26c625251717b02a822"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a53c2e7d14a15a26c625251717b02a822">cend</a> (std::size_t index) const </td></tr>
<tr class="separator:a53c2e7d14a15a26c625251717b02a822"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3268988f450d143f4db9aaa21dc6744"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a>, bool &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa3268988f450d143f4db9aaa21dc6744">insert</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> const &amp;value)</td></tr>
<tr class="separator:aa3268988f450d143f4db9aaa21dc6744"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13ce73a056d677a2f0ab5cd59d57f99b"><td class="memTemplParams" colspan="2">template&lt;class P &gt; </td></tr>
<tr class="memitem:a13ce73a056d677a2f0ab5cd59d57f99b"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a>, bool &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a13ce73a056d677a2f0ab5cd59d57f99b">insert</a> (P &amp;&amp;value)</td></tr>
<tr class="separator:a13ce73a056d677a2f0ab5cd59d57f99b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a526e698fe63676a6aec54738e36491f5"><td class="memTemplParams" colspan="2">template&lt;class InputIterator &gt; </td></tr>
<tr class="memitem:a526e698fe63676a6aec54738e36491f5"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a526e698fe63676a6aec54738e36491f5">insert</a> (InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a0bf3449b4a0c9b2e2425785163fac33a">begin</a>, InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a614a80b3a34b2797fa7a6b96a57d3ece">end</a>)</td></tr>
<tr class="separator:a526e698fe63676a6aec54738e36491f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87ff82ba86fa0920245be4b4c08ce989"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a87ff82ba86fa0920245be4b4c08ce989">insert</a> (std::initializer_list&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> &gt; list)</td></tr>
<tr class="separator:a87ff82ba86fa0920245be4b4c08ce989"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76a17e6fb4982ecb6fc7f34e953529f7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a76a17e6fb4982ecb6fc7f34e953529f7">insertHint</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a> hint, <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> const &amp;value)</td></tr>
<tr class="separator:a76a17e6fb4982ecb6fc7f34e953529f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f6d83d8761bf6383535ffb9b48134c6"><td class="memTemplParams" colspan="2">template&lt;class P &gt; </td></tr>
<tr class="memitem:a9f6d83d8761bf6383535ffb9b48134c6"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a9f6d83d8761bf6383535ffb9b48134c6">insertHint</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a> hint, P &amp;&amp;value)</td></tr>
<tr class="separator:a9f6d83d8761bf6383535ffb9b48134c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48c5b956e3f2b8dac2ba0619f62bbcfe"><td class="memTemplParams" colspan="2">template&lt;class... Args&gt; </td></tr>
<tr class="memitem:a48c5b956e3f2b8dac2ba0619f62bbcfe"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a>, bool &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a48c5b956e3f2b8dac2ba0619f62bbcfe">emplace</a> (Args &amp;&amp;...args)</td></tr>
<tr class="separator:a48c5b956e3f2b8dac2ba0619f62bbcfe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad48b4004dbd1cb6bfdb2f912d104b02d"><td class="memTemplParams" colspan="2">template&lt;class... Args&gt; </td></tr>
<tr class="memitem:ad48b4004dbd1cb6bfdb2f912d104b02d"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#ad48b4004dbd1cb6bfdb2f912d104b02d">emplaceHint</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a> hint, Args &amp;&amp;...args)</td></tr>
<tr class="separator:ad48b4004dbd1cb6bfdb2f912d104b02d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af985e8eb91bbad45c5d2f2a7f11d2b3c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#af985e8eb91bbad45c5d2f2a7f11d2b3c">clear</a> ()</td></tr>
<tr class="separator:af985e8eb91bbad45c5d2f2a7f11d2b3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef515ccfe0d364b1f52c8945f5a4ced5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aef515ccfe0d364b1f52c8945f5a4ced5">swap</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a> &amp;table)</td></tr>
<tr class="separator:aef515ccfe0d364b1f52c8945f5a4ced5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e956a5766ef1f19f450b95af1278319"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a9e956a5766ef1f19f450b95af1278319">reserve</a> (std::size_t count)</td></tr>
<tr class="separator:a9e956a5766ef1f19f450b95af1278319"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af77694f505c90c3792d6109a447881fe"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#af77694f505c90c3792d6109a447881fe">rehash</a> (std::size_t count)</td></tr>
<tr class="separator:af77694f505c90c3792d6109a447881fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3fba4f255a9d684b764fc132e691887"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#ab3fba4f255a9d684b764fc132e691887">equalRange</a> (Key const &amp;key)</td></tr>
<tr class="separator:ab3fba4f255a9d684b764fc132e691887"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d8f646ced5edbeb611943b31416f59c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a2d8f646ced5edbeb611943b31416f59c">equalRange</a> (Key const &amp;key) const </td></tr>
<tr class="separator:a2d8f646ced5edbeb611943b31416f59c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad91a554e03ddd7e3eba9feb478b104bc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#ad91a554e03ddd7e3eba9feb478b104bc">find</a> (Key const &amp;k)</td></tr>
<tr class="separator:ad91a554e03ddd7e3eba9feb478b104bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7fac3b387987d0a09c079eb68d2b7f6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#ac7fac3b387987d0a09c079eb68d2b7f6">find</a> (Key const &amp;k) const </td></tr>
<tr class="separator:ac7fac3b387987d0a09c079eb68d2b7f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a665d7a4e43fd2603964c44afc9dbaee6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a665d7a4e43fd2603964c44afc9dbaee6">erase</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a> pos)</td></tr>
<tr class="separator:a665d7a4e43fd2603964c44afc9dbaee6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00f20a26523bdd6b49121cb726395539"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a00f20a26523bdd6b49121cb726395539">erase</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a> pos)</td></tr>
<tr class="separator:a00f20a26523bdd6b49121cb726395539"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa16e98fa2ad0e97efab854a1ab2ec9d1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa16e98fa2ad0e97efab854a1ab2ec9d1">erase</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a0bf3449b4a0c9b2e2425785163fac33a">begin</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a614a80b3a34b2797fa7a6b96a57d3ece">end</a>)</td></tr>
<tr class="separator:aa16e98fa2ad0e97efab854a1ab2ec9d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8eea4655f379ce72612f054361be0c33"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a8eea4655f379ce72612f054361be0c33">erase</a> (Key const &amp;k)</td></tr>
<tr class="separator:a8eea4655f379ce72612f054361be0c33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15a58935df66db3ae497601e4cbbd387"><td class="memItemLeft" align="right" valign="top">Hash&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a15a58935df66db3ae497601e4cbbd387">getHash</a> () const </td></tr>
<tr class="separator:a15a58935df66db3ae497601e4cbbd387"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28e22d3b142893381b9708b693d77af6"><td class="memItemLeft" align="right" valign="top">KeyEqual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a28e22d3b142893381b9708b693d77af6">getKeyEqual</a> () const </td></tr>
<tr class="separator:a28e22d3b142893381b9708b693d77af6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae180ce93001f7bdf8ced12b3fdd44746"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#ae180ce93001f7bdf8ced12b3fdd44746">operator=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a> const &amp;table)</td></tr>
<tr class="separator:ae180ce93001f7bdf8ced12b3fdd44746"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30bc9016b26975cb8b041f9a700ac115"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a30bc9016b26975cb8b041f9a700ac115">operator=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a> &amp;&amp;table)</td></tr>
<tr class="separator:a30bc9016b26975cb8b041f9a700ac115"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af060a2734bf76f6e69343b55fcd2744d"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#af060a2734bf76f6e69343b55fcd2744d">operator[]</a> (Key const &amp;k)</td></tr>
<tr class="separator:af060a2734bf76f6e69343b55fcd2744d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a993a3574a6d71e55cfc83eb954d4a025"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a993a3574a6d71e55cfc83eb954d4a025">operator[]</a> (Key &amp;&amp;k)</td></tr>
<tr class="separator:a993a3574a6d71e55cfc83eb954d4a025"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05925f7afd8f3ceff9b66086ce259137"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a05925f7afd8f3ceff9b66086ce259137">toString</a> () const </td></tr>
<tr class="separator:a05925f7afd8f3ceff9b66086ce259137"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_class_n_r_e_1_1_utility_1_1_stringable"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_class_n_r_e_1_1_utility_1_1_stringable')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="class_n_r_e_1_1_utility_1_1_stringable.php">NRE::Utility::Stringable&lt; HashTable&lt; Key, T, StoreHash, Hash, KeyEqual &gt; &gt;</a></td></tr>
<tr class="memitem:a858907f8126e9c210854ddb659dd17ee inherit pub_methods_class_n_r_e_1_1_utility_1_1_stringable"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_stringable.php#a858907f8126e9c210854ddb659dd17ee">toString</a> () const</td></tr>
<tr class="separator:a858907f8126e9c210854ddb659dd17ee inherit pub_methods_class_n_r_e_1_1_utility_1_1_stringable"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_class_n_r_e_1_1_utility_1_1_static_interface"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_class_n_r_e_1_1_utility_1_1_static_interface')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="class_n_r_e_1_1_utility_1_1_static_interface.php">NRE::Utility::StaticInterface&lt; T, M &gt;</a></td></tr>
<tr class="memitem:a72fd5f7816f2a8309328186e1bf2b2f5 inherit pub_methods_class_n_r_e_1_1_utility_1_1_static_interface"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_interface.php#a72fd5f7816f2a8309328186e1bf2b2f5">impl</a> ()</td></tr>
<tr class="separator:a72fd5f7816f2a8309328186e1bf2b2f5 inherit pub_methods_class_n_r_e_1_1_utility_1_1_static_interface"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fcc521ea437ea9edceae7f0c03ab6b1 inherit pub_methods_class_n_r_e_1_1_utility_1_1_static_interface"><td class="memItemLeft" align="right" valign="top">T const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_interface.php#a1fcc521ea437ea9edceae7f0c03ab6b1">impl</a> () const </td></tr>
<tr class="separator:a1fcc521ea437ea9edceae7f0c03ab6b1 inherit pub_methods_class_n_r_e_1_1_utility_1_1_static_interface"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:a8b5c83feca46fffd42008923459af247"><td class="memItemLeft" align="right" valign="top">static const std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a8b5c83feca46fffd42008923459af247">DEFAULT_BUCKET_COUNT</a> = 0</td></tr>
<tr class="separator:a8b5c83feca46fffd42008923459af247"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt;<br />
class NRE::Utility::Detail::HashTable&lt; Key, T, StoreHash, Hash, KeyEqual &gt;</h3>

<p>Based on TSL Robin Hash, An hashtable used in map and set, an associative container using linear probing, robin hood and shift back optimisation. </p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a class="anchor" id="a21e1a7bba78650a7a682a0d4f1810a57"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a>&lt;const <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a>&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Shortcut to hide Iterator implementation </p>

</div>
</div>
<a class="anchor" id="aa4f58d2185b517a31f7cd3f15b8dc52c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a>&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a>&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Shortcut to hide ConstIterator implementation </p>

</div>
</div>
<a class="anchor" id="ab231327983d1bd2c2d138e3bd951fe8a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a>&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a>&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#ab231327983d1bd2c2d138e3bd951fe8a">LocalIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Shortcut to hide ConstIterator implementation </p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a121255a050e66ac71ef1c8b0c40fd13a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a> </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>bucketCount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Hash const &amp;&#160;</td>
          <td class="paramname"><em>hasher</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">KeyEqual const &amp;&#160;</td>
          <td class="paramname"><em>equal</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct an empty hashtable with a number of bucket </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bucketCount</td><td>the base bucket count </td></tr>
    <tr><td class="paramname">hasher</td><td>the hash function used in the table </td></tr>
    <tr><td class="paramname">equal</td><td>the equal function used in the table </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a161946966092a975ab0347a1d2a8daae"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
<div class="memtemplate">
template&lt;class InputIterator &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a> </td>
          <td>(</td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>bucketCount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Hash const &amp;&#160;</td>
          <td class="paramname"><em>hasher</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">KeyEqual const &amp;&#160;</td>
          <td class="paramname"><em>equal</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct an hashtable with a number of bucket and filled with elements in the given range </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>the begin iterator </td></tr>
    <tr><td class="paramname">end</td><td>the end iterator </td></tr>
    <tr><td class="paramname">bucketCount</td><td>the base bucket count </td></tr>
    <tr><td class="paramname">hasher</td><td>the hash function used in the table </td></tr>
    <tr><td class="paramname">equal</td><td>the equal function used in the table </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a16aab801f767dd72ac9eb74e8f683b5b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a> </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> &gt;&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>bucketCount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Hash const &amp;&#160;</td>
          <td class="paramname"><em>hasher</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">KeyEqual const &amp;&#160;</td>
          <td class="paramname"><em>equal</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct an hashtable with a number of bucket and filled with elements in the given list </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>the list to fill the table with </td></tr>
    <tr><td class="paramname">bucketCount</td><td>the base bucket count </td></tr>
    <tr><td class="paramname">hasher</td><td>the hash function used in the table </td></tr>
    <tr><td class="paramname">equal</td><td>the equal function used in the table </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a833c400a5c6dad5e6928bbaabc7266f4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt; const &amp;&#160;</td>
          <td class="paramname"><em>table</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy table into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">table</td><td>the table to copy </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aa7729cfb898f1ea767e6e375d4e1de46"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>table</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Move table into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">table</td><td>the table to move </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a0bf3449b4a0c9b2e2425785163fac33a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>an iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a0f0723eadb9715c63e2139175110c98e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="aa064790d80bdfa7c7ad005369287c315"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#ab231327983d1bd2c2d138e3bd951fe8a">LocalIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::begin </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Grab an iterator on a given bucket </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the bucket index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the bucket </dd></dl>

</div>
</div>
<a class="anchor" id="a125d8ec1ebffcd65bc4242faaa091673"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::begin </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Grab a const iterator on a given bucket </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the bucket index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the bucket </dd></dl>

</div>
</div>
<a class="anchor" id="a50ae0542a98480efe830ff07cf56eba2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::cbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a99e76aa8ee7daa90c6e84a9562ca344f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::cbegin </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Grab a const iterator on a given bucket </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the bucket index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the bucket </dd></dl>

</div>
</div>
<a class="anchor" id="afcee821d48d6a0f6e02cb7a725f022cb"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::cend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a53c2e7d14a15a26c625251717b02a822"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::cend </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Grab a const iterator on a given bucket end </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the bucket index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the bucket end </dd></dl>

</div>
</div>
<a class="anchor" id="af985e8eb91bbad45c5d2f2a7f11d2b3c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Clear all buckets </p>

</div>
</div>
<a class="anchor" id="a48c5b956e3f2b8dac2ba0619f62bbcfe"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
<div class="memtemplate">
template&lt;class... Args&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a>, bool&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::emplace </td>
          <td>(</td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Emplace an element using the given elements </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">args</td><td>the parameter pack used to create the inserted pair </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pair containing an iterator on the inserted element, and a boolean telling if the insertion has been done </dd></dl>

</div>
</div>
<a class="anchor" id="ad48b4004dbd1cb6bfdb2f912d104b02d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
<div class="memtemplate">
template&lt;class... Args&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::emplaceHint </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>hint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Emplace an element using the given elements </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">hint</td><td>the iterator used as a hint to emplace the element </td></tr>
    <tr><td class="paramname">args</td><td>the parameter pack used to create the inserted pair </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator on the inserted element </dd></dl>

</div>
</div>
<a class="anchor" id="a614a80b3a34b2797fa7a6b96a57d3ece"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>an iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a741daf7434e3db0e3d37edfff0fef8e3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a42d108b776d9085d9745fc5237457acb"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#ab231327983d1bd2c2d138e3bd951fe8a">LocalIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::end </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Grab an iterator on a given bucket end </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the bucket index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the bucket end </dd></dl>

</div>
</div>
<a class="anchor" id="acb5f69cb2e3e9e2693f32dea480b20d1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::end </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Grab a const iterator on a given bucket end </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the bucket index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the bucket end </dd></dl>

</div>
</div>
<a class="anchor" id="ab3fba4f255a9d684b764fc132e691887"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a>&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::equalRange </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find a range of iterator containing all elements with the given key, both end if not found </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>the key to search </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pair of iterator </dd></dl>

</div>
</div>
<a class="anchor" id="a2d8f646ced5edbeb611943b31416f59c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a>&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::equalRange </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find a range of iterator containing all elements with the given key, both end if not found </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>the key to search </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pair of iterator </dd></dl>

</div>
</div>
<a class="anchor" id="a665d7a4e43fd2603964c44afc9dbaee6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a>&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase the element pointed by the iterator </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>the iterator on the erased element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator after the erased element </dd></dl>

</div>
</div>
<a class="anchor" id="a00f20a26523bdd6b49121cb726395539"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase the element pointed by the iterator </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>the iterator on the erased element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator after the erased element </dd></dl>

</div>
</div>
<a class="anchor" id="aa16e98fa2ad0e97efab854a1ab2ec9d1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase the element in the given range </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>the begin iterator for erasing </td></tr>
    <tr><td class="paramname">end</td><td>the end iterator for erasing </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator after the last erased element </dd></dl>

</div>
</div>
<a class="anchor" id="a8eea4655f379ce72612f054361be0c33"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::erase </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase all element with the given key </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key to search and erase </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the number of erased elements </dd></dl>

</div>
</div>
<a class="anchor" id="ad91a554e03ddd7e3eba9feb478b104bc"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::find </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find the element corresponding with the given key </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key to search </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator pointing on the element, or end if not found </dd></dl>

</div>
</div>
<a class="anchor" id="ac7fac3b387987d0a09c079eb68d2b7f6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::find </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find the element corresponding with the given key </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key to search </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator pointing on the element, or end if not found </dd></dl>

</div>
</div>
<a class="anchor" id="a216cfd0a61ee8cd0f61c8de5a19c78d6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::get </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element with bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the element key </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="a9e9bcf78b85cec9bdb7abcd66c0475bc"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T const&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::get </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element with bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the element key </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="a93fcf51ad736c1aa479f7dd016636999"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getBucket </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get the bucket index from a given key </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key to search </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding bucket </dd></dl>

</div>
</div>
<a class="anchor" id="aff2cc1654261bdb3f1da234aeceeabe4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getBucketCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the number of buckets in the table </dd></dl>

</div>
</div>
<a class="anchor" id="a65ec5d89ce9368dcddc8c45c1b3ff7c3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getCount </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find the number of element with the given key </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key to search </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the number of corresponding elements </dd></dl>

</div>
</div>
<a class="anchor" id="a15a58935df66db3ae497601e4cbbd387"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">Hash <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getHash </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the hash function </dd></dl>

</div>
</div>
<a class="anchor" id="a28e22d3b142893381b9708b693d77af6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">KeyEqual <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getKeyEqual </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the key equal function </dd></dl>

</div>
</div>
<a class="anchor" id="ae221561f6acdb325c70f1103f6b4ff8c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">float <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getLoadFactor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the current load factor </dd></dl>

</div>
</div>
<a class="anchor" id="a4a65a8b0723df89a08b71e1fae567c3c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getMaxBucketCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the maximum number of bucket in the table </dd></dl>

</div>
</div>
<a class="anchor" id="a7ab1a6fc1bbfbc7992cacc29d71f627a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">float <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getMaxLoadFactor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the maximum load factor </dd></dl>

</div>
</div>
<a class="anchor" id="a26448c710262c8b4a845daa60b5238a8"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getMaxSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the maximum hash table size </dd></dl>

</div>
</div>
<a class="anchor" id="a8f9ca168e612b8ac9e2c63b2352f059b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the number of elements in the table </dd></dl>

</div>
</div>
<a class="anchor" id="aa3268988f450d143f4db9aaa21dc6744"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a>, bool&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> const &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert the given value in the table </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the pair with the key and the corresponding element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pair containing an iterator on the inserted element, and a boolean telling if the insertion has been done </dd></dl>

</div>
</div>
<a class="anchor" id="a13ce73a056d677a2f0ab5cd59d57f99b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
<div class="memtemplate">
template&lt;class P &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a>, bool&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::insert </td>
          <td>(</td>
          <td class="paramtype">P &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert the given value in the table </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the pair with the key and the corresponding element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pair containing an iterator on the inserted element, and a boolean telling if the insertion has been done </dd></dl>

</div>
</div>
<a class="anchor" id="a526e698fe63676a6aec54738e36491f5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
<div class="memtemplate">
template&lt;class InputIterator &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::insert </td>
          <td>(</td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert elements in the given range </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>the begin iterator </td></tr>
    <tr><td class="paramname">end</td><td>the end iterator </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a87ff82ba86fa0920245be4b4c08ce989"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::insert </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> &gt;&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert elements in the given list </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>the list of value to insert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a76a17e6fb4982ecb6fc7f34e953529f7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::insertHint </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>hint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> const &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert the given value in the table using the hint as a suggestion for the search start </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">hint</td><td>the hint used for the search </td></tr>
    <tr><td class="paramname">value</td><td>the value to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator on the inserted element </dd></dl>

</div>
</div>
<a class="anchor" id="a9f6d83d8761bf6383535ffb9b48134c6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
<div class="memtemplate">
template&lt;class P &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::insertHint </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>hint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">P &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert the given value in the table using the hint as a suggestion for the search start </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">hint</td><td>the hint used for the search </td></tr>
    <tr><td class="paramname">value</td><td>the value to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator on the inserted element </dd></dl>

</div>
</div>
<a class="anchor" id="aec2a6bafe414da209eba10c715c6841d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::isEmpty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>if the table is empty </dd></dl>

</div>
</div>
<a class="anchor" id="ae180ce93001f7bdf8ced12b3fdd44746"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt; const &amp;&#160;</td>
          <td class="paramname"><em>table</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy table into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">table</td><td>the hash table to copy into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a30bc9016b26975cb8b041f9a700ac115"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>table</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Move table into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">table</td><td>the hash table to move into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="af060a2734bf76f6e69343b55fcd2744d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Try to access the element designed by the given key, if not found insert a default one </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key used for access </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the found/inserted element </dd></dl>

</div>
</div>
<a class="anchor" id="a993a3574a6d71e55cfc83eb954d4a025"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">Key &amp;&amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Try to access the element designed by the given key, if not found insert a default one </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key used for access </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the found/inserted element </dd></dl>

</div>
</div>
<a class="anchor" id="af77694f505c90c3792d6109a447881fe"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::rehash </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Reserve at least coutn bucket in the table and rehash the table </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the number of desired bucket </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9e956a5766ef1f19f450b95af1278319"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::reserve </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Reserve at least count bucket in the table and rehash the table </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the number of desired bucket </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a30b8e3d3e2b6eb65f756aaddd312f9c8"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::setMaxLoadFactor </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>factor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set the new max load factor, must be between 0.0 and 1.0 </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">factor</td><td>the new factor </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aef515ccfe0d364b1f52c8945f5a4ced5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt; &amp;&#160;</td>
          <td class="paramname"><em>table</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Swap the hash table with another hash table </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">table</td><td>the other hash table </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a05925f7afd8f3ceff9b66086ce259137"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">String</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::toString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Convert the object into a string representation </p><dl class="section return"><dt>Returns</dt><dd>the converted object </dd></dl>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="a8b5c83feca46fffd42008923459af247"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::DEFAULT_BUCKET_COUNT = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>The default bucket count </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/mnt/c/Users/abell/Documents/GitHub/NRE-Utility/src/Utility/Detail/HashTable/<a class="el" href="_n_r_e___hash_table_8hpp_source.php">NRE_HashTable.hpp</a></li>
</ul>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.8-->
<!-- start footer part -->
</div>
</div>
</div>
</div>
</body>
</html>
