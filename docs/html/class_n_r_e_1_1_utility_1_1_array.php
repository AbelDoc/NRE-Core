<!-- HTML header for doxygen 1.8.8-->
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <!-- For Mobile Devices -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
        <meta name="generator" content="Doxygen 1.8.11"/>
        <script type="text/javascript" src="../../js/jquery-2.1.1.min.js"></script>
        <title>NRE-Utility: NRE::Utility::Array&lt; T, Size &gt; Class Template Reference</title>
        <!--<link href="tabs.css" rel="stylesheet" type="text/css"/>-->
        <script type="text/javascript" src="dynsections.js"></script>
        <link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <link href='https://fonts.googleapis.com/css?family=Roboto+Slab' rel='stylesheet' type='text/css'>
        <?php
            include '../../php/navigation.php';
            if (!isset($_COOKIE["theme"]) || $_COOKIE["theme"] == "dark") {
                echo '<link href="../../css/dark/bootstrap.css" rel="stylesheet">';
            } else {
                echo '<link href="../../css/light/bootstrap.css" rel="stylesheet">';
            }
        ?>
        <script src="../../js/bootstrap.min.js"></script>
        <script type="text/javascript" src="doxy-boot.js"></script>
    </head>
    <body>
        <div class="container-fluid">
            <header class="page-header">
                <a href="../../../index.php">
                    <img src="../../img/Logo.png" class="logo img-responsive"/>
                </a>
            </header>
            <?php addNavigationBarInl(false); ?>
            <div id="top" class="row"><!-- do not remove this div, it is closed by doxygen! -->
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-body">
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespace_n_r_e.php">NRE</a></li><li class="navelem"><b>Utility</b></li><li class="navelem"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="class_n_r_e_1_1_utility_1_1_array-members.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">NRE::Utility::Array&lt; T, Size &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A fixed size array.  
 <a href="class_n_r_e_1_1_utility_1_1_array.php#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_n_r_e___array_8hpp_source.php">NRE_Array.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for NRE::Utility::Array&lt; T, Size &gt;:</div>
<div class="dyncontent">
 <div class="center">
  <img src="class_n_r_e_1_1_utility_1_1_array.png" usemap="#NRE::Utility::Array_3C_20T_2C_20Size_20_3E_map" alt=""/>
  <map id="NRE::Utility::Array_3C_20T_2C_20Size_20_3E_map" name="NRE::Utility::Array&lt; T, Size &gt;_map">
<area href="class_n_r_e_1_1_utility_1_1_stringable.php" alt="NRE::Utility::Stringable&lt; Array&lt; T, Size &gt; &gt;" shape="rect" coords="0,56,347,80"/>
<area href="class_n_r_e_1_1_utility_1_1_static_interface.php" title="Describe an object using CRTP to create static interface (static polymorphism) " alt="NRE::Utility::StaticInterface&lt; T, M &gt;" shape="rect" coords="0,0,347,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a7c73d4e09069f287dd826778694a320c"><td class="memItemLeft" align="right" valign="top">typedef T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a7c73d4e09069f287dd826778694a320c">Iterator</a></td></tr>
<tr class="separator:a7c73d4e09069f287dd826778694a320c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0527ef7754879228ba0c9caf90fc14c"><td class="memItemLeft" align="right" valign="top">typedef const T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#ad0527ef7754879228ba0c9caf90fc14c">ConstIterator</a></td></tr>
<tr class="separator:ad0527ef7754879228ba0c9caf90fc14c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a194595bf8eda8b81742a7b3ec59d2e47"><td class="memItemLeft" align="right" valign="top">typedef std::reverse_iterator&lt; T * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a194595bf8eda8b81742a7b3ec59d2e47">ReverseIterator</a></td></tr>
<tr class="separator:a194595bf8eda8b81742a7b3ec59d2e47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac00f67897b673ac22a565ffb54417fe4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac00f67897b673ac22a565ffb54417fe4"></a>
typedef std::reverse_iterator&lt; const T * &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>ConstReverseIterator</b></td></tr>
<tr class="separator:ac00f67897b673ac22a565ffb54417fe4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:adca9e0bfc6bec4c47db6b4cb1ba3f693"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#adca9e0bfc6bec4c47db6b4cb1ba3f693">Array</a> ()=default</td></tr>
<tr class="separator:adca9e0bfc6bec4c47db6b4cb1ba3f693"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab271b77f1c13cb32617bc822deefc8d6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#ab271b77f1c13cb32617bc822deefc8d6">Array</a> (std::initializer_list&lt; T &gt; list)</td></tr>
<tr class="separator:ab271b77f1c13cb32617bc822deefc8d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ba63e166ba8b77dc62b3a01b34e5330"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a2ba63e166ba8b77dc62b3a01b34e5330">Array</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a> const &amp;arr)=default</td></tr>
<tr class="separator:a2ba63e166ba8b77dc62b3a01b34e5330"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95ae132a7378240b2eeadb19f7cee568"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a95ae132a7378240b2eeadb19f7cee568">Array</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a> &amp;&amp;arr)=default</td></tr>
<tr class="separator:a95ae132a7378240b2eeadb19f7cee568"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b21cfd0a6608aefaef606d1df918a7c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a8b21cfd0a6608aefaef606d1df918a7c">~Array</a> ()=default</td></tr>
<tr class="separator:a8b21cfd0a6608aefaef606d1df918a7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49186f2e8aa4c153e291a101c6ac7c5d"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a49186f2e8aa4c153e291a101c6ac7c5d">get</a> (std::size_t index)</td></tr>
<tr class="separator:a49186f2e8aa4c153e291a101c6ac7c5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ddbfb3591f97039eaf5729b0c60f8f6"><td class="memItemLeft" align="right" valign="top">T const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a3ddbfb3591f97039eaf5729b0c60f8f6">get</a> (std::size_t index) const </td></tr>
<tr class="separator:a3ddbfb3591f97039eaf5729b0c60f8f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acaa8371bb5be3991597d4f3515e8c547"><td class="memItemLeft" align="right" valign="top">T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#acaa8371bb5be3991597d4f3515e8c547">getData</a> ()</td></tr>
<tr class="separator:acaa8371bb5be3991597d4f3515e8c547"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8210c770a4defc0540a758b1af849a5b"><td class="memItemLeft" align="right" valign="top">const T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a8210c770a4defc0540a758b1af849a5b">getData</a> () const </td></tr>
<tr class="separator:a8210c770a4defc0540a758b1af849a5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1cfaee04c82c6ee4b4f225b651b11391"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a1cfaee04c82c6ee4b4f225b651b11391">getFront</a> ()</td></tr>
<tr class="separator:a1cfaee04c82c6ee4b4f225b651b11391"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0eaae8f8a565dc06edc359d4d9dc935c"><td class="memItemLeft" align="right" valign="top">T const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a0eaae8f8a565dc06edc359d4d9dc935c">getFront</a> () const </td></tr>
<tr class="separator:a0eaae8f8a565dc06edc359d4d9dc935c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ba2737186424d7a6330418e9a5dcfd4"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a0ba2737186424d7a6330418e9a5dcfd4">getLast</a> ()</td></tr>
<tr class="separator:a0ba2737186424d7a6330418e9a5dcfd4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7f6350efd46c7f4dc7300c26afdd001"><td class="memItemLeft" align="right" valign="top">T const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#af7f6350efd46c7f4dc7300c26afdd001">getLast</a> () const </td></tr>
<tr class="separator:af7f6350efd46c7f4dc7300c26afdd001"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a014e1b208f5fda5335ea4b11e8f9c9e4"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a014e1b208f5fda5335ea4b11e8f9c9e4">isEmpty</a> () const </td></tr>
<tr class="separator:a014e1b208f5fda5335ea4b11e8f9c9e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3597a22d6e54ffa1b10a7d2722028273"><td class="memItemLeft" align="right" valign="top">constexpr std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a3597a22d6e54ffa1b10a7d2722028273">getSize</a> () const </td></tr>
<tr class="separator:a3597a22d6e54ffa1b10a7d2722028273"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2770ed9f41c41e7063a73410b34a7b12"><td class="memItemLeft" align="right" valign="top">constexpr std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a2770ed9f41c41e7063a73410b34a7b12">getMaxSize</a> () const </td></tr>
<tr class="separator:a2770ed9f41c41e7063a73410b34a7b12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a370a4e484cee21247a74334eef4d2b2d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a7c73d4e09069f287dd826778694a320c">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a370a4e484cee21247a74334eef4d2b2d">begin</a> ()</td></tr>
<tr class="separator:a370a4e484cee21247a74334eef4d2b2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06764fc28ee8657256b253e4e2d1426f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#ad0527ef7754879228ba0c9caf90fc14c">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a06764fc28ee8657256b253e4e2d1426f">begin</a> () const </td></tr>
<tr class="separator:a06764fc28ee8657256b253e4e2d1426f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adcf509c9cddaf2564dc2794bb72e8819"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#ad0527ef7754879228ba0c9caf90fc14c">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#adcf509c9cddaf2564dc2794bb72e8819">cbegin</a> () const </td></tr>
<tr class="separator:adcf509c9cddaf2564dc2794bb72e8819"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e8f848bcb413ba1ed1c2285e3a88245"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a7c73d4e09069f287dd826778694a320c">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a0e8f848bcb413ba1ed1c2285e3a88245">end</a> ()</td></tr>
<tr class="separator:a0e8f848bcb413ba1ed1c2285e3a88245"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3345445d1a17642d1d7ee7accb864ce1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#ad0527ef7754879228ba0c9caf90fc14c">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a3345445d1a17642d1d7ee7accb864ce1">end</a> () const </td></tr>
<tr class="separator:a3345445d1a17642d1d7ee7accb864ce1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeed554b8f663e9cc267561cf43a630ad"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#ad0527ef7754879228ba0c9caf90fc14c">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#aeed554b8f663e9cc267561cf43a630ad">cend</a> () const </td></tr>
<tr class="separator:aeed554b8f663e9cc267561cf43a630ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61ee3b447d3335c18bdd833a5debc3a0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a194595bf8eda8b81742a7b3ec59d2e47">ReverseIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a61ee3b447d3335c18bdd833a5debc3a0">rbegin</a> ()</td></tr>
<tr class="separator:a61ee3b447d3335c18bdd833a5debc3a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b5556e668fa54a50c3f30bb29c2b431"><td class="memItemLeft" align="right" valign="top">ConstReverseIterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a8b5556e668fa54a50c3f30bb29c2b431">rbegin</a> () const </td></tr>
<tr class="separator:a8b5556e668fa54a50c3f30bb29c2b431"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6838cd211a43b7987d4f4ef2504d36e"><td class="memItemLeft" align="right" valign="top">ConstReverseIterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#ab6838cd211a43b7987d4f4ef2504d36e">crbegin</a> () const </td></tr>
<tr class="separator:ab6838cd211a43b7987d4f4ef2504d36e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0406aa5d43b160d9d733897906fcdb6d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a194595bf8eda8b81742a7b3ec59d2e47">ReverseIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a0406aa5d43b160d9d733897906fcdb6d">rend</a> ()</td></tr>
<tr class="separator:a0406aa5d43b160d9d733897906fcdb6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00e78dfd53d0b91167e778d99ca47e4b"><td class="memItemLeft" align="right" valign="top">ConstReverseIterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a00e78dfd53d0b91167e778d99ca47e4b">rend</a> () const </td></tr>
<tr class="separator:a00e78dfd53d0b91167e778d99ca47e4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace8d0009f02de8e75038ca6802542503"><td class="memItemLeft" align="right" valign="top">ConstReverseIterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#ace8d0009f02de8e75038ca6802542503">crend</a> () const </td></tr>
<tr class="separator:ace8d0009f02de8e75038ca6802542503"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9bcdd0aca1fa3c209d78ee733550987"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#ac9bcdd0aca1fa3c209d78ee733550987">fill</a> (T const &amp;value)</td></tr>
<tr class="separator:ac9bcdd0aca1fa3c209d78ee733550987"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72ed3c0b6c1ccbf335d9ef26c0e7e074"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a72ed3c0b6c1ccbf335d9ef26c0e7e074">swap</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a> &amp;arr) noexcept</td></tr>
<tr class="separator:a72ed3c0b6c1ccbf335d9ef26c0e7e074"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a039cf013fe61d56bc12c554eda5d2fc6"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a039cf013fe61d56bc12c554eda5d2fc6">operator[]</a> (std::size_t index)</td></tr>
<tr class="separator:a039cf013fe61d56bc12c554eda5d2fc6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e804b2d067e38705651da6a72cb32e7"><td class="memItemLeft" align="right" valign="top">T const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a9e804b2d067e38705651da6a72cb32e7">operator[]</a> (std::size_t index) const </td></tr>
<tr class="separator:a9e804b2d067e38705651da6a72cb32e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbd441f61e6a9784dc1e7c1055639738"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#adbd441f61e6a9784dc1e7c1055639738">operator=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a> const &amp;arr)=default</td></tr>
<tr class="separator:adbd441f61e6a9784dc1e7c1055639738"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae98007f6d8933d8b91d9e59767887684"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#ae98007f6d8933d8b91d9e59767887684">operator=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a> &amp;&amp;arr)=default</td></tr>
<tr class="separator:ae98007f6d8933d8b91d9e59767887684"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3841ae70203b4f1d773a9fe65020970"><td class="memTemplParams" colspan="2">template&lt;typename U  = T, typename std::enable_if&lt;!std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:ac3841ae70203b4f1d773a9fe65020970"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#ac3841ae70203b4f1d773a9fe65020970">operator==</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a> const &amp;arr) const </td></tr>
<tr class="separator:ac3841ae70203b4f1d773a9fe65020970"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3841ae70203b4f1d773a9fe65020970"><td class="memTemplParams" colspan="2">template&lt;typename U  = T, typename std::enable_if&lt; std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:ac3841ae70203b4f1d773a9fe65020970"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#ac3841ae70203b4f1d773a9fe65020970">operator==</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a> const &amp;arr) const </td></tr>
<tr class="separator:ac3841ae70203b4f1d773a9fe65020970"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acdf188605ad6e9c864aa034bd8e8b4d7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#acdf188605ad6e9c864aa034bd8e8b4d7">operator!=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a> const &amp;arr) const </td></tr>
<tr class="separator:acdf188605ad6e9c864aa034bd8e8b4d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8ecae20e4a7da25f9067f2c9011133f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#ad8ecae20e4a7da25f9067f2c9011133f">toString</a> () const </td></tr>
<tr class="separator:ad8ecae20e4a7da25f9067f2c9011133f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_class_n_r_e_1_1_utility_1_1_stringable"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_class_n_r_e_1_1_utility_1_1_stringable')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="class_n_r_e_1_1_utility_1_1_stringable.php">NRE::Utility::Stringable&lt; Array&lt; T, Size &gt; &gt;</a></td></tr>
<tr class="memitem:a858907f8126e9c210854ddb659dd17ee inherit pub_methods_class_n_r_e_1_1_utility_1_1_stringable"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_stringable.php#a858907f8126e9c210854ddb659dd17ee">toString</a> () const</td></tr>
<tr class="separator:a858907f8126e9c210854ddb659dd17ee inherit pub_methods_class_n_r_e_1_1_utility_1_1_stringable"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_class_n_r_e_1_1_utility_1_1_static_interface"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_class_n_r_e_1_1_utility_1_1_static_interface')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="class_n_r_e_1_1_utility_1_1_static_interface.php">NRE::Utility::StaticInterface&lt; T, M &gt;</a></td></tr>
<tr class="memitem:a72fd5f7816f2a8309328186e1bf2b2f5 inherit pub_methods_class_n_r_e_1_1_utility_1_1_static_interface"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_interface.php#a72fd5f7816f2a8309328186e1bf2b2f5">impl</a> ()</td></tr>
<tr class="separator:a72fd5f7816f2a8309328186e1bf2b2f5 inherit pub_methods_class_n_r_e_1_1_utility_1_1_static_interface"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fcc521ea437ea9edceae7f0c03ab6b1 inherit pub_methods_class_n_r_e_1_1_utility_1_1_static_interface"><td class="memItemLeft" align="right" valign="top">T const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_interface.php#a1fcc521ea437ea9edceae7f0c03ab6b1">impl</a> () const </td></tr>
<tr class="separator:a1fcc521ea437ea9edceae7f0c03ab6b1 inherit pub_methods_class_n_r_e_1_1_utility_1_1_static_interface"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;class T, std::size_t Size&gt;<br />
class NRE::Utility::Array&lt; T, Size &gt;</h3>

<p>A fixed size array. </p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a class="anchor" id="ad0527ef7754879228ba0c9caf90fc14c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef const T* <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#ad0527ef7754879228ba0c9caf90fc14c">ConstIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Shortcut to hide ReverseIterator implementation </p>

</div>
</div>
<a class="anchor" id="a7c73d4e09069f287dd826778694a320c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef T* <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a7c73d4e09069f287dd826778694a320c">Iterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>&lt; Shortcut to hide Iterator implementation Shortcut to hide ConstIterator implementation </p>

</div>
</div>
<a class="anchor" id="a194595bf8eda8b81742a7b3ec59d2e47"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef std::reverse_iterator&lt;T*&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a194595bf8eda8b81742a7b3ec59d2e47">ReverseIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Shortcut to hide ConstReverseIterator implementation </p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="adca9e0bfc6bec4c47db6b4cb1ba3f693"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Construct the default array </p>

</div>
</div>
<a class="anchor" id="ab271b77f1c13cb32617bc822deefc8d6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a> </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; T &gt;&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Cosntruct the array from a list </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>the list of value </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2ba63e166ba8b77dc62b3a01b34e5330"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a>&lt; T, Size &gt; const &amp;&#160;</td>
          <td class="paramname"><em>arr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Copy arr into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">arr</td><td>the array to copy </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a95ae132a7378240b2eeadb19f7cee568"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a>&lt; T, Size &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>arr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Move arr into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">arr</td><td>the array to move </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8b21cfd0a6608aefaef606d1df918a7c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::~<a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php" title="A fixed size array. ">Array</a> Deconstructor </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a370a4e484cee21247a74334eef4d2b2d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a7c73d4e09069f287dd826778694a320c">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>an iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a06764fc28ee8657256b253e4e2d1426f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#ad0527ef7754879228ba0c9caf90fc14c">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="adcf509c9cddaf2564dc2794bb72e8819"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#ad0527ef7754879228ba0c9caf90fc14c">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::cbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="aeed554b8f663e9cc267561cf43a630ad"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#ad0527ef7754879228ba0c9caf90fc14c">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::cend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="ab6838cd211a43b7987d4f4ef2504d36e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">ConstReverseIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::crbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const reverse iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="ace8d0009f02de8e75038ca6802542503"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">ConstReverseIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::crend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const reverse iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a0e8f848bcb413ba1ed1c2285e3a88245"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a7c73d4e09069f287dd826778694a320c">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>an iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a3345445d1a17642d1d7ee7accb864ce1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#ad0527ef7754879228ba0c9caf90fc14c">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="ac9bcdd0aca1fa3c209d78ee733550987"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::fill </td>
          <td>(</td>
          <td class="paramtype">T const &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Fill the array with the same value </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the value to fill the array with </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a49186f2e8aa4c153e291a101c6ac7c5d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::get </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element with bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the element index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="a3ddbfb3591f97039eaf5729b0c60f8f6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T const&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::get </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element with bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the element index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="acaa8371bb5be3991597d4f3515e8c547"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T* <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::getData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the internal data array </dd></dl>

</div>
</div>
<a class="anchor" id="a8210c770a4defc0540a758b1af849a5b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const T* <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::getData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the internal data array </dd></dl>

</div>
</div>
<a class="anchor" id="a1cfaee04c82c6ee4b4f225b651b11391"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::getFront </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a0eaae8f8a565dc06edc359d4d9dc935c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T const&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::getFront </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a0ba2737186424d7a6330418e9a5dcfd4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::getLast </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the last element </dd></dl>

</div>
</div>
<a class="anchor" id="af7f6350efd46c7f4dc7300c26afdd001"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T const&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::getLast </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the last element </dd></dl>

</div>
</div>
<a class="anchor" id="a2770ed9f41c41e7063a73410b34a7b12"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::getMaxSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the maximum array size </dd></dl>

</div>
</div>
<a class="anchor" id="a3597a22d6e54ffa1b10a7d2722028273"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::getSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the array size </dd></dl>

</div>
</div>
<a class="anchor" id="a014e1b208f5fda5335ea4b11e8f9c9e4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::isEmpty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>if the array is empty </dd></dl>

</div>
</div>
<a class="anchor" id="acdf188605ad6e9c864aa034bd8e8b4d7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::operator!= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a>&lt; T, Size &gt; const &amp;&#160;</td>
          <td class="paramname"><em>arr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Inequality test between this and arr </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">arr</td><td>the other array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<a class="anchor" id="adbd441f61e6a9784dc1e7c1055639738"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a>&lt; T, Size &gt; const &amp;&#160;</td>
          <td class="paramname"><em>arr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Copy assignment of arr into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">arr</td><td>the array to copy into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="ae98007f6d8933d8b91d9e59767887684"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a>&lt; T, Size &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>arr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Move assignment of arr into this, leaving o empty </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">arr</td><td>the array to move into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="ac3841ae70203b4f1d773a9fe65020970"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
<div class="memtemplate">
template&lt;typename U  = T, typename std::enable_if&lt;!std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a>&lt; T, Size &gt; const &amp;&#160;</td>
          <td class="paramname"><em>arr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Equality test between this and arr </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">arr</td><td>the other array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<a class="anchor" id="ac3841ae70203b4f1d773a9fe65020970"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
<div class="memtemplate">
template&lt;typename U  = T, typename std::enable_if&lt; std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a>&lt; T, Size &gt; const &amp;&#160;</td>
          <td class="paramname"><em>arr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Equality test between this and arr </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">arr</td><td>the other array </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<a class="anchor" id="a039cf013fe61d56bc12c554eda5d2fc6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element without bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the element index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="a9e804b2d067e38705651da6a72cb32e7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T const&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element without bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the element index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="a61ee3b447d3335c18bdd833a5debc3a0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a194595bf8eda8b81742a7b3ec59d2e47">ReverseIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::rbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a reverse iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a8b5556e668fa54a50c3f30bb29c2b431"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">ConstReverseIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::rbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const reverse iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a0406aa5d43b160d9d733897906fcdb6d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php#a194595bf8eda8b81742a7b3ec59d2e47">ReverseIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::rend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a reverse iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a00e78dfd53d0b91167e778d99ca47e4b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">ConstReverseIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::rend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const reverse iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a72ed3c0b6c1ccbf335d9ef26c0e7e074"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">Array</a>&lt; T, Size &gt; &amp;&#160;</td>
          <td class="paramname"><em>arr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Swap this data with arr data </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">arr</td><td>the container to swap with </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad8ecae20e4a7da25f9067f2c9011133f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">String</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_array.php">NRE::Utility::Array</a>&lt; T, Size &gt;::toString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Convert the object into a string representation </p><dl class="section return"><dt>Returns</dt><dd>the converted object </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/mnt/c/Users/abell/Documents/GitHub/NRE-Utility/src/Utility/Array/<a class="el" href="_n_r_e___array_8hpp_source.php">NRE_Array.hpp</a></li>
</ul>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.8-->
<!-- start footer part -->
</div>
</div>
</div>
</div>
</body>
</html>
