<!-- HTML header for doxygen 1.8.8-->
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <!-- For Mobile Devices -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
        <meta name="generator" content="Doxygen 1.8.11"/>
        <script type="text/javascript" src="../../js/jquery-2.1.1.min.js"></script>
        <title>NRE-Utility: NRE::Utility::HashTable&lt; Key, T, StoreHash, Hash, KeyEqual &gt; Class Template Reference</title>
        <!--<link href="tabs.css" rel="stylesheet" type="text/css"/>-->
        <script type="text/javascript" src="dynsections.js"></script>
        <link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <link href='https://fonts.googleapis.com/css?family=Roboto+Slab' rel='stylesheet' type='text/css'>
        <?php
            include '../../php/navigation.php';
            if (!isset($_COOKIE["theme"]) || $_COOKIE["theme"] == "dark") {
                echo '<link href="../../css/dark/bootstrap.css" rel="stylesheet">';
            } else {
                echo '<link href="../../css/light/bootstrap.css" rel="stylesheet">';
            }
        ?>
        <script src="../../js/bootstrap.min.js"></script>
        <script type="text/javascript" src="doxy-boot.js"></script>
    </head>
    <body>
        <div class="container-fluid">
            <header class="page-header">
                <a href="../../../index.php">
                    <img src="../../img/Logo.png" class="logo img-responsive"/>
                </a>
            </header>
            <?php addNavigationBarInl(false); ?>
            <div id="top" class="row"><!-- do not remove this div, it is closed by doxygen! -->
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-body">
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespace_n_r_e.php">NRE</a></li><li class="navelem"><b>Utility</b></li><li class="navelem"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="class_n_r_e_1_1_utility_1_1_hash_table-members.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">NRE::Utility::HashTable&lt; Key, T, StoreHash, Hash, KeyEqual &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Based on TSL Robin Hash, An hashtable used in map and set, an associative container using linear probing, robin hood and shift back optimisation.  
 <a href="class_n_r_e_1_1_utility_1_1_hash_table.php#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_n_r_e___hash_table_8hpp_source.php">NRE_HashTable.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for NRE::Utility::HashTable&lt; Key, T, StoreHash, Hash, KeyEqual &gt;:</div>
<div class="dyncontent">
 <div class="center">
  <img src="class_n_r_e_1_1_utility_1_1_hash_table.png" usemap="#NRE::Utility::HashTable_3C_20Key_2C_20T_2C_20StoreHash_2C_20Hash_2C_20KeyEqual_20_3E_map" alt=""/>
  <map id="NRE::Utility::HashTable_3C_20Key_2C_20T_2C_20StoreHash_2C_20Hash_2C_20KeyEqual_20_3E_map" name="NRE::Utility::HashTable&lt; Key, T, StoreHash, Hash, KeyEqual &gt;_map">
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Hash table forward iterator.  <a href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Hash table local forward iterator.  <a href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a2ee9ddd5b2feefe7a6c0fde78a814e84"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2ee9ddd5b2feefe7a6c0fde78a814e84"></a>
typedef <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt; Key, T &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>ValueType</b></td></tr>
<tr class="separator:a2ee9ddd5b2feefe7a6c0fde78a814e84"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2116ad8e758d32d44e9948eb6fe53b75"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2116ad8e758d32d44e9948eb6fe53b75"></a>
typedef <a class="el" href="class_n_r_e_1_1_utility_1_1_bucket_entry.php">BucketEntry</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a>, STORE_HASH &gt;::DistanceType&#160;</td><td class="memItemRight" valign="bottom"><b>DistanceType</b></td></tr>
<tr class="separator:a2116ad8e758d32d44e9948eb6fe53b75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bb910fdc86e890e88208e90f36547cd"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a></td></tr>
<tr class="separator:a6bb910fdc86e890e88208e90f36547cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a7bff12e9a945c3e4993b79aea09996"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a>&lt; const <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a></td></tr>
<tr class="separator:a8a7bff12e9a945c3e4993b79aea09996"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add5494be99938c1e6fb845ce18d82720"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#add5494be99938c1e6fb845ce18d82720">LocalIterator</a></td></tr>
<tr class="separator:add5494be99938c1e6fb845ce18d82720"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7253be34344ac02fa8932ba9ca03d60"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae7253be34344ac02fa8932ba9ca03d60"></a>
typedef <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a>&lt; const <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>ConstLocalIterator</b></td></tr>
<tr class="separator:ae7253be34344ac02fa8932ba9ca03d60"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a7cf30034932ed0e72ec4c1f119fef2a7"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a7cf30034932ed0e72ec4c1f119fef2a7">HashTable</a> (std::size_t bucketCount, Hash const &amp;hasher, KeyEqual const &amp;equal)</td></tr>
<tr class="separator:a7cf30034932ed0e72ec4c1f119fef2a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06d89210c3d3440f1b1efa13c94566eb"><td class="memTemplParams" colspan="2">template&lt;class InputIterator &gt; </td></tr>
<tr class="memitem:a06d89210c3d3440f1b1efa13c94566eb"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a06d89210c3d3440f1b1efa13c94566eb">HashTable</a> (InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a0d7422293fc792de6ed588faa697f62a">begin</a>, InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a787484b85f72307d0d05d58e0c6f5a99">end</a>, std::size_t bucketCount, Hash const &amp;hasher, KeyEqual const &amp;equal)</td></tr>
<tr class="separator:a06d89210c3d3440f1b1efa13c94566eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9b029f5d32dffea7b8528b1093ee45d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#ac9b029f5d32dffea7b8528b1093ee45d">HashTable</a> (std::initializer_list&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> &gt; list, std::size_t bucketCount, Hash const &amp;hasher, KeyEqual const &amp;equal)</td></tr>
<tr class="separator:ac9b029f5d32dffea7b8528b1093ee45d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb9632e01a890fac26ff1ee5da254ede"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#acb9632e01a890fac26ff1ee5da254ede">HashTable</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a> const &amp;table)</td></tr>
<tr class="separator:acb9632e01a890fac26ff1ee5da254ede"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c0fcb351d91b1dba1a56da78872ba4c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a1c0fcb351d91b1dba1a56da78872ba4c">HashTable</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a> &amp;&amp;table)</td></tr>
<tr class="separator:a1c0fcb351d91b1dba1a56da78872ba4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3647d357effc00ed8923c51d0a289532"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a3647d357effc00ed8923c51d0a289532">get</a> (Key const &amp;k)</td></tr>
<tr class="separator:a3647d357effc00ed8923c51d0a289532"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f662c1b35eeeb3b21803cc09da57a68"><td class="memItemLeft" align="right" valign="top">T const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a9f662c1b35eeeb3b21803cc09da57a68">get</a> (Key const &amp;k) const </td></tr>
<tr class="separator:a9f662c1b35eeeb3b21803cc09da57a68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a474ed6cf69be55051407fd97b9f43291"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a474ed6cf69be55051407fd97b9f43291">getBucketCount</a> () const </td></tr>
<tr class="separator:a474ed6cf69be55051407fd97b9f43291"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e1063573152abcbcd0c13a1a0b44b6b"><td class="memItemLeft" align="right" valign="top">constexpr std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a3e1063573152abcbcd0c13a1a0b44b6b">getMaxBucketCount</a> () const </td></tr>
<tr class="separator:a3e1063573152abcbcd0c13a1a0b44b6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a996367b0cce88fef81ad7c4d37e9d9b1"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a996367b0cce88fef81ad7c4d37e9d9b1">getSize</a> () const </td></tr>
<tr class="separator:a996367b0cce88fef81ad7c4d37e9d9b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6708243de7ed2f317a52c1b8857fd2f9"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6708243de7ed2f317a52c1b8857fd2f9">getMaxLoadFactor</a> () const </td></tr>
<tr class="separator:a6708243de7ed2f317a52c1b8857fd2f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abde8cd6c6565ae41aebacef1731f025c"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#abde8cd6c6565ae41aebacef1731f025c">getLoadFactor</a> () const </td></tr>
<tr class="separator:abde8cd6c6565ae41aebacef1731f025c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73d716282b3bc77081d367bcd3cd94f3"><td class="memItemLeft" align="right" valign="top">constexpr std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a73d716282b3bc77081d367bcd3cd94f3">getMaxSize</a> () const </td></tr>
<tr class="separator:a73d716282b3bc77081d367bcd3cd94f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45373465015b6e8b62f3468893eab986"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a45373465015b6e8b62f3468893eab986">isEmpty</a> () const </td></tr>
<tr class="separator:a45373465015b6e8b62f3468893eab986"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe4566d5ed7d8d0613a6cf2f23b897b6"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#afe4566d5ed7d8d0613a6cf2f23b897b6">getCount</a> (Key const &amp;k) const </td></tr>
<tr class="separator:afe4566d5ed7d8d0613a6cf2f23b897b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7fb712d1035ffccb6d4742e03543820"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#aa7fb712d1035ffccb6d4742e03543820">getBucket</a> (Key const &amp;k) const </td></tr>
<tr class="separator:aa7fb712d1035ffccb6d4742e03543820"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b9bcfbb0245c8c43e473da85efb3e5e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6b9bcfbb0245c8c43e473da85efb3e5e">setMaxLoadFactor</a> (float factor)</td></tr>
<tr class="separator:a6b9bcfbb0245c8c43e473da85efb3e5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d7422293fc792de6ed588faa697f62a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a0d7422293fc792de6ed588faa697f62a">begin</a> ()</td></tr>
<tr class="separator:a0d7422293fc792de6ed588faa697f62a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac014e176af855589c3ee079f62eebbdc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#ac014e176af855589c3ee079f62eebbdc">begin</a> () const </td></tr>
<tr class="separator:ac014e176af855589c3ee079f62eebbdc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a0a75126dce57ebdad521ed8f947cc2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a7a0a75126dce57ebdad521ed8f947cc2">cbegin</a> () const </td></tr>
<tr class="separator:a7a0a75126dce57ebdad521ed8f947cc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a787484b85f72307d0d05d58e0c6f5a99"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a787484b85f72307d0d05d58e0c6f5a99">end</a> ()</td></tr>
<tr class="separator:a787484b85f72307d0d05d58e0c6f5a99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06b052948de9e83351e5d347f4fc43df"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a06b052948de9e83351e5d347f4fc43df">end</a> () const </td></tr>
<tr class="separator:a06b052948de9e83351e5d347f4fc43df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adea81b542a38e6a493025b3065529bf9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#adea81b542a38e6a493025b3065529bf9">cend</a> () const </td></tr>
<tr class="separator:adea81b542a38e6a493025b3065529bf9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add3a790a3834b7b59954cb5bcae23b57"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#add5494be99938c1e6fb845ce18d82720">LocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#add3a790a3834b7b59954cb5bcae23b57">begin</a> (std::size_t index)</td></tr>
<tr class="separator:add3a790a3834b7b59954cb5bcae23b57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60c4f9e6eea13836da6698c7d35cdc8b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a60c4f9e6eea13836da6698c7d35cdc8b">begin</a> (std::size_t index) const </td></tr>
<tr class="separator:a60c4f9e6eea13836da6698c7d35cdc8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67d524f3c780f563024953cca988ef25"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a67d524f3c780f563024953cca988ef25">cbegin</a> (std::size_t index) const </td></tr>
<tr class="separator:a67d524f3c780f563024953cca988ef25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34f3cf1c928cc0a2bfea0b6410cf555e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#add5494be99938c1e6fb845ce18d82720">LocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a34f3cf1c928cc0a2bfea0b6410cf555e">end</a> (std::size_t index)</td></tr>
<tr class="separator:a34f3cf1c928cc0a2bfea0b6410cf555e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a288177f9c0a6370d0a6f0e6591785210"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a288177f9c0a6370d0a6f0e6591785210">end</a> (std::size_t index) const </td></tr>
<tr class="separator:a288177f9c0a6370d0a6f0e6591785210"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab01ebf2eaa5642f5bb4fc06046a1c127"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#ab01ebf2eaa5642f5bb4fc06046a1c127">cend</a> (std::size_t index) const </td></tr>
<tr class="separator:ab01ebf2eaa5642f5bb4fc06046a1c127"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66703b30dace0f0037c0c073ea86bcfb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a>, bool &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a66703b30dace0f0037c0c073ea86bcfb">insert</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> const &amp;value)</td></tr>
<tr class="separator:a66703b30dace0f0037c0c073ea86bcfb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41dadf71b92030ce18a516b47aac0dec"><td class="memTemplParams" colspan="2">template&lt;class P &gt; </td></tr>
<tr class="memitem:a41dadf71b92030ce18a516b47aac0dec"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a>, bool &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a41dadf71b92030ce18a516b47aac0dec">insert</a> (P &amp;&amp;value)</td></tr>
<tr class="separator:a41dadf71b92030ce18a516b47aac0dec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68220fdbd445d84eb5de05142d4ff673"><td class="memTemplParams" colspan="2">template&lt;class InputIterator &gt; </td></tr>
<tr class="memitem:a68220fdbd445d84eb5de05142d4ff673"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a68220fdbd445d84eb5de05142d4ff673">insert</a> (InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a0d7422293fc792de6ed588faa697f62a">begin</a>, InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a787484b85f72307d0d05d58e0c6f5a99">end</a>)</td></tr>
<tr class="separator:a68220fdbd445d84eb5de05142d4ff673"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a080a59f1382f9da0915649efe07abd0a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a080a59f1382f9da0915649efe07abd0a">insert</a> (std::initializer_list&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> &gt; list)</td></tr>
<tr class="separator:a080a59f1382f9da0915649efe07abd0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a598485b64ebd733f0c4ab2b910c9668a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a598485b64ebd733f0c4ab2b910c9668a">insertHint</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a> hint, <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> const &amp;value)</td></tr>
<tr class="separator:a598485b64ebd733f0c4ab2b910c9668a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63026c7994f18fd5ed2213a6e0e6950e"><td class="memTemplParams" colspan="2">template&lt;class P &gt; </td></tr>
<tr class="memitem:a63026c7994f18fd5ed2213a6e0e6950e"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a63026c7994f18fd5ed2213a6e0e6950e">insertHint</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a> hint, P &amp;&amp;value)</td></tr>
<tr class="separator:a63026c7994f18fd5ed2213a6e0e6950e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb5a8a6d01e1b7fc101badb89dbb7110"><td class="memTemplParams" colspan="2">template&lt;class... Args&gt; </td></tr>
<tr class="memitem:adb5a8a6d01e1b7fc101badb89dbb7110"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a>, bool &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#adb5a8a6d01e1b7fc101badb89dbb7110">emplace</a> (Args &amp;&amp;...args)</td></tr>
<tr class="separator:adb5a8a6d01e1b7fc101badb89dbb7110"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b0cb2b9f1c5bd2c5b050da8530b3481"><td class="memTemplParams" colspan="2">template&lt;class... Args&gt; </td></tr>
<tr class="memitem:a4b0cb2b9f1c5bd2c5b050da8530b3481"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a4b0cb2b9f1c5bd2c5b050da8530b3481">emplaceHint</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a> hint, Args &amp;&amp;...args)</td></tr>
<tr class="separator:a4b0cb2b9f1c5bd2c5b050da8530b3481"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6836d4ed4290e458aeb400b549eb12b4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6836d4ed4290e458aeb400b549eb12b4">clear</a> ()</td></tr>
<tr class="separator:a6836d4ed4290e458aeb400b549eb12b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7dd4e0fda1197d325f1ecf35ae3409a0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a7dd4e0fda1197d325f1ecf35ae3409a0">swap</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a> &amp;table)</td></tr>
<tr class="separator:a7dd4e0fda1197d325f1ecf35ae3409a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8769a3698acd3327234acdaacf516e1c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8769a3698acd3327234acdaacf516e1c">reserve</a> (std::size_t count)</td></tr>
<tr class="separator:a8769a3698acd3327234acdaacf516e1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf083637ad2a911ab9e8a315d3883fb8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#aaf083637ad2a911ab9e8a315d3883fb8">rehash</a> (std::size_t count)</td></tr>
<tr class="separator:aaf083637ad2a911ab9e8a315d3883fb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40baf575229d8403659c88efda1f0e12"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a40baf575229d8403659c88efda1f0e12">equalRange</a> (Key const &amp;key)</td></tr>
<tr class="separator:a40baf575229d8403659c88efda1f0e12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fd7acb114aa64c43204b3c06264703a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a1fd7acb114aa64c43204b3c06264703a">equalRange</a> (Key const &amp;key) const </td></tr>
<tr class="separator:a1fd7acb114aa64c43204b3c06264703a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8adf51f26bb8fa22bf374f275fa29be5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8adf51f26bb8fa22bf374f275fa29be5">find</a> (Key const &amp;k)</td></tr>
<tr class="separator:a8adf51f26bb8fa22bf374f275fa29be5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa67a436dcc9ac01bfe002ad495fe3946"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#aa67a436dcc9ac01bfe002ad495fe3946">find</a> (Key const &amp;k) const </td></tr>
<tr class="separator:aa67a436dcc9ac01bfe002ad495fe3946"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11ea8d7e21528cf483d24df9d18b6fe3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a11ea8d7e21528cf483d24df9d18b6fe3">erase</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a> pos)</td></tr>
<tr class="separator:a11ea8d7e21528cf483d24df9d18b6fe3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bb3abf51d7a07e8bb02774bb80395eb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb3abf51d7a07e8bb02774bb80395eb">erase</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a> pos)</td></tr>
<tr class="separator:a6bb3abf51d7a07e8bb02774bb80395eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5cb2161fab6a30ac43a2072e5d9adfc8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a5cb2161fab6a30ac43a2072e5d9adfc8">erase</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a0d7422293fc792de6ed588faa697f62a">begin</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a787484b85f72307d0d05d58e0c6f5a99">end</a>)</td></tr>
<tr class="separator:a5cb2161fab6a30ac43a2072e5d9adfc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a2500392ede1727b3e9952cec3bbc12"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a2500392ede1727b3e9952cec3bbc12">erase</a> (Key const &amp;k)</td></tr>
<tr class="separator:a8a2500392ede1727b3e9952cec3bbc12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b4769b1d8dd9f454dfe20c8f8aeb414"><td class="memItemLeft" align="right" valign="top">Hash&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8b4769b1d8dd9f454dfe20c8f8aeb414">getHash</a> () const </td></tr>
<tr class="separator:a8b4769b1d8dd9f454dfe20c8f8aeb414"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac083ea69598b0707e766e34f82543c4"><td class="memItemLeft" align="right" valign="top">KeyEqual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#aac083ea69598b0707e766e34f82543c4">getKeyEqual</a> () const </td></tr>
<tr class="separator:aac083ea69598b0707e766e34f82543c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c4f3089307b114f559f24eb3ac89046"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a9c4f3089307b114f559f24eb3ac89046">operator=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a> const &amp;table)</td></tr>
<tr class="separator:a9c4f3089307b114f559f24eb3ac89046"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ac23ea4e9bd5007877b20e2923cf38e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a9ac23ea4e9bd5007877b20e2923cf38e">operator=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a> &amp;&amp;table)</td></tr>
<tr class="separator:a9ac23ea4e9bd5007877b20e2923cf38e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d0898ff37a00e8d9ea46b980cd31984"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8d0898ff37a00e8d9ea46b980cd31984">operator[]</a> (Key const &amp;k)</td></tr>
<tr class="separator:a8d0898ff37a00e8d9ea46b980cd31984"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c48e39dd11c3095d88dd62ab4fcea41"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a5c48e39dd11c3095d88dd62ab4fcea41">operator[]</a> (Key &amp;&amp;k)</td></tr>
<tr class="separator:a5c48e39dd11c3095d88dd62ab4fcea41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3fb017f9a554b8e1d644077cfdcbba7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#ad3fb017f9a554b8e1d644077cfdcbba7">toString</a> () const </td></tr>
<tr class="separator:ad3fb017f9a554b8e1d644077cfdcbba7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:a00d7b0db04c8c757eb43cfe71d0e9134"><td class="memItemLeft" align="right" valign="top">static const std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a00d7b0db04c8c757eb43cfe71d0e9134">DEFAULT_BUCKET_COUNT</a> = 0</td></tr>
<tr class="separator:a00d7b0db04c8c757eb43cfe71d0e9134"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt;<br />
class NRE::Utility::HashTable&lt; Key, T, StoreHash, Hash, KeyEqual &gt;</h3>

<p>Based on TSL Robin Hash, An hashtable used in map and set, an associative container using linear probing, robin hood and shift back optimisation. </p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a class="anchor" id="a8a7bff12e9a945c3e4993b79aea09996"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a>&lt;const <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a>&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Shortcut to hide Iterator implementation </p>

</div>
</div>
<a class="anchor" id="a6bb910fdc86e890e88208e90f36547cd"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a>&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a>&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Shortcut to hide ConstIterator implementation </p>

</div>
</div>
<a class="anchor" id="add5494be99938c1e6fb845ce18d82720"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a>&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a>&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#add5494be99938c1e6fb845ce18d82720">LocalIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Shortcut to hide ConstIterator implementation </p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a7cf30034932ed0e72ec4c1f119fef2a7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a> </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>bucketCount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Hash const &amp;&#160;</td>
          <td class="paramname"><em>hasher</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">KeyEqual const &amp;&#160;</td>
          <td class="paramname"><em>equal</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct an empty hashtable with a number of bucket </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bucketCount</td><td>the base bucket count </td></tr>
    <tr><td class="paramname">hasher</td><td>the hash function used in the table </td></tr>
    <tr><td class="paramname">equal</td><td>the equal function used in the table </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a06d89210c3d3440f1b1efa13c94566eb"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
<div class="memtemplate">
template&lt;class InputIterator &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a> </td>
          <td>(</td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>bucketCount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Hash const &amp;&#160;</td>
          <td class="paramname"><em>hasher</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">KeyEqual const &amp;&#160;</td>
          <td class="paramname"><em>equal</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct an hashtable with a number of bucket and filled with elements in the given range </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>the begin iterator </td></tr>
    <tr><td class="paramname">end</td><td>the end iterator </td></tr>
    <tr><td class="paramname">bucketCount</td><td>the base bucket count </td></tr>
    <tr><td class="paramname">hasher</td><td>the hash function used in the table </td></tr>
    <tr><td class="paramname">equal</td><td>the equal function used in the table </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac9b029f5d32dffea7b8528b1093ee45d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a> </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> &gt;&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>bucketCount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Hash const &amp;&#160;</td>
          <td class="paramname"><em>hasher</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">KeyEqual const &amp;&#160;</td>
          <td class="paramname"><em>equal</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct an hashtable with a number of bucket and filled with elements in the given list </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>the list to fill the table with </td></tr>
    <tr><td class="paramname">bucketCount</td><td>the base bucket count </td></tr>
    <tr><td class="paramname">hasher</td><td>the hash function used in the table </td></tr>
    <tr><td class="paramname">equal</td><td>the equal function used in the table </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="acb9632e01a890fac26ff1ee5da254ede"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt; const &amp;&#160;</td>
          <td class="paramname"><em>table</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy table into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">table</td><td>the table to copy </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a1c0fcb351d91b1dba1a56da78872ba4c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>table</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Move table into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">table</td><td>the table to move </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a0d7422293fc792de6ed588faa697f62a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>an iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="ac014e176af855589c3ee079f62eebbdc"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="add3a790a3834b7b59954cb5bcae23b57"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#add5494be99938c1e6fb845ce18d82720">LocalIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::begin </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Grab an iterator on a given bucket </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the bucket index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the bucket </dd></dl>

</div>
</div>
<a class="anchor" id="a60c4f9e6eea13836da6698c7d35cdc8b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::begin </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Grab a const iterator on a given bucket </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the bucket index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the bucket </dd></dl>

</div>
</div>
<a class="anchor" id="a7a0a75126dce57ebdad521ed8f947cc2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::cbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a67d524f3c780f563024953cca988ef25"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::cbegin </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Grab a const iterator on a given bucket </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the bucket index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the bucket </dd></dl>

</div>
</div>
<a class="anchor" id="adea81b542a38e6a493025b3065529bf9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::cend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="ab01ebf2eaa5642f5bb4fc06046a1c127"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::cend </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Grab a const iterator on a given bucket end </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the bucket index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the bucket end </dd></dl>

</div>
</div>
<a class="anchor" id="a6836d4ed4290e458aeb400b549eb12b4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Clear all buckets </p>

</div>
</div>
<a class="anchor" id="adb5a8a6d01e1b7fc101badb89dbb7110"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
<div class="memtemplate">
template&lt;class... Args&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a>, bool&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::emplace </td>
          <td>(</td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Emplace an element using the given elements </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">args</td><td>the parameter pack used to create the inserted pair </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pair containing an iterator on the inserted element, and a boolean telling if the insertion has been done </dd></dl>

</div>
</div>
<a class="anchor" id="a4b0cb2b9f1c5bd2c5b050da8530b3481"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
<div class="memtemplate">
template&lt;class... Args&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::emplaceHint </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>hint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Emplace an element using the given elements </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">hint</td><td>the iterator used as a hint to emplace the element </td></tr>
    <tr><td class="paramname">args</td><td>the parameter pack used to create the inserted pair </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator on the inserted element </dd></dl>

</div>
</div>
<a class="anchor" id="a787484b85f72307d0d05d58e0c6f5a99"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>an iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a06b052948de9e83351e5d347f4fc43df"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a34f3cf1c928cc0a2bfea0b6410cf555e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#add5494be99938c1e6fb845ce18d82720">LocalIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::end </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Grab an iterator on a given bucket end </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the bucket index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the bucket end </dd></dl>

</div>
</div>
<a class="anchor" id="a288177f9c0a6370d0a6f0e6591785210"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::end </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Grab a const iterator on a given bucket end </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the bucket index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the bucket end </dd></dl>

</div>
</div>
<a class="anchor" id="a40baf575229d8403659c88efda1f0e12"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a>&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::equalRange </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find a range of iterator containing all elements with the given key, both end if not found </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>the key to search </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pair of iterator </dd></dl>

</div>
</div>
<a class="anchor" id="a1fd7acb114aa64c43204b3c06264703a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a>&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::equalRange </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find a range of iterator containing all elements with the given key, both end if not found </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>the key to search </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pair of iterator </dd></dl>

</div>
</div>
<a class="anchor" id="a11ea8d7e21528cf483d24df9d18b6fe3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a>&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase the element pointed by the iterator </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>the iterator on the erased element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator after the erased element </dd></dl>

</div>
</div>
<a class="anchor" id="a6bb3abf51d7a07e8bb02774bb80395eb"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase the element pointed by the iterator </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>the iterator on the erased element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator after the erased element </dd></dl>

</div>
</div>
<a class="anchor" id="a5cb2161fab6a30ac43a2072e5d9adfc8"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase the element in the given range </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>the begin iterator for erasing </td></tr>
    <tr><td class="paramname">end</td><td>the end iterator for erasing </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator after the last erased element </dd></dl>

</div>
</div>
<a class="anchor" id="a8a2500392ede1727b3e9952cec3bbc12"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::erase </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase all element with the given key </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key to search and erase </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the number of erased elements </dd></dl>

</div>
</div>
<a class="anchor" id="a8adf51f26bb8fa22bf374f275fa29be5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::find </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find the element corresponding with the given key </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key to search </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator pointing on the element, or end if not found </dd></dl>

</div>
</div>
<a class="anchor" id="aa67a436dcc9ac01bfe002ad495fe3946"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::find </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find the element corresponding with the given key </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key to search </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator pointing on the element, or end if not found </dd></dl>

</div>
</div>
<a class="anchor" id="a3647d357effc00ed8923c51d0a289532"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::get </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element with bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the element key </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="a9f662c1b35eeeb3b21803cc09da57a68"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T const&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::get </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element with bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the element key </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="aa7fb712d1035ffccb6d4742e03543820"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getBucket </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get the bucket index from a given key </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key to search </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding bucket </dd></dl>

</div>
</div>
<a class="anchor" id="a474ed6cf69be55051407fd97b9f43291"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getBucketCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the number of buckets in the table </dd></dl>

</div>
</div>
<a class="anchor" id="afe4566d5ed7d8d0613a6cf2f23b897b6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getCount </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find the number of element with the given key </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key to search </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the number of corresponding elements </dd></dl>

</div>
</div>
<a class="anchor" id="a8b4769b1d8dd9f454dfe20c8f8aeb414"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">Hash <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getHash </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the hash function </dd></dl>

</div>
</div>
<a class="anchor" id="aac083ea69598b0707e766e34f82543c4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">KeyEqual <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getKeyEqual </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the key equal function </dd></dl>

</div>
</div>
<a class="anchor" id="abde8cd6c6565ae41aebacef1731f025c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">float <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getLoadFactor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the current load factor </dd></dl>

</div>
</div>
<a class="anchor" id="a3e1063573152abcbcd0c13a1a0b44b6b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getMaxBucketCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the maximum number of bucket in the table </dd></dl>

</div>
</div>
<a class="anchor" id="a6708243de7ed2f317a52c1b8857fd2f9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">float <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getMaxLoadFactor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the maximum load factor </dd></dl>

</div>
</div>
<a class="anchor" id="a73d716282b3bc77081d367bcd3cd94f3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getMaxSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the maximum hash table size </dd></dl>

</div>
</div>
<a class="anchor" id="a996367b0cce88fef81ad7c4d37e9d9b1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the number of elements in the table </dd></dl>

</div>
</div>
<a class="anchor" id="a66703b30dace0f0037c0c073ea86bcfb"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a>, bool&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> const &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert the given value in the table </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the pair with the key and the corresponding element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pair containing an iterator on the inserted element, and a boolean telling if the insertion has been done </dd></dl>

</div>
</div>
<a class="anchor" id="a41dadf71b92030ce18a516b47aac0dec"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
<div class="memtemplate">
template&lt;class P &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a>, bool&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::insert </td>
          <td>(</td>
          <td class="paramtype">P &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert the given value in the table </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the pair with the key and the corresponding element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pair containing an iterator on the inserted element, and a boolean telling if the insertion has been done </dd></dl>

</div>
</div>
<a class="anchor" id="a68220fdbd445d84eb5de05142d4ff673"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
<div class="memtemplate">
template&lt;class InputIterator &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::insert </td>
          <td>(</td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert elements in the given range </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>the begin iterator </td></tr>
    <tr><td class="paramname">end</td><td>the end iterator </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a080a59f1382f9da0915649efe07abd0a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::insert </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> &gt;&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert elements in the given list </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>the list of value to insert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a598485b64ebd733f0c4ab2b910c9668a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::insertHint </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>hint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> const &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert the given value in the table using the hint as a suggestion for the search start </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">hint</td><td>the hint used for the search </td></tr>
    <tr><td class="paramname">value</td><td>the value to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator on the inserted element </dd></dl>

</div>
</div>
<a class="anchor" id="a63026c7994f18fd5ed2213a6e0e6950e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
<div class="memtemplate">
template&lt;class P &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::insertHint </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>hint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">P &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert the given value in the table using the hint as a suggestion for the search start </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">hint</td><td>the hint used for the search </td></tr>
    <tr><td class="paramname">value</td><td>the value to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator on the inserted element </dd></dl>

</div>
</div>
<a class="anchor" id="a45373465015b6e8b62f3468893eab986"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::isEmpty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>if the table is empty </dd></dl>

</div>
</div>
<a class="anchor" id="a9c4f3089307b114f559f24eb3ac89046"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt; const &amp;&#160;</td>
          <td class="paramname"><em>table</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy table into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">table</td><td>the hash table to copy into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a9ac23ea4e9bd5007877b20e2923cf38e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>table</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Move table into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">table</td><td>the hash table to move into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a8d0898ff37a00e8d9ea46b980cd31984"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Try to access the element designed by the given key, if not found insert a default one </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key used for access </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the found/inserted element </dd></dl>

</div>
</div>
<a class="anchor" id="a5c48e39dd11c3095d88dd62ab4fcea41"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">Key &amp;&amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Try to access the element designed by the given key, if not found insert a default one </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key used for access </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the found/inserted element </dd></dl>

</div>
</div>
<a class="anchor" id="aaf083637ad2a911ab9e8a315d3883fb8"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::rehash </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Reserve at least coutn bucket in the table and rehash the table </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the number of desired bucket </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8769a3698acd3327234acdaacf516e1c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::reserve </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Reserve at least count bucket in the table and rehash the table </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the number of desired bucket </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6b9bcfbb0245c8c43e473da85efb3e5e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::setMaxLoadFactor </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>factor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set the new max load factor, must be between 0.0 and 1.0 </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">factor</td><td>the new factor </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7dd4e0fda1197d325f1ecf35ae3409a0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt; &amp;&#160;</td>
          <td class="paramname"><em>table</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Swap the hash table with another hash table </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">table</td><td>the other hash table </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad3fb017f9a554b8e1d644077cfdcbba7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">String</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::toString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Convert the object into a string representation </p><dl class="section return"><dt>Returns</dt><dd>the converted object </dd></dl>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="a00d7b0db04c8c757eb43cfe71d0e9134"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::DEFAULT_BUCKET_COUNT = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>The default bucket count </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/mnt/c/Users/abell/Documents/GitHub/NRE-Utility/src/Utility/HashTable/<a class="el" href="_n_r_e___hash_table_8hpp_source.php">NRE_HashTable.hpp</a></li>
</ul>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.8-->
<!-- start footer part -->
</div>
</div>
</div>
</div>
</body>
</html>
