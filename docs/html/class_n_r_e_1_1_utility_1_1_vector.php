<!-- HTML header for doxygen 1.8.8-->
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <!-- For Mobile Devices -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
        <meta name="generator" content="Doxygen 1.8.11"/>
        <script type="text/javascript" src="../../js/jquery-2.1.1.min.js"></script>
        <title>NRE-Utility: NRE::Utility::Vector&lt; T &gt; Class Template Reference</title>
        <!--<link href="tabs.css" rel="stylesheet" type="text/css"/>-->
        <script type="text/javascript" src="dynsections.js"></script>
        <link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <link href='https://fonts.googleapis.com/css?family=Roboto+Slab' rel='stylesheet' type='text/css'>
        <?php
            include '../../php/navigation.php';
            if (!isset($_COOKIE["theme"]) || $_COOKIE["theme"] == "dark") {
                echo '<link href="../../css/dark/bootstrap.css" rel="stylesheet">';
            } else {
                echo '<link href="../../css/light/bootstrap.css" rel="stylesheet">';
            }
        ?>
        <script src="../../js/bootstrap.min.js"></script>
        <script type="text/javascript" src="doxy-boot.js"></script>
    </head>
    <body>
        <div class="container-fluid">
            <header class="page-header">
                <a href="../../../index.php">
                    <img src="../../img/Logo.png" class="logo img-responsive"/>
                </a>
            </header>
            <?php addNavigationBarInl(false); ?>
            <div id="top" class="row"><!-- do not remove this div, it is closed by doxygen! -->
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-body">
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespace_n_r_e.php">NRE</a></li><li class="navelem"><b>Utility</b></li><li class="navelem"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="class_n_r_e_1_1_utility_1_1_vector-members.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">NRE::Utility::Vector&lt; T &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A dynamic array, guarantee to be in contiguous memory.  
 <a href="class_n_r_e_1_1_utility_1_1_vector.php#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_n_r_e___vector_8hpp_source.php">NRE_Vector.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a4f62eb0eba61b38e5f6b03c60ea6a49c"><td class="memItemLeft" align="right" valign="top">typedef T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a4f62eb0eba61b38e5f6b03c60ea6a49c">Iterator</a></td></tr>
<tr class="separator:a4f62eb0eba61b38e5f6b03c60ea6a49c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00fbf24e911c0a9ccee4a3b0eac8e5b1"><td class="memItemLeft" align="right" valign="top">typedef const T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a></td></tr>
<tr class="separator:a00fbf24e911c0a9ccee4a3b0eac8e5b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52eee3309a729b97a0e9fd9e76a07fae"><td class="memItemLeft" align="right" valign="top">typedef std::reverse_iterator&lt; T * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a52eee3309a729b97a0e9fd9e76a07fae">ReverseIterator</a></td></tr>
<tr class="separator:a52eee3309a729b97a0e9fd9e76a07fae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac07e26d2eddf4431bdbbee83d80fd3e2"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac07e26d2eddf4431bdbbee83d80fd3e2"></a>
typedef std::reverse_iterator&lt; const T * &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>ConstReverseIterator</b></td></tr>
<tr class="separator:ac07e26d2eddf4431bdbbee83d80fd3e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad4013a6eedf95e4f7ba991da26c9bc5c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#ad4013a6eedf95e4f7ba991da26c9bc5c">Vector</a> ()</td></tr>
<tr class="separator:ad4013a6eedf95e4f7ba991da26c9bc5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5bc29c9c9d6a40ebc115809f47a04450"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a5bc29c9c9d6a40ebc115809f47a04450">Vector</a> (std::size_t count, T const &amp;value)</td></tr>
<tr class="separator:a5bc29c9c9d6a40ebc115809f47a04450"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98ccb1caf205e8d2d1a020312178e391"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a98ccb1caf205e8d2d1a020312178e391">Vector</a> (std::size_t count)</td></tr>
<tr class="separator:a98ccb1caf205e8d2d1a020312178e391"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd6844c8f8c1eb9bb166c5e8835dffa8"><td class="memTemplParams" colspan="2">template&lt;class InputIterator &gt; </td></tr>
<tr class="memitem:abd6844c8f8c1eb9bb166c5e8835dffa8"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#abd6844c8f8c1eb9bb166c5e8835dffa8">Vector</a> (InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a7aa353d783fef64406568550d4a883d1">begin</a>, InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a99c26a269e5bc0d86c3d2e048892354b">end</a>)</td></tr>
<tr class="separator:abd6844c8f8c1eb9bb166c5e8835dffa8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8aeb3526769c90067a39e4bb55a9522e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a8aeb3526769c90067a39e4bb55a9522e">Vector</a> (std::initializer_list&lt; T &gt; init)</td></tr>
<tr class="separator:a8aeb3526769c90067a39e4bb55a9522e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf301a43eaedc067e0221ac4800735f9"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#aaf301a43eaedc067e0221ac4800735f9">Vector</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> const &amp;vec)</td></tr>
<tr class="separator:aaf301a43eaedc067e0221ac4800735f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed6e950035f2718400f96c89e4aa9761"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#aed6e950035f2718400f96c89e4aa9761">Vector</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> &amp;&amp;vec)</td></tr>
<tr class="separator:aed6e950035f2718400f96c89e4aa9761"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab29b80e7a67b9530485c6771465bce28"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#ab29b80e7a67b9530485c6771465bce28">~Vector</a> ()</td></tr>
<tr class="separator:ab29b80e7a67b9530485c6771465bce28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf66396d0b55328ebc94c784a0df1202"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#acf66396d0b55328ebc94c784a0df1202">get</a> (std::size_t index)</td></tr>
<tr class="separator:acf66396d0b55328ebc94c784a0df1202"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c8c21b9db893e000a1266613745969a"><td class="memItemLeft" align="right" valign="top">T const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a9c8c21b9db893e000a1266613745969a">get</a> (std::size_t index) const </td></tr>
<tr class="separator:a9c8c21b9db893e000a1266613745969a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ae8d5da9a73f3528d1b65295b237c63"><td class="memItemLeft" align="right" valign="top">T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a2ae8d5da9a73f3528d1b65295b237c63">getData</a> ()</td></tr>
<tr class="separator:a2ae8d5da9a73f3528d1b65295b237c63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19f058f1553671eaf31c1c033fa26954"><td class="memItemLeft" align="right" valign="top">const T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a19f058f1553671eaf31c1c033fa26954">getData</a> () const </td></tr>
<tr class="separator:a19f058f1553671eaf31c1c033fa26954"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a873741553e4a855885aa842f248c9f11"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a873741553e4a855885aa842f248c9f11">getFront</a> ()</td></tr>
<tr class="separator:a873741553e4a855885aa842f248c9f11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a156b7c07b9608e4fb4817b478ab263db"><td class="memItemLeft" align="right" valign="top">T const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a156b7c07b9608e4fb4817b478ab263db">getFront</a> () const </td></tr>
<tr class="separator:a156b7c07b9608e4fb4817b478ab263db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca0d6f2c796a4a7ef2a54edf4a69324d"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#aca0d6f2c796a4a7ef2a54edf4a69324d">getLast</a> ()</td></tr>
<tr class="separator:aca0d6f2c796a4a7ef2a54edf4a69324d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0cc91b6cfc7f3a6fa5fd4d49252c918"><td class="memItemLeft" align="right" valign="top">T const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#aa0cc91b6cfc7f3a6fa5fd4d49252c918">getLast</a> () const </td></tr>
<tr class="separator:aa0cc91b6cfc7f3a6fa5fd4d49252c918"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c120aaf679f48aa5bb4f7ee51ea9ff6"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a8c120aaf679f48aa5bb4f7ee51ea9ff6">getSize</a> () const </td></tr>
<tr class="separator:a8c120aaf679f48aa5bb4f7ee51ea9ff6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a98316cb06dd62423ad1c184e84d838"><td class="memItemLeft" align="right" valign="top">constexpr std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a0a98316cb06dd62423ad1c184e84d838">getMaxSize</a> () const </td></tr>
<tr class="separator:a0a98316cb06dd62423ad1c184e84d838"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b86482f38d63cbffe6c0fb9b932cf76"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a6b86482f38d63cbffe6c0fb9b932cf76">getCapacity</a> () const </td></tr>
<tr class="separator:a6b86482f38d63cbffe6c0fb9b932cf76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab053cb0a3701212b7e0a352a4d410c04"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#ab053cb0a3701212b7e0a352a4d410c04">isEmpty</a> () const </td></tr>
<tr class="separator:ab053cb0a3701212b7e0a352a4d410c04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7aa353d783fef64406568550d4a883d1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a4f62eb0eba61b38e5f6b03c60ea6a49c">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a7aa353d783fef64406568550d4a883d1">begin</a> ()</td></tr>
<tr class="separator:a7aa353d783fef64406568550d4a883d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bd2d0b71d8e8b93861c4caafc9fd041"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a6bd2d0b71d8e8b93861c4caafc9fd041">begin</a> () const </td></tr>
<tr class="separator:a6bd2d0b71d8e8b93861c4caafc9fd041"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1235e24f29b8c798448f7212223ac2db"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a1235e24f29b8c798448f7212223ac2db">cbegin</a> () const </td></tr>
<tr class="separator:a1235e24f29b8c798448f7212223ac2db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99c26a269e5bc0d86c3d2e048892354b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a4f62eb0eba61b38e5f6b03c60ea6a49c">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a99c26a269e5bc0d86c3d2e048892354b">end</a> ()</td></tr>
<tr class="separator:a99c26a269e5bc0d86c3d2e048892354b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7090789237db80716032b978ad6925d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#aa7090789237db80716032b978ad6925d">end</a> () const </td></tr>
<tr class="separator:aa7090789237db80716032b978ad6925d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e05dac568e481aa3dc99bcb2fa81bc5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a3e05dac568e481aa3dc99bcb2fa81bc5">cend</a> () const </td></tr>
<tr class="separator:a3e05dac568e481aa3dc99bcb2fa81bc5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ed9cfc1f219ef3670d02dbb938da41d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a52eee3309a729b97a0e9fd9e76a07fae">ReverseIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a5ed9cfc1f219ef3670d02dbb938da41d">rbegin</a> ()</td></tr>
<tr class="separator:a5ed9cfc1f219ef3670d02dbb938da41d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41f5e611ca8bd827e3c1e92a60edc538"><td class="memItemLeft" align="right" valign="top">ConstReverseIterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a41f5e611ca8bd827e3c1e92a60edc538">rbegin</a> () const </td></tr>
<tr class="separator:a41f5e611ca8bd827e3c1e92a60edc538"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1df2723bdc74b4ffab679a237ae2ae0"><td class="memItemLeft" align="right" valign="top">ConstReverseIterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#af1df2723bdc74b4ffab679a237ae2ae0">crbegin</a> () const </td></tr>
<tr class="separator:af1df2723bdc74b4ffab679a237ae2ae0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5455bed3ad1618600685de6ca73e8f2d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a52eee3309a729b97a0e9fd9e76a07fae">ReverseIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a5455bed3ad1618600685de6ca73e8f2d">rend</a> ()</td></tr>
<tr class="separator:a5455bed3ad1618600685de6ca73e8f2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e6476aee682496635d945f90a5a31f8"><td class="memItemLeft" align="right" valign="top">ConstReverseIterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a2e6476aee682496635d945f90a5a31f8">rend</a> () const </td></tr>
<tr class="separator:a2e6476aee682496635d945f90a5a31f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a02fb5d3837c5db11e7858f624acfdd5f"><td class="memItemLeft" align="right" valign="top">ConstReverseIterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a02fb5d3837c5db11e7858f624acfdd5f">crend</a> () const </td></tr>
<tr class="separator:a02fb5d3837c5db11e7858f624acfdd5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad26076d90066a1a8179e08a7cc7a8bf9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#ad26076d90066a1a8179e08a7cc7a8bf9">assign</a> (std::size_t count, T const &amp;value)</td></tr>
<tr class="separator:ad26076d90066a1a8179e08a7cc7a8bf9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98b87cbf6835d6c369fdd28acebf7bcc"><td class="memTemplParams" colspan="2">template&lt;class InputIterator &gt; </td></tr>
<tr class="memitem:a98b87cbf6835d6c369fdd28acebf7bcc"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a98b87cbf6835d6c369fdd28acebf7bcc">assign</a> (InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a7aa353d783fef64406568550d4a883d1">begin</a>, InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a99c26a269e5bc0d86c3d2e048892354b">end</a>)</td></tr>
<tr class="separator:a98b87cbf6835d6c369fdd28acebf7bcc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53b14e9f414f1304e2e3fb1c39bb7086"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a53b14e9f414f1304e2e3fb1c39bb7086">reserve</a> (std::size_t size)</td></tr>
<tr class="separator:a53b14e9f414f1304e2e3fb1c39bb7086"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbf7f3450844b9fea8610732c2912d8e"><td class="memTemplParams" colspan="2">template&lt;typename U  = T, typename std::enable_if&lt;!std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:adbf7f3450844b9fea8610732c2912d8e"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#adbf7f3450844b9fea8610732c2912d8e">clear</a> () noexcept</td></tr>
<tr class="separator:adbf7f3450844b9fea8610732c2912d8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbf7f3450844b9fea8610732c2912d8e"><td class="memTemplParams" colspan="2">template&lt;typename U  = T, typename std::enable_if&lt; std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:adbf7f3450844b9fea8610732c2912d8e"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#adbf7f3450844b9fea8610732c2912d8e">clear</a> () noexcept</td></tr>
<tr class="separator:adbf7f3450844b9fea8610732c2912d8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95239a3a4d64dcded470a0e7a68326a3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a4f62eb0eba61b38e5f6b03c60ea6a49c">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a95239a3a4d64dcded470a0e7a68326a3">insert</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a> start, T const &amp;value)</td></tr>
<tr class="separator:a95239a3a4d64dcded470a0e7a68326a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a782e5af524b191b0269ea34f7538a89d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a4f62eb0eba61b38e5f6b03c60ea6a49c">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a782e5af524b191b0269ea34f7538a89d">insert</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a> start, std::size_t count, T const &amp;value)</td></tr>
<tr class="separator:a782e5af524b191b0269ea34f7538a89d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd2e9405d07a56c3071bc6b9e7b8c012"><td class="memTemplParams" colspan="2">template&lt;class InputIterator &gt; </td></tr>
<tr class="memitem:abd2e9405d07a56c3071bc6b9e7b8c012"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a4f62eb0eba61b38e5f6b03c60ea6a49c">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#abd2e9405d07a56c3071bc6b9e7b8c012">insert</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a> start, InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a7aa353d783fef64406568550d4a883d1">begin</a>, InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a99c26a269e5bc0d86c3d2e048892354b">end</a>)</td></tr>
<tr class="separator:abd2e9405d07a56c3071bc6b9e7b8c012"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35381933cdb7b1bc72a689adc542d2eb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a4f62eb0eba61b38e5f6b03c60ea6a49c">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a35381933cdb7b1bc72a689adc542d2eb">insert</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a> start, std::initializer_list&lt; T &gt; list)</td></tr>
<tr class="separator:a35381933cdb7b1bc72a689adc542d2eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6ee01cb2c95fa62f6dab6cbdb7e5c95"><td class="memTemplParams" colspan="2">template&lt;class... Args&gt; </td></tr>
<tr class="memitem:ab6ee01cb2c95fa62f6dab6cbdb7e5c95"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a4f62eb0eba61b38e5f6b03c60ea6a49c">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#ab6ee01cb2c95fa62f6dab6cbdb7e5c95">emplace</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a> start, Args &amp;&amp;...args)</td></tr>
<tr class="separator:ab6ee01cb2c95fa62f6dab6cbdb7e5c95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aace4ba5a783ddb11a1b39cf0b7ea92ff"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a4f62eb0eba61b38e5f6b03c60ea6a49c">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#aace4ba5a783ddb11a1b39cf0b7ea92ff">erase</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a> pos)</td></tr>
<tr class="separator:aace4ba5a783ddb11a1b39cf0b7ea92ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac632436e31cea20a8b5101c7539b9401"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a4f62eb0eba61b38e5f6b03c60ea6a49c">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#ac632436e31cea20a8b5101c7539b9401">erase</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a7aa353d783fef64406568550d4a883d1">begin</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a99c26a269e5bc0d86c3d2e048892354b">end</a>)</td></tr>
<tr class="separator:ac632436e31cea20a8b5101c7539b9401"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1275882662e370b622c78880ed57a703"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a1275882662e370b622c78880ed57a703">pushBack</a> (T const &amp;value)</td></tr>
<tr class="separator:a1275882662e370b622c78880ed57a703"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66c4300aaa3ddf9f2f802a4ac0184b56"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a66c4300aaa3ddf9f2f802a4ac0184b56">pushBack</a> (T &amp;&amp;value)</td></tr>
<tr class="separator:a66c4300aaa3ddf9f2f802a4ac0184b56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66855834bd04ef8d1e535909975b77e2"><td class="memTemplParams" colspan="2">template&lt;class... Args&gt; </td></tr>
<tr class="memitem:a66855834bd04ef8d1e535909975b77e2"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a66855834bd04ef8d1e535909975b77e2">emplaceBack</a> (Args &amp;&amp;...args)</td></tr>
<tr class="separator:a66855834bd04ef8d1e535909975b77e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d808b6e7fedafc95b472c3dda5af3f0"><td class="memTemplParams" colspan="2">template&lt;typename U  = T, typename std::enable_if&lt;!std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:a3d808b6e7fedafc95b472c3dda5af3f0"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a3d808b6e7fedafc95b472c3dda5af3f0">popBack</a> ()</td></tr>
<tr class="separator:a3d808b6e7fedafc95b472c3dda5af3f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d808b6e7fedafc95b472c3dda5af3f0"><td class="memTemplParams" colspan="2">template&lt;typename U  = T, typename std::enable_if&lt; std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:a3d808b6e7fedafc95b472c3dda5af3f0"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a3d808b6e7fedafc95b472c3dda5af3f0">popBack</a> ()</td></tr>
<tr class="separator:a3d808b6e7fedafc95b472c3dda5af3f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af414d545204d0288d12293382c5c091e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#af414d545204d0288d12293382c5c091e">resize</a> (std::size_t count)</td></tr>
<tr class="separator:af414d545204d0288d12293382c5c091e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4d461cc13fa0fd2c7e1d9ad720b7dc9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#ad4d461cc13fa0fd2c7e1d9ad720b7dc9">resize</a> (std::size_t count, T const &amp;value)</td></tr>
<tr class="separator:ad4d461cc13fa0fd2c7e1d9ad720b7dc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7178023d23d25c5bf762c1851044042f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a7178023d23d25c5bf762c1851044042f">swap</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> &amp;vec)</td></tr>
<tr class="separator:a7178023d23d25c5bf762c1851044042f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfda77f44caf07a116636de6daebf336"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#abfda77f44caf07a116636de6daebf336">shrinkToFit</a> ()</td></tr>
<tr class="separator:abfda77f44caf07a116636de6daebf336"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6fabf24c5fb7d29cce7217a2d52f832f"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a6fabf24c5fb7d29cce7217a2d52f832f">operator[]</a> (std::size_t index)</td></tr>
<tr class="separator:a6fabf24c5fb7d29cce7217a2d52f832f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37835b4a75e13ed9b57194e7fe5a82c6"><td class="memItemLeft" align="right" valign="top">T const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a37835b4a75e13ed9b57194e7fe5a82c6">operator[]</a> (std::size_t index) const </td></tr>
<tr class="separator:a37835b4a75e13ed9b57194e7fe5a82c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d79e58c0fa7ea52628a3b84b54a1c6f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a0d79e58c0fa7ea52628a3b84b54a1c6f">operator=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> const &amp;vec)</td></tr>
<tr class="separator:a0d79e58c0fa7ea52628a3b84b54a1c6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e6a1628e4c81bb6203fdee57f8d2eba"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a1e6a1628e4c81bb6203fdee57f8d2eba">operator=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> &amp;&amp;vec)</td></tr>
<tr class="separator:a1e6a1628e4c81bb6203fdee57f8d2eba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff21ca4b619758e7d5f816113750d5dd"><td class="memTemplParams" colspan="2">template&lt;typename U  = T, typename std::enable_if&lt;!std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:aff21ca4b619758e7d5f816113750d5dd"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#aff21ca4b619758e7d5f816113750d5dd">operator==</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> const &amp;vec) const </td></tr>
<tr class="separator:aff21ca4b619758e7d5f816113750d5dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff21ca4b619758e7d5f816113750d5dd"><td class="memTemplParams" colspan="2">template&lt;typename U  = T, typename std::enable_if&lt; std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:aff21ca4b619758e7d5f816113750d5dd"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#aff21ca4b619758e7d5f816113750d5dd">operator==</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> const &amp;vec) const </td></tr>
<tr class="separator:aff21ca4b619758e7d5f816113750d5dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc1b419631e45a8e8a8cdafe02be6129"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#adc1b419631e45a8e8a8cdafe02be6129">operator!=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> const &amp;vec) const </td></tr>
<tr class="separator:adc1b419631e45a8e8a8cdafe02be6129"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae06ea911c6026374457bfc4ba19d8d57"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#ae06ea911c6026374457bfc4ba19d8d57">toString</a> () const </td></tr>
<tr class="separator:ae06ea911c6026374457bfc4ba19d8d57"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;class T&gt;<br />
class NRE::Utility::Vector&lt; T &gt;</h3>

<p>A dynamic array, guarantee to be in contiguous memory. </p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a class="anchor" id="a00fbf24e911c0a9ccee4a3b0eac8e5b1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef const T* <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Shortcut to hide ReverseIterator implementation </p>

</div>
</div>
<a class="anchor" id="a4f62eb0eba61b38e5f6b03c60ea6a49c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef T* <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a4f62eb0eba61b38e5f6b03c60ea6a49c">Iterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>&lt; Shortcut to hide Iterator implementation Shortcut to hide ConstIterator implementation </p>

</div>
</div>
<a class="anchor" id="a52eee3309a729b97a0e9fd9e76a07fae"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef std::reverse_iterator&lt;T*&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a52eee3309a729b97a0e9fd9e76a07fae">ReverseIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Shortcut to hide ConstReverseIterator implementation </p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ad4013a6eedf95e4f7ba991da26c9bc5c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct an empty vector </p>

</div>
</div>
<a class="anchor" id="a5bc29c9c9d6a40ebc115809f47a04450"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T const &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct a vector filled with count copy of value </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the number of copy to perform, will be the vector capacity and length </td></tr>
    <tr><td class="paramname">value</td><td>the value to fill the vector with </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>value don't reference a vector item </dd></dl>

</div>
</div>
<a class="anchor" id="a98ccb1caf205e8d2d1a020312178e391"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct a vector filled with count default value </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the number of default element, will be the vector capacity and length </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="abd6844c8f8c1eb9bb166c5e8835dffa8"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class InputIterator &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> </td>
          <td>(</td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct a vector filled with element between 2 iterators </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>the begin iterator </td></tr>
    <tr><td class="paramname">end</td><td>the end iterator, pointing after the last element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>begin and end are not iterator from the vector </dd></dl>

</div>
</div>
<a class="anchor" id="a8aeb3526769c90067a39e4bb55a9522e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; T &gt;&#160;</td>
          <td class="paramname"><em>init</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct a vector from an initializer list </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">init</td><td>the list to fill the vector with </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>list don't contain vector reference </dd></dl>

</div>
</div>
<a class="anchor" id="aaf301a43eaedc067e0221ac4800735f9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>vec</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy vec into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the vector to copy </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aed6e950035f2718400f96c89e4aa9761"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a>&lt; T &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>vec</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Move vec into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the vector to move </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab29b80e7a67b9530485c6771465bce28"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::~<a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php" title="A dynamic array, guarantee to be in contiguous memory. ">Vector</a> Deconstructor </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="ad26076d90066a1a8179e08a7cc7a8bf9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::assign </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T const &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Assign the vector with count copy of value, starting from the beginning </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the number of copy </td></tr>
    <tr><td class="paramname">value</td><td>the copy to fill the vector with </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>value don't reference a vector item </dd></dl>

</div>
</div>
<a class="anchor" id="a98b87cbf6835d6c369fdd28acebf7bcc"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class InputIterator &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::assign </td>
          <td>(</td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Assign the vector with element between 2 iterators </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>the begin iterator </td></tr>
    <tr><td class="paramname">end</td><td>the end iterator, pointing after the last element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>begin and end are not iterator from the vector </dd></dl>

</div>
</div>
<a class="anchor" id="a7aa353d783fef64406568550d4a883d1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a4f62eb0eba61b38e5f6b03c60ea6a49c">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>an iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a6bd2d0b71d8e8b93861c4caafc9fd041"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a1235e24f29b8c798448f7212223ac2db"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::cbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a3e05dac568e481aa3dc99bcb2fa81bc5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::cend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="adbf7f3450844b9fea8610732c2912d8e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;typename U  = T, typename std::enable_if&lt;!std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Clear all object in the vector, not actually releasing memory </p>

</div>
</div>
<a class="anchor" id="adbf7f3450844b9fea8610732c2912d8e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;typename U  = T, typename std::enable_if&lt; std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Clear all object in the vector, not actually releasing memory </p>

</div>
</div>
<a class="anchor" id="af1df2723bdc74b4ffab679a237ae2ae0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">ConstReverseIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::crbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const reverse iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a02fb5d3837c5db11e7858f624acfdd5f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">ConstReverseIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::crend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const reverse iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="ab6ee01cb2c95fa62f6dab6cbdb7e5c95"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class... Args&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a4f62eb0eba61b38e5f6b03c60ea6a49c">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::emplace </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Emplace an element at the specified position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the position to insert the value </td></tr>
    <tr><td class="paramname">args</td><td>the value construction arguments </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the inserted value </dd></dl>

</div>
</div>
<a class="anchor" id="a66855834bd04ef8d1e535909975b77e2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class... Args&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::emplaceBack </td>
          <td>(</td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Emplace a value at the end of the vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">args</td><td>the arguments for the value construction </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a99c26a269e5bc0d86c3d2e048892354b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a4f62eb0eba61b38e5f6b03c60ea6a49c">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>an iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="aa7090789237db80716032b978ad6925d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="aace4ba5a783ddb11a1b39cf0b7ea92ff"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a4f62eb0eba61b38e5f6b03c60ea6a49c">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase an element in the vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>the position to erase </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator on the next valid element </dd></dl>

</div>
</div>
<a class="anchor" id="ac632436e31cea20a8b5101c7539b9401"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a4f62eb0eba61b38e5f6b03c60ea6a49c">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase a set of element from the vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>the start position for erasing </td></tr>
    <tr><td class="paramname">end</td><td>the end position for erasing </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator on the next valid element </dd></dl>

</div>
</div>
<a class="anchor" id="acf66396d0b55328ebc94c784a0df1202"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::get </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element with bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the element index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="a9c8c21b9db893e000a1266613745969a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T const&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::get </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element with bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the element index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="a6b86482f38d63cbffe6c0fb9b932cf76"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::getCapacity </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the vector capacity </dd></dl>

</div>
</div>
<a class="anchor" id="a2ae8d5da9a73f3528d1b65295b237c63"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T* <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::getData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the internal data array </dd></dl>

</div>
</div>
<a class="anchor" id="a19f058f1553671eaf31c1c033fa26954"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const T* <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::getData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the internal data array </dd></dl>

</div>
</div>
<a class="anchor" id="a873741553e4a855885aa842f248c9f11"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::getFront </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a156b7c07b9608e4fb4817b478ab263db"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T const&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::getFront </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the first element </dd></dl>

</div>
</div>
<a class="anchor" id="aca0d6f2c796a4a7ef2a54edf4a69324d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::getLast </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the last element </dd></dl>

</div>
</div>
<a class="anchor" id="aa0cc91b6cfc7f3a6fa5fd4d49252c918"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T const&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::getLast </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the last element </dd></dl>

</div>
</div>
<a class="anchor" id="a0a98316cb06dd62423ad1c184e84d838"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::getMaxSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the maximum array size </dd></dl>

</div>
</div>
<a class="anchor" id="a8c120aaf679f48aa5bb4f7ee51ea9ff6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::getSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the vector effective size </dd></dl>

</div>
</div>
<a class="anchor" id="a95239a3a4d64dcded470a0e7a68326a3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a4f62eb0eba61b38e5f6b03c60ea6a49c">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T const &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert a copy of value at the specified position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the position to insert the value </td></tr>
    <tr><td class="paramname">value</td><td>the value to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the inserted value </dd></dl>
<dl class="section pre"><dt>Precondition</dt><dd>value don't reference a vector item </dd></dl>

</div>
</div>
<a class="anchor" id="a782e5af524b191b0269ea34f7538a89d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a4f62eb0eba61b38e5f6b03c60ea6a49c">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T const &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert count copy of value at the specified position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the position to insert values </td></tr>
    <tr><td class="paramname">count</td><td>the number of copy </td></tr>
    <tr><td class="paramname">value</td><td>the value to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the first inserted value </dd></dl>
<dl class="section pre"><dt>Precondition</dt><dd>value don't reference a vector item </dd></dl>

</div>
</div>
<a class="anchor" id="abd2e9405d07a56c3071bc6b9e7b8c012"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class InputIterator &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a4f62eb0eba61b38e5f6b03c60ea6a49c">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert a copy of element between begin and end at the specified position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the position to insert values </td></tr>
    <tr><td class="paramname">begin</td><td>the begin iterator </td></tr>
    <tr><td class="paramname">end</td><td>the end iterator, pointing after the last element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the first inserted value </dd></dl>
<dl class="section pre"><dt>Precondition</dt><dd>begin and end are not iterator from the vector </dd></dl>

</div>
</div>
<a class="anchor" id="a35381933cdb7b1bc72a689adc542d2eb"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a4f62eb0eba61b38e5f6b03c60ea6a49c">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a00fbf24e911c0a9ccee4a3b0eac8e5b1">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::initializer_list&lt; T &gt;&#160;</td>
          <td class="paramname"><em>list</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert a list of value at the specified position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the position to insert values </td></tr>
    <tr><td class="paramname">list</td><td>the list to fill the vector with </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the first inserted value </dd></dl>
<dl class="section pre"><dt>Precondition</dt><dd>list don't contain vector reference </dd></dl>

</div>
</div>
<a class="anchor" id="ab053cb0a3701212b7e0a352a4d410c04"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::isEmpty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>if the array is empty </dd></dl>

</div>
</div>
<a class="anchor" id="adc1b419631e45a8e8a8cdafe02be6129"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::operator!= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>vec</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Inequality test between this and vec </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the other vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<a class="anchor" id="a0d79e58c0fa7ea52628a3b84b54a1c6f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>vec</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy vec into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the vector to copy into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a1e6a1628e4c81bb6203fdee57f8d2eba"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a>&lt; T &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>vec</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Move vec into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the vector to move into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="aff21ca4b619758e7d5f816113750d5dd"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;typename U  = T, typename std::enable_if&lt;!std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>vec</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Equality test between this and vec </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the other vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<a class="anchor" id="aff21ca4b619758e7d5f816113750d5dd"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;typename U  = T, typename std::enable_if&lt; std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>vec</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Equality test between this and vec </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the other vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<a class="anchor" id="a6fabf24c5fb7d29cce7217a2d52f832f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element without bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the element index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="a37835b4a75e13ed9b57194e7fe5a82c6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T const&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element without bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the element index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="a3d808b6e7fedafc95b472c3dda5af3f0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;typename U  = T, typename std::enable_if&lt;!std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::popBack </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Pop the last element in the vector </p>

</div>
</div>
<a class="anchor" id="a3d808b6e7fedafc95b472c3dda5af3f0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;typename U  = T, typename std::enable_if&lt; std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::popBack </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Pop the last element in the vector </p>

</div>
</div>
<a class="anchor" id="a1275882662e370b622c78880ed57a703"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::pushBack </td>
          <td>(</td>
          <td class="paramtype">T const &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert a copy of value at the end of the vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the value to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>value don't reference a vector item </dd></dl>

</div>
</div>
<a class="anchor" id="a66c4300aaa3ddf9f2f802a4ac0184b56"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::pushBack </td>
          <td>(</td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Emplace a value at the end of the vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the value to insert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a5ed9cfc1f219ef3670d02dbb938da41d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a52eee3309a729b97a0e9fd9e76a07fae">ReverseIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::rbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a reverse iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a41f5e611ca8bd827e3c1e92a60edc538"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">ConstReverseIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::rbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const reverse iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a5455bed3ad1618600685de6ca73e8f2d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a52eee3309a729b97a0e9fd9e76a07fae">ReverseIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::rend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a reverse iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a2e6476aee682496635d945f90a5a31f8"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">ConstReverseIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::rend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const reverse iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a53b14e9f414f1304e2e3fb1c39bb7086"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::reserve </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set the vector capacity to a minimum of size, reallocating memory if needed </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">size</td><td>the new capacity </td></tr>
  </table>
  </dd>
</dl>
<dl class="section warning"><dt>Warning</dt><dd>size value is not checked against <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php#a0a98316cb06dd62423ad1c184e84d838">getMaxSize()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="af414d545204d0288d12293382c5c091e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::resize </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Resize the container up the given size, insert value if needed </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the new capacity </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad4d461cc13fa0fd2c7e1d9ad720b7dc9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::resize </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T const &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Resize the container up the given size, insert value if needed </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the new capacity </td></tr>
    <tr><td class="paramname">value</td><td>the value used when inserting </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="abfda77f44caf07a116636de6daebf336"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::shrinkToFit </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Shrink to fit the actual size, actually freeing memory </p>

</div>
</div>
<a class="anchor" id="a7178023d23d25c5bf762c1851044042f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>vec</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Swap the vector with another vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the other vector </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae06ea911c6026374457bfc4ba19d8d57"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">String</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a>&lt; T &gt;::toString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Convert the object into a string representation </p><dl class="section return"><dt>Returns</dt><dd>the converted object </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/mnt/c/Users/abell/Documents/GitHub/NRE-Utility/src/Utility/Vector/<a class="el" href="_n_r_e___vector_8hpp_source.php">NRE_Vector.hpp</a></li>
</ul>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.8-->
<!-- start footer part -->
</div>
</div>
</div>
</div>
</body>
</html>
