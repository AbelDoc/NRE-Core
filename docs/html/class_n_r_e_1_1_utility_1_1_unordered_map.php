<!-- HTML header for doxygen 1.8.8-->
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <!-- For Mobile Devices -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
        <meta name="generator" content="Doxygen 1.8.11"/>
        <script type="text/javascript" src="../../js/jquery-2.1.1.min.js"></script>
        <title>NRE-Utility: NRE::Utility::UnorderedMap&lt; Key, T, StoreHash, Hash, KeyEqual &gt; Class Template Reference</title>
        <!--<link href="tabs.css" rel="stylesheet" type="text/css"/>-->
        <script type="text/javascript" src="dynsections.js"></script>
        <link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <link href='https://fonts.googleapis.com/css?family=Roboto+Slab' rel='stylesheet' type='text/css'>
        <?php
            include '../../php/navigation.php';
            if (!isset($_COOKIE["theme"]) || $_COOKIE["theme"] == "dark") {
                echo '<link href="../../css/dark/bootstrap.css" rel="stylesheet">';
            } else {
                echo '<link href="../../css/light/bootstrap.css" rel="stylesheet">';
            }
        ?>
        <script src="../../js/bootstrap.min.js"></script>
        <script type="text/javascript" src="doxy-boot.js"></script>
    </head>
    <body>
        <div class="container-fluid">
            <header class="page-header">
                <a href="../../../index.php">
                    <img src="../../img/Logo.png" class="logo img-responsive"/>
                </a>
            </header>
            <?php addNavigationBarInl(false); ?>
            <div id="top" class="row"><!-- do not remove this div, it is closed by doxygen! -->
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-body">
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespace_n_r_e.php">NRE</a></li><li class="navelem"><b>Utility</b></li><li class="navelem"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">UnorderedMap</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="class_n_r_e_1_1_utility_1_1_unordered_map-members.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">NRE::Utility::UnorderedMap&lt; Key, T, StoreHash, Hash, KeyEqual &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>An unordered map, associative unordered container.  
 <a href="class_n_r_e_1_1_utility_1_1_unordered_map.php#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_n_r_e___unordered_map_8hpp_source.php">NRE_UnorderedMap.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a45a5248b1fbf31fc61b12d597dbdfe93"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a45a5248b1fbf31fc61b12d597dbdfe93"></a>
typedef <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt; Key, T &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>ValueType</b></td></tr>
<tr class="separator:a45a5248b1fbf31fc61b12d597dbdfe93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60950ad809a01d316c53476240d3d578"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a60950ad809a01d316c53476240d3d578"></a>
typedef <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><b>Iterator</b></td></tr>
<tr class="separator:a60950ad809a01d316c53476240d3d578"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27ebb5a651384494976c76de07c9164f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a27ebb5a651384494976c76de07c9164f"></a>
typedef <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><b>ConstIterator</b></td></tr>
<tr class="separator:a27ebb5a651384494976c76de07c9164f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c80c16544741693f0da9e26a814bfef"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1c80c16544741693f0da9e26a814bfef"></a>
typedef <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">LocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><b>LocalIterator</b></td></tr>
<tr class="separator:a1c80c16544741693f0da9e26a814bfef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d8b8cdd9829c0fff09e26e6c98d552d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4d8b8cdd9829c0fff09e26e6c98d552d"></a>
typedef <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><b>ConstLocalIterator</b></td></tr>
<tr class="separator:a4d8b8cdd9829c0fff09e26e6c98d552d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a7e3e5eccb7be0df9e0019f78f8e58fa1"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a7e3e5eccb7be0df9e0019f78f8e58fa1">UnorderedMap</a> (std::size_t bucketCount=<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::DEFAULT_BUCKET_COUNT, Hash const &amp;hasher=Hash(), KeyEqual const &amp;equal=KeyEqual())</td></tr>
<tr class="separator:a7e3e5eccb7be0df9e0019f78f8e58fa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73121580771b302310b85fdafcbd2240"><td class="memTemplParams" colspan="2">template&lt;class InputIterator &gt; </td></tr>
<tr class="memitem:a73121580771b302310b85fdafcbd2240"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a73121580771b302310b85fdafcbd2240">UnorderedMap</a> (InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a714d8056d1eb4286be47decc94dae308">begin</a>, InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a4e243f443573677bae65799ad879bd4f">end</a>, std::size_t bucketCount=<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::DEFAULT_BUCKET_COUNT, Hash const &amp;hasher=Hash(), KeyEqual const &amp;equal=KeyEqual())</td></tr>
<tr class="separator:a73121580771b302310b85fdafcbd2240"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba7f63d20573ef3bfee4e006e3191589"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#aba7f63d20573ef3bfee4e006e3191589">UnorderedMap</a> (std::initializer_list&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> &gt; list, std::size_t bucketCount=<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::DEFAULT_BUCKET_COUNT, Hash const &amp;hasher=Hash(), KeyEqual const &amp;equal=KeyEqual())</td></tr>
<tr class="separator:aba7f63d20573ef3bfee4e006e3191589"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98202ff80e405f9e9fa0a9aca8d57624"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a98202ff80e405f9e9fa0a9aca8d57624">UnorderedMap</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">UnorderedMap</a> const &amp;map)</td></tr>
<tr class="separator:a98202ff80e405f9e9fa0a9aca8d57624"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a948787cc52f988cd60e2cd928f49b9f7"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a948787cc52f988cd60e2cd928f49b9f7">UnorderedMap</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">UnorderedMap</a> &amp;&amp;map)</td></tr>
<tr class="separator:a948787cc52f988cd60e2cd928f49b9f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3107c8758ca80be5834bf309403fbf1b"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a3107c8758ca80be5834bf309403fbf1b">get</a> (Key const &amp;k)</td></tr>
<tr class="separator:a3107c8758ca80be5834bf309403fbf1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa779276bf5ed0aefaac52c1115f16359"><td class="memItemLeft" align="right" valign="top">T const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#aa779276bf5ed0aefaac52c1115f16359">get</a> (Key const &amp;k) const </td></tr>
<tr class="separator:aa779276bf5ed0aefaac52c1115f16359"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1034e38dcb69ad5f0533bbc13b7f5d5c"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a1034e38dcb69ad5f0533bbc13b7f5d5c">getBucketCount</a> () const </td></tr>
<tr class="separator:a1034e38dcb69ad5f0533bbc13b7f5d5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4f3ecc690c573b5b1046f2a39c42f92"><td class="memItemLeft" align="right" valign="top">constexpr std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#af4f3ecc690c573b5b1046f2a39c42f92">getMaxBucketCount</a> () const </td></tr>
<tr class="separator:af4f3ecc690c573b5b1046f2a39c42f92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f0b0004c2f4129ca212644b8da74c4d"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a2f0b0004c2f4129ca212644b8da74c4d">getSize</a> () const </td></tr>
<tr class="separator:a2f0b0004c2f4129ca212644b8da74c4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a423fd88ee646b3f5bef94d1893f30639"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a423fd88ee646b3f5bef94d1893f30639">getMaxLoadFactor</a> () const </td></tr>
<tr class="separator:a423fd88ee646b3f5bef94d1893f30639"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5ba484d63cbf88b4876aef2b4fc6acf"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#ab5ba484d63cbf88b4876aef2b4fc6acf">getLoadFactor</a> () const </td></tr>
<tr class="separator:ab5ba484d63cbf88b4876aef2b4fc6acf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6046ad6d867cce110c368f78684066c"><td class="memItemLeft" align="right" valign="top">constexpr std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#ab6046ad6d867cce110c368f78684066c">getMaxSize</a> () const </td></tr>
<tr class="separator:ab6046ad6d867cce110c368f78684066c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99b59ac686d2cef86634bb2f6206d597"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a99b59ac686d2cef86634bb2f6206d597">isEmpty</a> () const </td></tr>
<tr class="separator:a99b59ac686d2cef86634bb2f6206d597"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50059b1aa9c5d9536eff38a78e5eadc4"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a50059b1aa9c5d9536eff38a78e5eadc4">getCount</a> (Key const &amp;k) const </td></tr>
<tr class="separator:a50059b1aa9c5d9536eff38a78e5eadc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32996f01a50577b97f432a0a4648494a"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a32996f01a50577b97f432a0a4648494a">getBucket</a> (Key const &amp;k) const </td></tr>
<tr class="separator:a32996f01a50577b97f432a0a4648494a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a59ca3b74264612ee338d654a48305d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a7a59ca3b74264612ee338d654a48305d">setMaxLoadFactor</a> (float factor)</td></tr>
<tr class="separator:a7a59ca3b74264612ee338d654a48305d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a714d8056d1eb4286be47decc94dae308"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a714d8056d1eb4286be47decc94dae308">begin</a> ()</td></tr>
<tr class="separator:a714d8056d1eb4286be47decc94dae308"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3a307ec912be5178a94e982f6f11fd1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#ac3a307ec912be5178a94e982f6f11fd1">begin</a> () const </td></tr>
<tr class="separator:ac3a307ec912be5178a94e982f6f11fd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8c5b0b065a32d568ca26baa60cf011c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#ae8c5b0b065a32d568ca26baa60cf011c">cbegin</a> () const </td></tr>
<tr class="separator:ae8c5b0b065a32d568ca26baa60cf011c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e243f443573677bae65799ad879bd4f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a4e243f443573677bae65799ad879bd4f">end</a> ()</td></tr>
<tr class="separator:a4e243f443573677bae65799ad879bd4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d82085581d7ce35853faee8352faf64"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a4d82085581d7ce35853faee8352faf64">end</a> () const </td></tr>
<tr class="separator:a4d82085581d7ce35853faee8352faf64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0d88ac768154bb20d3efc16dac59039"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#ae0d88ac768154bb20d3efc16dac59039">cend</a> () const </td></tr>
<tr class="separator:ae0d88ac768154bb20d3efc16dac59039"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1176a42606f4dff2d2e2c0d12e183d0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">LocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#af1176a42606f4dff2d2e2c0d12e183d0">begin</a> (std::size_t index)</td></tr>
<tr class="separator:af1176a42606f4dff2d2e2c0d12e183d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a829e72b645b3dfb2f2f0d05eaac28c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a0a829e72b645b3dfb2f2f0d05eaac28c">begin</a> (std::size_t index) const </td></tr>
<tr class="separator:a0a829e72b645b3dfb2f2f0d05eaac28c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4dcbe535faa19a0704325e5e3fe926d9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a4dcbe535faa19a0704325e5e3fe926d9">cbegin</a> (std::size_t index) const </td></tr>
<tr class="separator:a4dcbe535faa19a0704325e5e3fe926d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2ea987132ad6bf798be5aebd111d1ab"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">LocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#af2ea987132ad6bf798be5aebd111d1ab">end</a> (std::size_t index)</td></tr>
<tr class="separator:af2ea987132ad6bf798be5aebd111d1ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f277e2d015dfd54e0b567024a5b4e0d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a9f277e2d015dfd54e0b567024a5b4e0d">end</a> (std::size_t index) const </td></tr>
<tr class="separator:a9f277e2d015dfd54e0b567024a5b4e0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6636771041fe32c3968e5615db9c1b74"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a6636771041fe32c3968e5615db9c1b74">cend</a> (std::size_t index) const </td></tr>
<tr class="separator:a6636771041fe32c3968e5615db9c1b74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a932990b476a73019472d6ff4897bd8db"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a>, bool &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a932990b476a73019472d6ff4897bd8db">insert</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> const &amp;value)</td></tr>
<tr class="separator:a932990b476a73019472d6ff4897bd8db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22f8e71f76d1746ec956ea810fcf6e98"><td class="memTemplParams" colspan="2">template&lt;class P &gt; </td></tr>
<tr class="memitem:a22f8e71f76d1746ec956ea810fcf6e98"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a>, bool &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a22f8e71f76d1746ec956ea810fcf6e98">insert</a> (P &amp;&amp;value)</td></tr>
<tr class="separator:a22f8e71f76d1746ec956ea810fcf6e98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac47e190a0fee925313b5d26cf3abd670"><td class="memTemplParams" colspan="2">template&lt;class InputIterator &gt; </td></tr>
<tr class="memitem:ac47e190a0fee925313b5d26cf3abd670"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#ac47e190a0fee925313b5d26cf3abd670">insert</a> (InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a714d8056d1eb4286be47decc94dae308">begin</a>, InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a4e243f443573677bae65799ad879bd4f">end</a>)</td></tr>
<tr class="separator:ac47e190a0fee925313b5d26cf3abd670"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a384dfed27b110ae724efc9c2725ee74b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a384dfed27b110ae724efc9c2725ee74b">insert</a> (std::initializer_list&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> &gt; list)</td></tr>
<tr class="separator:a384dfed27b110ae724efc9c2725ee74b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61ee95960f1bf68a174bed58b088e13a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a61ee95960f1bf68a174bed58b088e13a">insertHint</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a> hint, <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> const &amp;value)</td></tr>
<tr class="separator:a61ee95960f1bf68a174bed58b088e13a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c7a84417b5058f82856686d5e04383a"><td class="memTemplParams" colspan="2">template&lt;class P &gt; </td></tr>
<tr class="memitem:a7c7a84417b5058f82856686d5e04383a"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a7c7a84417b5058f82856686d5e04383a">insertHint</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a> hint, P &amp;&amp;value)</td></tr>
<tr class="separator:a7c7a84417b5058f82856686d5e04383a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70d673f11138359299dbc1ab023dd3b7"><td class="memTemplParams" colspan="2">template&lt;class... Args&gt; </td></tr>
<tr class="memitem:a70d673f11138359299dbc1ab023dd3b7"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a>, bool &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a70d673f11138359299dbc1ab023dd3b7">emplace</a> (Args &amp;&amp;...args)</td></tr>
<tr class="separator:a70d673f11138359299dbc1ab023dd3b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a263bf9f6eb2c0e782e46737554966671"><td class="memTemplParams" colspan="2">template&lt;class... Args&gt; </td></tr>
<tr class="memitem:a263bf9f6eb2c0e782e46737554966671"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a263bf9f6eb2c0e782e46737554966671">emplaceHint</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a> hint, Args &amp;&amp;...args)</td></tr>
<tr class="separator:a263bf9f6eb2c0e782e46737554966671"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ed91971771c9165ba9f45b7ebeb5196"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a9ed91971771c9165ba9f45b7ebeb5196">clear</a> ()</td></tr>
<tr class="separator:a9ed91971771c9165ba9f45b7ebeb5196"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae63b3b2b29756084705015715d1f1ff5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#ae63b3b2b29756084705015715d1f1ff5">swap</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">UnorderedMap</a> &amp;map)</td></tr>
<tr class="separator:ae63b3b2b29756084705015715d1f1ff5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af05674231300073636d401ce3e157879"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#af05674231300073636d401ce3e157879">reserve</a> (std::size_t count)</td></tr>
<tr class="separator:af05674231300073636d401ce3e157879"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a360fb4e1d41a846c1a52bd5ad0c2cdb0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a360fb4e1d41a846c1a52bd5ad0c2cdb0">rehash</a> (std::size_t count)</td></tr>
<tr class="separator:a360fb4e1d41a846c1a52bd5ad0c2cdb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b3bc62bb94d24c821eda023229616eb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a4b3bc62bb94d24c821eda023229616eb">equalRange</a> (Key const &amp;key)</td></tr>
<tr class="separator:a4b3bc62bb94d24c821eda023229616eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06c734a505ad3f8edfdd3a4003ed125e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a06c734a505ad3f8edfdd3a4003ed125e">equalRange</a> (Key const &amp;key) const </td></tr>
<tr class="separator:a06c734a505ad3f8edfdd3a4003ed125e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90b3b5b70e81d330ed80d13c76ca197a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a90b3b5b70e81d330ed80d13c76ca197a">find</a> (Key const &amp;k)</td></tr>
<tr class="separator:a90b3b5b70e81d330ed80d13c76ca197a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2dc6ea384a8413ec57b42e1f4f814b80"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a2dc6ea384a8413ec57b42e1f4f814b80">find</a> (Key const &amp;k) const </td></tr>
<tr class="separator:a2dc6ea384a8413ec57b42e1f4f814b80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a399c4b2a80300912c52785752fb016d4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a399c4b2a80300912c52785752fb016d4">erase</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a> pos)</td></tr>
<tr class="separator:a399c4b2a80300912c52785752fb016d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6d2606523f7f2ad7f6d74866c78b887"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#ab6d2606523f7f2ad7f6d74866c78b887">erase</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a> pos)</td></tr>
<tr class="separator:ab6d2606523f7f2ad7f6d74866c78b887"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47295ef0587a3eace1002f2934088a90"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a47295ef0587a3eace1002f2934088a90">erase</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a714d8056d1eb4286be47decc94dae308">begin</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a4e243f443573677bae65799ad879bd4f">end</a>)</td></tr>
<tr class="separator:a47295ef0587a3eace1002f2934088a90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf27822bac0646998d0a706d34d8fe41"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#aaf27822bac0646998d0a706d34d8fe41">erase</a> (Key const &amp;k)</td></tr>
<tr class="separator:aaf27822bac0646998d0a706d34d8fe41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96b250d9e052580337030324c882ad1e"><td class="memItemLeft" align="right" valign="top">Hash&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a96b250d9e052580337030324c882ad1e">getHash</a> () const </td></tr>
<tr class="separator:a96b250d9e052580337030324c882ad1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7fc6eef3986644d27a81dfbe23a0ad07"><td class="memItemLeft" align="right" valign="top">KeyEqual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a7fc6eef3986644d27a81dfbe23a0ad07">getKeyEqual</a> () const </td></tr>
<tr class="separator:a7fc6eef3986644d27a81dfbe23a0ad07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30884e5f0d6deab4d581e7a3256e2b07"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">UnorderedMap</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a30884e5f0d6deab4d581e7a3256e2b07">operator=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">UnorderedMap</a> const &amp;map)</td></tr>
<tr class="separator:a30884e5f0d6deab4d581e7a3256e2b07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21a39952d3c046be68ef7fdbbf9de4f7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">UnorderedMap</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a21a39952d3c046be68ef7fdbbf9de4f7">operator=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">UnorderedMap</a> &amp;&amp;map)</td></tr>
<tr class="separator:a21a39952d3c046be68ef7fdbbf9de4f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa33af55cfbf0d7e8f06571b47004cc46"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#aa33af55cfbf0d7e8f06571b47004cc46">operator[]</a> (Key const &amp;k)</td></tr>
<tr class="separator:aa33af55cfbf0d7e8f06571b47004cc46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09272af8ec48fdeeae1d395b23d705d7"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a09272af8ec48fdeeae1d395b23d705d7">operator[]</a> (Key &amp;&amp;k)</td></tr>
<tr class="separator:a09272af8ec48fdeeae1d395b23d705d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae66540800e04243d83690db04803e618"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#ae66540800e04243d83690db04803e618">operator==</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">UnorderedMap</a> const &amp;map) const </td></tr>
<tr class="separator:ae66540800e04243d83690db04803e618"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa19fb2c0ad2ada8c2e4873ccfb131034"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#aa19fb2c0ad2ada8c2e4873ccfb131034">operator!=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">UnorderedMap</a> const &amp;map) const </td></tr>
<tr class="separator:aa19fb2c0ad2ada8c2e4873ccfb131034"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f193920c3436b6a0dcc79fe9c04a184"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php#a2f193920c3436b6a0dcc79fe9c04a184">toString</a> () const </td></tr>
<tr class="separator:a2f193920c3436b6a0dcc79fe9c04a184"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;class Key, class T, bool StoreHash = false, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt;<br />
class NRE::Utility::UnorderedMap&lt; Key, T, StoreHash, Hash, KeyEqual &gt;</h3>

<p>An unordered map, associative unordered container. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a7e3e5eccb7be0df9e0019f78f8e58fa1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">UnorderedMap</a> </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>bucketCount</em> = <code><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>&lt;&#160;Key,&#160;T,&#160;StoreHash,&#160;Hash,&#160;KeyEqual&#160;&gt;::DEFAULT_BUCKET_COUNT</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Hash const &amp;&#160;</td>
          <td class="paramname"><em>hasher</em> = <code>Hash()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">KeyEqual const &amp;&#160;</td>
          <td class="paramname"><em>equal</em> = <code>KeyEqual()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct an empty map with a number of bucket </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bucketCount</td><td>the base bucket count </td></tr>
    <tr><td class="paramname">hasher</td><td>the hash function used in the map </td></tr>
    <tr><td class="paramname">equal</td><td>the equal function used in the map </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a73121580771b302310b85fdafcbd2240"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
<div class="memtemplate">
template&lt;class InputIterator &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">UnorderedMap</a> </td>
          <td>(</td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>bucketCount</em> = <code><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>&lt;&#160;Key,&#160;T,&#160;StoreHash,&#160;Hash,&#160;KeyEqual&#160;&gt;::DEFAULT_BUCKET_COUNT</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Hash const &amp;&#160;</td>
          <td class="paramname"><em>hasher</em> = <code>Hash()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">KeyEqual const &amp;&#160;</td>
          <td class="paramname"><em>equal</em> = <code>KeyEqual()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct a map with a number of bucket and filled with elements in the given range </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>the begin iterator </td></tr>
    <tr><td class="paramname">end</td><td>the end iterator </td></tr>
    <tr><td class="paramname">bucketCount</td><td>the base bucket count </td></tr>
    <tr><td class="paramname">hasher</td><td>the hash function used in the map </td></tr>
    <tr><td class="paramname">equal</td><td>the equal function used in the map </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aba7f63d20573ef3bfee4e006e3191589"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">UnorderedMap</a> </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> &gt;&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>bucketCount</em> = <code><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>&lt;&#160;Key,&#160;T,&#160;StoreHash,&#160;Hash,&#160;KeyEqual&#160;&gt;::DEFAULT_BUCKET_COUNT</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Hash const &amp;&#160;</td>
          <td class="paramname"><em>hasher</em> = <code>Hash()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">KeyEqual const &amp;&#160;</td>
          <td class="paramname"><em>equal</em> = <code>KeyEqual()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct a map with a number of bucket and filled with elements in the given list </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>the list to fill the map with </td></tr>
    <tr><td class="paramname">bucketCount</td><td>the base bucket count </td></tr>
    <tr><td class="paramname">hasher</td><td>the hash function used in the map </td></tr>
    <tr><td class="paramname">equal</td><td>the equal function used in the map </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a98202ff80e405f9e9fa0a9aca8d57624"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">UnorderedMap</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt; const &amp;&#160;</td>
          <td class="paramname"><em>map</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy map into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">map</td><td>the map to copy </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a948787cc52f988cd60e2cd928f49b9f7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">UnorderedMap</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>map</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Move map into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">map</td><td>the map to move </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a714d8056d1eb4286be47decc94dae308"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>an iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="ac3a307ec912be5178a94e982f6f11fd1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="af1176a42606f4dff2d2e2c0d12e183d0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">LocalIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::begin </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Grab an iterator on a given bucket </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the bucket index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the bucket </dd></dl>

</div>
</div>
<a class="anchor" id="a0a829e72b645b3dfb2f2f0d05eaac28c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::begin </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Grab a const iterator on a given bucket </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the bucket index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the bucket </dd></dl>

</div>
</div>
<a class="anchor" id="ae8c5b0b065a32d568ca26baa60cf011c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::cbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a4dcbe535faa19a0704325e5e3fe926d9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::cbegin </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Grab a const iterator on a given bucket </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the bucket index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the bucket </dd></dl>

</div>
</div>
<a class="anchor" id="ae0d88ac768154bb20d3efc16dac59039"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::cend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a6636771041fe32c3968e5615db9c1b74"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::cend </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Grab a const iterator on a given bucket end </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the bucket index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the bucket end </dd></dl>

</div>
</div>
<a class="anchor" id="a9ed91971771c9165ba9f45b7ebeb5196"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Clear all buckets </p>

</div>
</div>
<a class="anchor" id="a70d673f11138359299dbc1ab023dd3b7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
<div class="memtemplate">
template&lt;class... Args&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a>, bool&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::emplace </td>
          <td>(</td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Emplace an element using the given elements </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">args</td><td>the parameter pack used to create the inserted pair </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pair containing an iterator on the inserted element, and a boolean telling if the insertion has been done </dd></dl>

</div>
</div>
<a class="anchor" id="a263bf9f6eb2c0e782e46737554966671"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
<div class="memtemplate">
template&lt;class... Args&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::emplaceHint </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>hint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Emplace an element using the given elements </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">hint</td><td>the iterator used as a hint to emplace the element </td></tr>
    <tr><td class="paramname">args</td><td>the parameter pack used to create the inserted pair </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator on the inserted element </dd></dl>

</div>
</div>
<a class="anchor" id="a4e243f443573677bae65799ad879bd4f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>an iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a4d82085581d7ce35853faee8352faf64"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="af2ea987132ad6bf798be5aebd111d1ab"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">LocalIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::end </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Grab an iterator on a given bucket end </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the bucket index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the bucket end </dd></dl>

</div>
</div>
<a class="anchor" id="a9f277e2d015dfd54e0b567024a5b4e0d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::end </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Grab a const iterator on a given bucket end </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the bucket index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the bucket end </dd></dl>

</div>
</div>
<a class="anchor" id="a4b3bc62bb94d24c821eda023229616eb"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a>&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::equalRange </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find a range of iterator containing all elements with the given key, both end if not found </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>the key to search </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pair of iterator </dd></dl>

</div>
</div>
<a class="anchor" id="a06c734a505ad3f8edfdd3a4003ed125e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a>&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::equalRange </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find a range of iterator containing all elements with the given key, both end if not found </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>the key to search </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pair of iterator </dd></dl>

</div>
</div>
<a class="anchor" id="a399c4b2a80300912c52785752fb016d4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a>&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase the element pointed by the iterator </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>the iterator on the erased element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator after the erased element </dd></dl>

</div>
</div>
<a class="anchor" id="ab6d2606523f7f2ad7f6d74866c78b887"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase the element pointed by the iterator </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>the iterator on the erased element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator after the erased element </dd></dl>

</div>
</div>
<a class="anchor" id="a47295ef0587a3eace1002f2934088a90"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase the element in the given range </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>the begin iterator for erasing </td></tr>
    <tr><td class="paramname">end</td><td>the end iterator for erasing </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator after the last erased element </dd></dl>

</div>
</div>
<a class="anchor" id="aaf27822bac0646998d0a706d34d8fe41"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::erase </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase all element with the given key </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key to search and erase </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the number of erased elements </dd></dl>

</div>
</div>
<a class="anchor" id="a90b3b5b70e81d330ed80d13c76ca197a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::find </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find the element corresponding with the given key </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key to search </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator pointing on the element, or end if not found </dd></dl>

</div>
</div>
<a class="anchor" id="a2dc6ea384a8413ec57b42e1f4f814b80"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::find </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find the element corresponding with the given key </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key to search </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator pointing on the element, or end if not found </dd></dl>

</div>
</div>
<a class="anchor" id="a3107c8758ca80be5834bf309403fbf1b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::get </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element with bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the element key </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="aa779276bf5ed0aefaac52c1115f16359"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T const&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::get </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element with bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the element key </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="a32996f01a50577b97f432a0a4648494a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getBucket </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get the bucket index from a given key </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key to search </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding bucket </dd></dl>

</div>
</div>
<a class="anchor" id="a1034e38dcb69ad5f0533bbc13b7f5d5c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getBucketCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the number of buckets in the map </dd></dl>

</div>
</div>
<a class="anchor" id="a50059b1aa9c5d9536eff38a78e5eadc4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getCount </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find the number of element with the given key </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key to search </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the number of corresponding elements </dd></dl>

</div>
</div>
<a class="anchor" id="a96b250d9e052580337030324c882ad1e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">Hash <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getHash </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the hash function </dd></dl>

</div>
</div>
<a class="anchor" id="a7fc6eef3986644d27a81dfbe23a0ad07"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">KeyEqual <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getKeyEqual </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the key equal function </dd></dl>

</div>
</div>
<a class="anchor" id="ab5ba484d63cbf88b4876aef2b4fc6acf"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">float <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getLoadFactor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the current load factor </dd></dl>

</div>
</div>
<a class="anchor" id="af4f3ecc690c573b5b1046f2a39c42f92"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getMaxBucketCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the maximum number of bucket in the map </dd></dl>

</div>
</div>
<a class="anchor" id="a423fd88ee646b3f5bef94d1893f30639"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">float <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getMaxLoadFactor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the maximum load factor </dd></dl>

</div>
</div>
<a class="anchor" id="ab6046ad6d867cce110c368f78684066c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getMaxSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the maximum map size </dd></dl>

</div>
</div>
<a class="anchor" id="a2f0b0004c2f4129ca212644b8da74c4d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::getSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the number of elements in the map </dd></dl>

</div>
</div>
<a class="anchor" id="a932990b476a73019472d6ff4897bd8db"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a>, bool&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> const &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert the given value in the map </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the pair with the key and the corresponding element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pair containing an iterator on the inserted element, and a boolean telling if the insertion has been done </dd></dl>

</div>
</div>
<a class="anchor" id="a22f8e71f76d1746ec956ea810fcf6e98"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
<div class="memtemplate">
template&lt;class P &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair</a>&lt;<a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a>, bool&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::insert </td>
          <td>(</td>
          <td class="paramtype">P &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert the given value in the map </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the pair with the key and the corresponding element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a pair containing an iterator on the inserted element, and a boolean telling if the insertion has been done </dd></dl>

</div>
</div>
<a class="anchor" id="ac47e190a0fee925313b5d26cf3abd670"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
<div class="memtemplate">
template&lt;class InputIterator &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::insert </td>
          <td>(</td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert elements in the given range </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>the begin iterator </td></tr>
    <tr><td class="paramname">end</td><td>the end iterator </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a384dfed27b110ae724efc9c2725ee74b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::insert </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; <a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> &gt;&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert elements in the given list </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>the list of value to insert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a61ee95960f1bf68a174bed58b088e13a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::insertHint </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>hint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a> const &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert the given value in the map using the hint as a suggestion for the search start </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">hint</td><td>the hint used for the search </td></tr>
    <tr><td class="paramname">value</td><td>the value to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator on the inserted element </dd></dl>

</div>
</div>
<a class="anchor" id="a7c7a84417b5058f82856686d5e04383a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
<div class="memtemplate">
template&lt;class P &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::insertHint </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>hint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">P &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert the given value in the map using the hint as a suggestion for the search start </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">hint</td><td>the hint used for the search </td></tr>
    <tr><td class="paramname">value</td><td>the value to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator on the inserted element </dd></dl>

</div>
</div>
<a class="anchor" id="a99b59ac686d2cef86634bb2f6206d597"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::isEmpty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>if the map is empty </dd></dl>

</div>
</div>
<a class="anchor" id="aa19fb2c0ad2ada8c2e4873ccfb131034"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::operator!= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt; const &amp;&#160;</td>
          <td class="paramname"><em>map</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Inequality test between this and map </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">map</td><td>the other map </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<a class="anchor" id="a30884e5f0d6deab4d581e7a3256e2b07"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">UnorderedMap</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt; const &amp;&#160;</td>
          <td class="paramname"><em>map</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy map into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">map</td><td>the map to copy into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a21a39952d3c046be68ef7fdbbf9de4f7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">UnorderedMap</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>map</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Move map into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">map</td><td>the map to move into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="ae66540800e04243d83690db04803e618"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt; const &amp;&#160;</td>
          <td class="paramname"><em>map</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Equality test between this and map </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">map</td><td>the other map </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<a class="anchor" id="aa33af55cfbf0d7e8f06571b47004cc46"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">Key const &amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Try to access the element designed by the given key, if not found insert a default one </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key used for access </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the found/inserted element </dd></dl>

</div>
</div>
<a class="anchor" id="a09272af8ec48fdeeae1d395b23d705d7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">Key &amp;&amp;&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Try to access the element designed by the given key, if not found insert a default one </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the key used for access </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the found/inserted element </dd></dl>

</div>
</div>
<a class="anchor" id="a360fb4e1d41a846c1a52bd5ad0c2cdb0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::rehash </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Reserve at least coutn bucket in the map and rehash the map </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the number of desired bucket </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af05674231300073636d401ce3e157879"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::reserve </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Reserve at least count bucket in the map and rehash the map </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the number of desired bucket </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7a59ca3b74264612ee338d654a48305d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::setMaxLoadFactor </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>factor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set the new max load factor, must be between 0.0 and 1.0 </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">factor</td><td>the new factor </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae63b3b2b29756084705015715d1f1ff5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt; &amp;&#160;</td>
          <td class="paramname"><em>map</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Swap the map with another map </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">map</td><td>the other map </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2f193920c3436b6a0dcc79fe9c04a184"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class T , bool StoreHash = false, class Hash  = std::hash&lt;Key&gt;, class KeyEqual  = std::equal_to&lt;Key&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">String</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_unordered_map.php">NRE::Utility::UnorderedMap</a>&lt; Key, T, StoreHash, Hash, KeyEqual &gt;::toString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Convert the object into a string representation </p><dl class="section return"><dt>Returns</dt><dd>the converted object </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/mnt/c/Users/abell/Documents/GitHub/NRE-Utility/src/Utility/UnorderedMap/<a class="el" href="_n_r_e___unordered_map_8hpp_source.php">NRE_UnorderedMap.hpp</a></li>
</ul>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.8-->
<!-- start footer part -->
</div>
</div>
</div>
</div>
</body>
</html>
