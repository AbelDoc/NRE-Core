<!-- HTML header for doxygen 1.8.8-->
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <!-- For Mobile Devices -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
        <meta name="generator" content="Doxygen 1.8.11"/>
        <script type="text/javascript" src="../../js/jquery-2.1.1.min.js"></script>
        <title>NRE-Utility: NRE::Utility::StaticVector&lt; T, Size &gt; Class Template Reference</title>
        <!--<link href="tabs.css" rel="stylesheet" type="text/css"/>-->
        <script type="text/javascript" src="dynsections.js"></script>
        <link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <link href='https://fonts.googleapis.com/css?family=Roboto+Slab' rel='stylesheet' type='text/css'>
        <?php
            include '../../php/navigation.php';
            if (!isset($_COOKIE["theme"]) || $_COOKIE["theme"] == "dark") {
                echo '<link href="../../css/dark/bootstrap.css" rel="stylesheet">';
            } else {
                echo '<link href="../../css/light/bootstrap.css" rel="stylesheet">';
            }
        ?>
        <script src="../../js/bootstrap.min.js"></script>
        <script type="text/javascript" src="doxy-boot.js"></script>
    </head>
    <body>
        <div class="container-fluid">
            <header class="page-header">
                <a href="../../../index.php">
                    <img src="../../img/Logo.png" class="logo img-responsive"/>
                </a>
            </header>
            <?php addNavigationBarInl(false); ?>
            <div id="top" class="row"><!-- do not remove this div, it is closed by doxygen! -->
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-body">
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespace_n_r_e.php">NRE</a></li><li class="navelem"><b>Utility</b></li><li class="navelem"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="class_n_r_e_1_1_utility_1_1_static_vector-members.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">NRE::Utility::StaticVector&lt; T, Size &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A static vector, with a fixed size capacity on the stack but vector behavior.  
 <a href="class_n_r_e_1_1_utility_1_1_static_vector.php#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_n_r_e___static_vector_8hpp_source.php">NRE_StaticVector.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for NRE::Utility::StaticVector&lt; T, Size &gt;:</div>
<div class="dyncontent">
 <div class="center">
  <img src="class_n_r_e_1_1_utility_1_1_static_vector.png" usemap="#NRE::Utility::StaticVector_3C_20T_2C_20Size_20_3E_map" alt=""/>
  <map id="NRE::Utility::StaticVector_3C_20T_2C_20Size_20_3E_map" name="NRE::Utility::StaticVector&lt; T, Size &gt;_map">
<area href="class_n_r_e_1_1_utility_1_1_stringable.php" alt="NRE::Utility::Stringable&lt; StaticVector&lt; T, Size &gt; &gt;" shape="rect" coords="0,56,383,80"/>
<area href="class_n_r_e_1_1_utility_1_1_static_interface.php" title="Describe an object using CRTP to create static interface (static polymorphism) " alt="NRE::Utility::StaticInterface&lt; T, M &gt;" shape="rect" coords="0,0,383,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a7fcd032b11c041d13f635cfeb2f49c27"><td class="memItemLeft" align="right" valign="top">typedef T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7fcd032b11c041d13f635cfeb2f49c27">Iterator</a></td></tr>
<tr class="separator:a7fcd032b11c041d13f635cfeb2f49c27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fb3a9830033245bc2160609de5ba318"><td class="memItemLeft" align="right" valign="top">typedef const T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a></td></tr>
<tr class="separator:a9fb3a9830033245bc2160609de5ba318"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f5c21e6c9193fa4940d03c964590442"><td class="memItemLeft" align="right" valign="top">typedef std::reverse_iterator&lt; T * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a1f5c21e6c9193fa4940d03c964590442">ReverseIterator</a></td></tr>
<tr class="separator:a1f5c21e6c9193fa4940d03c964590442"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ebb3dd6afec9861be58367904edec91"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4ebb3dd6afec9861be58367904edec91"></a>
typedef std::reverse_iterator&lt; const T * &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>ConstReverseIterator</b></td></tr>
<tr class="separator:a4ebb3dd6afec9861be58367904edec91"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:afa1c9d782e0b1f38982f4fb254177efb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#afa1c9d782e0b1f38982f4fb254177efb">StaticVector</a> ()</td></tr>
<tr class="separator:afa1c9d782e0b1f38982f4fb254177efb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac692837d615bd0ee94fe8b86cc7c84eb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ac692837d615bd0ee94fe8b86cc7c84eb">StaticVector</a> (std::size_t count, T const &amp;value)</td></tr>
<tr class="separator:ac692837d615bd0ee94fe8b86cc7c84eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f1feb8eff78ed19dd61f621ef9b2bca"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a8f1feb8eff78ed19dd61f621ef9b2bca">StaticVector</a> (std::size_t count)</td></tr>
<tr class="separator:a8f1feb8eff78ed19dd61f621ef9b2bca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af99cfac8867d2c3e20246f9d429f1c80"><td class="memTemplParams" colspan="2">template&lt;class InputIterator &gt; </td></tr>
<tr class="memitem:af99cfac8867d2c3e20246f9d429f1c80"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#af99cfac8867d2c3e20246f9d429f1c80">StaticVector</a> (InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#aae759805a397f1e53d813386a6b4fcba">begin</a>, InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ab0ad64f96eee06c352dd4bdad7cf6488">end</a>)</td></tr>
<tr class="separator:af99cfac8867d2c3e20246f9d429f1c80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2e341f516f54c87cd7eba453ab17da5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ab2e341f516f54c87cd7eba453ab17da5">StaticVector</a> (std::initializer_list&lt; T &gt; init)</td></tr>
<tr class="separator:ab2e341f516f54c87cd7eba453ab17da5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e5d84608491020125d652a3b422ab8a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a6e5d84608491020125d652a3b422ab8a">StaticVector</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> const &amp;vec)</td></tr>
<tr class="separator:a6e5d84608491020125d652a3b422ab8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb347c788b6d8fa3fe6ab1e3e7d42239"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#abb347c788b6d8fa3fe6ab1e3e7d42239">StaticVector</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> &amp;&amp;vec)</td></tr>
<tr class="separator:abb347c788b6d8fa3fe6ab1e3e7d42239"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5808b79191635ede98e88037adc8d3b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#aa5808b79191635ede98e88037adc8d3b">~StaticVector</a> ()</td></tr>
<tr class="separator:aa5808b79191635ede98e88037adc8d3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a444f2de9b30dab2b3fc8d98334accf93"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a444f2de9b30dab2b3fc8d98334accf93">get</a> (std::size_t index)</td></tr>
<tr class="separator:a444f2de9b30dab2b3fc8d98334accf93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad374b48ba42cd03a3e6f6f00c4bbc978"><td class="memItemLeft" align="right" valign="top">T const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ad374b48ba42cd03a3e6f6f00c4bbc978">get</a> (std::size_t index) const </td></tr>
<tr class="separator:ad374b48ba42cd03a3e6f6f00c4bbc978"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ebf72339bed36d6304592ef52e18ca7"><td class="memItemLeft" align="right" valign="top">T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a6ebf72339bed36d6304592ef52e18ca7">getData</a> ()</td></tr>
<tr class="separator:a6ebf72339bed36d6304592ef52e18ca7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5978a7de8d06baeecd8f8fe7180332f6"><td class="memItemLeft" align="right" valign="top">const T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a5978a7de8d06baeecd8f8fe7180332f6">getData</a> () const </td></tr>
<tr class="separator:a5978a7de8d06baeecd8f8fe7180332f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4958b164752fdcac971c6492e6a55f1"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ae4958b164752fdcac971c6492e6a55f1">getFront</a> ()</td></tr>
<tr class="separator:ae4958b164752fdcac971c6492e6a55f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03bf29bc3256e56fa6e7acf3a6a016ae"><td class="memItemLeft" align="right" valign="top">T const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a03bf29bc3256e56fa6e7acf3a6a016ae">getFront</a> () const </td></tr>
<tr class="separator:a03bf29bc3256e56fa6e7acf3a6a016ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad73462ddd98765e33c9f68b9819eeb26"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ad73462ddd98765e33c9f68b9819eeb26">getLast</a> ()</td></tr>
<tr class="separator:ad73462ddd98765e33c9f68b9819eeb26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae090ca254157c709becca003404615eb"><td class="memItemLeft" align="right" valign="top">T const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ae090ca254157c709becca003404615eb">getLast</a> () const </td></tr>
<tr class="separator:ae090ca254157c709becca003404615eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4300db606d0a96b08dbba70d7ed2b26"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ad4300db606d0a96b08dbba70d7ed2b26">getSize</a> () const </td></tr>
<tr class="separator:ad4300db606d0a96b08dbba70d7ed2b26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5cef7ab987ef35f282e478bffed17775"><td class="memItemLeft" align="right" valign="top">constexpr std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a5cef7ab987ef35f282e478bffed17775">getMaxSize</a> () const </td></tr>
<tr class="separator:a5cef7ab987ef35f282e478bffed17775"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11f3700de1db9cae700d91e6514903c9"><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a11f3700de1db9cae700d91e6514903c9">getCapacity</a> () const </td></tr>
<tr class="separator:a11f3700de1db9cae700d91e6514903c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a058991a6569d52b25ca1147a82a3e07e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a058991a6569d52b25ca1147a82a3e07e">isEmpty</a> () const </td></tr>
<tr class="separator:a058991a6569d52b25ca1147a82a3e07e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae759805a397f1e53d813386a6b4fcba"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7fcd032b11c041d13f635cfeb2f49c27">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#aae759805a397f1e53d813386a6b4fcba">begin</a> ()</td></tr>
<tr class="separator:aae759805a397f1e53d813386a6b4fcba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66d02ff5f6cea53a728456d5bb48c961"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a66d02ff5f6cea53a728456d5bb48c961">begin</a> () const </td></tr>
<tr class="separator:a66d02ff5f6cea53a728456d5bb48c961"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f49b4de898a83df5c2fd0b249fe0f00"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a8f49b4de898a83df5c2fd0b249fe0f00">cbegin</a> () const </td></tr>
<tr class="separator:a8f49b4de898a83df5c2fd0b249fe0f00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0ad64f96eee06c352dd4bdad7cf6488"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7fcd032b11c041d13f635cfeb2f49c27">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ab0ad64f96eee06c352dd4bdad7cf6488">end</a> ()</td></tr>
<tr class="separator:ab0ad64f96eee06c352dd4bdad7cf6488"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a395b7fc10795b00d8538d4a20ea2a872"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a395b7fc10795b00d8538d4a20ea2a872">end</a> () const </td></tr>
<tr class="separator:a395b7fc10795b00d8538d4a20ea2a872"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f88776063e8b426848c7d4d3097d250"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a8f88776063e8b426848c7d4d3097d250">cend</a> () const </td></tr>
<tr class="separator:a8f88776063e8b426848c7d4d3097d250"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2eeb5673b5d72f2ae28349fa5b46523d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a1f5c21e6c9193fa4940d03c964590442">ReverseIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a2eeb5673b5d72f2ae28349fa5b46523d">rbegin</a> ()</td></tr>
<tr class="separator:a2eeb5673b5d72f2ae28349fa5b46523d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e3a096a1a93825836217e48e220a50f"><td class="memItemLeft" align="right" valign="top">ConstReverseIterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9e3a096a1a93825836217e48e220a50f">rbegin</a> () const </td></tr>
<tr class="separator:a9e3a096a1a93825836217e48e220a50f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab501e43131d88fa4b4468ec09d49287b"><td class="memItemLeft" align="right" valign="top">ConstReverseIterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ab501e43131d88fa4b4468ec09d49287b">crbegin</a> () const </td></tr>
<tr class="separator:ab501e43131d88fa4b4468ec09d49287b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47bf9791abb7dae3d4e030892a9848e6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a1f5c21e6c9193fa4940d03c964590442">ReverseIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a47bf9791abb7dae3d4e030892a9848e6">rend</a> ()</td></tr>
<tr class="separator:a47bf9791abb7dae3d4e030892a9848e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add48fcdb892ff469d143d7f948ae2542"><td class="memItemLeft" align="right" valign="top">ConstReverseIterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#add48fcdb892ff469d143d7f948ae2542">rend</a> () const </td></tr>
<tr class="separator:add48fcdb892ff469d143d7f948ae2542"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac058c5285e5f1cdee2e6da84e74c0e5f"><td class="memItemLeft" align="right" valign="top">ConstReverseIterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ac058c5285e5f1cdee2e6da84e74c0e5f">crend</a> () const </td></tr>
<tr class="separator:ac058c5285e5f1cdee2e6da84e74c0e5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29a698aacd80e36570b072bb03804dfc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a29a698aacd80e36570b072bb03804dfc">assign</a> (std::size_t count, T const &amp;value)</td></tr>
<tr class="separator:a29a698aacd80e36570b072bb03804dfc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60610842fc4ecac298a00b79a14f71db"><td class="memTemplParams" colspan="2">template&lt;class InputIterator &gt; </td></tr>
<tr class="memitem:a60610842fc4ecac298a00b79a14f71db"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a60610842fc4ecac298a00b79a14f71db">assign</a> (InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#aae759805a397f1e53d813386a6b4fcba">begin</a>, InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ab0ad64f96eee06c352dd4bdad7cf6488">end</a>)</td></tr>
<tr class="separator:a60610842fc4ecac298a00b79a14f71db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38f00c518ce8bb84f58519b4511a6558"><td class="memTemplParams" colspan="2">template&lt;typename U  = T, typename std::enable_if&lt;!std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:a38f00c518ce8bb84f58519b4511a6558"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a38f00c518ce8bb84f58519b4511a6558">clear</a> () noexcept</td></tr>
<tr class="separator:a38f00c518ce8bb84f58519b4511a6558"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38f00c518ce8bb84f58519b4511a6558"><td class="memTemplParams" colspan="2">template&lt;typename U  = T, typename std::enable_if&lt; std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:a38f00c518ce8bb84f58519b4511a6558"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a38f00c518ce8bb84f58519b4511a6558">clear</a> () noexcept</td></tr>
<tr class="separator:a38f00c518ce8bb84f58519b4511a6558"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a022748193bc61fd8485f18d1c2428dc3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7fcd032b11c041d13f635cfeb2f49c27">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a022748193bc61fd8485f18d1c2428dc3">insert</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a> start, T const &amp;value)</td></tr>
<tr class="separator:a022748193bc61fd8485f18d1c2428dc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c1c0c99a732aaf2749bc21eb51da459"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7fcd032b11c041d13f635cfeb2f49c27">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a6c1c0c99a732aaf2749bc21eb51da459">insert</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a> start, std::size_t count, T const &amp;value)</td></tr>
<tr class="separator:a6c1c0c99a732aaf2749bc21eb51da459"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d237c2c465e6ebcd0b787e63d6b0075"><td class="memTemplParams" colspan="2">template&lt;class InputIterator &gt; </td></tr>
<tr class="memitem:a5d237c2c465e6ebcd0b787e63d6b0075"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7fcd032b11c041d13f635cfeb2f49c27">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a5d237c2c465e6ebcd0b787e63d6b0075">insert</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a> start, InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#aae759805a397f1e53d813386a6b4fcba">begin</a>, InputIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ab0ad64f96eee06c352dd4bdad7cf6488">end</a>)</td></tr>
<tr class="separator:a5d237c2c465e6ebcd0b787e63d6b0075"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa10bfedf911374403d49ad041e196ecf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7fcd032b11c041d13f635cfeb2f49c27">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#aa10bfedf911374403d49ad041e196ecf">insert</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a> start, std::initializer_list&lt; T &gt; list)</td></tr>
<tr class="separator:aa10bfedf911374403d49ad041e196ecf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04a8cca783c737ce4f271fd42eb3e24b"><td class="memTemplParams" colspan="2">template&lt;class... Args&gt; </td></tr>
<tr class="memitem:a04a8cca783c737ce4f271fd42eb3e24b"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7fcd032b11c041d13f635cfeb2f49c27">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a04a8cca783c737ce4f271fd42eb3e24b">emplace</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a> start, Args &amp;&amp;...args)</td></tr>
<tr class="separator:a04a8cca783c737ce4f271fd42eb3e24b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad34425290bdef5958e6f0cf343bf305c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7fcd032b11c041d13f635cfeb2f49c27">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ad34425290bdef5958e6f0cf343bf305c">erase</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a> pos)</td></tr>
<tr class="separator:ad34425290bdef5958e6f0cf343bf305c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85589a8ed16b98f47e880e3cf42e65b3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7fcd032b11c041d13f635cfeb2f49c27">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a85589a8ed16b98f47e880e3cf42e65b3">erase</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#aae759805a397f1e53d813386a6b4fcba">begin</a>, <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ab0ad64f96eee06c352dd4bdad7cf6488">end</a>)</td></tr>
<tr class="separator:a85589a8ed16b98f47e880e3cf42e65b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa30dbf77ea78f7b7e359aca82f2db2e6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#aa30dbf77ea78f7b7e359aca82f2db2e6">pushBack</a> (T const &amp;value)</td></tr>
<tr class="separator:aa30dbf77ea78f7b7e359aca82f2db2e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa54b1c8427e8ff58f4f0bd73e3efc2f6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#aa54b1c8427e8ff58f4f0bd73e3efc2f6">pushBack</a> (T &amp;&amp;value)</td></tr>
<tr class="separator:aa54b1c8427e8ff58f4f0bd73e3efc2f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae70c6300a4d0facb7cf3232d2ab11ce0"><td class="memTemplParams" colspan="2">template&lt;class... Args&gt; </td></tr>
<tr class="memitem:ae70c6300a4d0facb7cf3232d2ab11ce0"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ae70c6300a4d0facb7cf3232d2ab11ce0">emplaceBack</a> (Args &amp;&amp;...args)</td></tr>
<tr class="separator:ae70c6300a4d0facb7cf3232d2ab11ce0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adddc7f4c611502fcf6f6bb55141325f1"><td class="memTemplParams" colspan="2">template&lt;typename U  = T, typename std::enable_if&lt;!std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:adddc7f4c611502fcf6f6bb55141325f1"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#adddc7f4c611502fcf6f6bb55141325f1">popBack</a> ()</td></tr>
<tr class="separator:adddc7f4c611502fcf6f6bb55141325f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adddc7f4c611502fcf6f6bb55141325f1"><td class="memTemplParams" colspan="2">template&lt;typename U  = T, typename std::enable_if&lt; std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:adddc7f4c611502fcf6f6bb55141325f1"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#adddc7f4c611502fcf6f6bb55141325f1">popBack</a> ()</td></tr>
<tr class="separator:adddc7f4c611502fcf6f6bb55141325f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b042e680e0db082326466e494fee436"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7b042e680e0db082326466e494fee436">resize</a> (std::size_t count)</td></tr>
<tr class="separator:a7b042e680e0db082326466e494fee436"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8dd7b1e42be46e3dad592b5c593d11be"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a8dd7b1e42be46e3dad592b5c593d11be">resize</a> (std::size_t count, T const &amp;value)</td></tr>
<tr class="separator:a8dd7b1e42be46e3dad592b5c593d11be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66a0be1752a04198ac5a58fe1368ece7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a66a0be1752a04198ac5a58fe1368ece7">swap</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> &amp;vec)</td></tr>
<tr class="separator:a66a0be1752a04198ac5a58fe1368ece7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb6ffb6eb79687ffd391a28f81c6455b"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#adb6ffb6eb79687ffd391a28f81c6455b">operator[]</a> (std::size_t index)</td></tr>
<tr class="separator:adb6ffb6eb79687ffd391a28f81c6455b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7745b27bb28ddc0a9ba181c25bf55f53"><td class="memItemLeft" align="right" valign="top">T const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7745b27bb28ddc0a9ba181c25bf55f53">operator[]</a> (std::size_t index) const </td></tr>
<tr class="separator:a7745b27bb28ddc0a9ba181c25bf55f53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21511b3b12b38cf0254d099d014ad253"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a21511b3b12b38cf0254d099d014ad253">operator=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> const &amp;vec)</td></tr>
<tr class="separator:a21511b3b12b38cf0254d099d014ad253"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9369df4759b460a01cfc010c9ff4414c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9369df4759b460a01cfc010c9ff4414c">operator=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> &amp;&amp;vec)</td></tr>
<tr class="separator:a9369df4759b460a01cfc010c9ff4414c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a522adbfcb3a52831fecedbd5a4864e46"><td class="memTemplParams" colspan="2">template&lt;typename U  = T, typename std::enable_if&lt;!std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:a522adbfcb3a52831fecedbd5a4864e46"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a522adbfcb3a52831fecedbd5a4864e46">operator==</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> const &amp;vec) const </td></tr>
<tr class="separator:a522adbfcb3a52831fecedbd5a4864e46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a522adbfcb3a52831fecedbd5a4864e46"><td class="memTemplParams" colspan="2">template&lt;typename U  = T, typename std::enable_if&lt; std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:a522adbfcb3a52831fecedbd5a4864e46"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a522adbfcb3a52831fecedbd5a4864e46">operator==</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> const &amp;vec) const </td></tr>
<tr class="separator:a522adbfcb3a52831fecedbd5a4864e46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a244cc18bc667549731cd2e095cf51202"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a244cc18bc667549731cd2e095cf51202">operator!=</a> (<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> const &amp;vec) const </td></tr>
<tr class="separator:a244cc18bc667549731cd2e095cf51202"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3127ae80bb19109fc51b6b1557215d2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#af3127ae80bb19109fc51b6b1557215d2">toString</a> () const </td></tr>
<tr class="separator:af3127ae80bb19109fc51b6b1557215d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_class_n_r_e_1_1_utility_1_1_stringable"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_class_n_r_e_1_1_utility_1_1_stringable')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="class_n_r_e_1_1_utility_1_1_stringable.php">NRE::Utility::Stringable&lt; StaticVector&lt; T, Size &gt; &gt;</a></td></tr>
<tr class="memitem:a858907f8126e9c210854ddb659dd17ee inherit pub_methods_class_n_r_e_1_1_utility_1_1_stringable"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_stringable.php#a858907f8126e9c210854ddb659dd17ee">toString</a> () const</td></tr>
<tr class="separator:a858907f8126e9c210854ddb659dd17ee inherit pub_methods_class_n_r_e_1_1_utility_1_1_stringable"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_class_n_r_e_1_1_utility_1_1_static_interface"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_class_n_r_e_1_1_utility_1_1_static_interface')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="class_n_r_e_1_1_utility_1_1_static_interface.php">NRE::Utility::StaticInterface&lt; T, M &gt;</a></td></tr>
<tr class="memitem:a72fd5f7816f2a8309328186e1bf2b2f5 inherit pub_methods_class_n_r_e_1_1_utility_1_1_static_interface"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_interface.php#a72fd5f7816f2a8309328186e1bf2b2f5">impl</a> ()</td></tr>
<tr class="separator:a72fd5f7816f2a8309328186e1bf2b2f5 inherit pub_methods_class_n_r_e_1_1_utility_1_1_static_interface"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fcc521ea437ea9edceae7f0c03ab6b1 inherit pub_methods_class_n_r_e_1_1_utility_1_1_static_interface"><td class="memItemLeft" align="right" valign="top">T const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_interface.php#a1fcc521ea437ea9edceae7f0c03ab6b1">impl</a> () const </td></tr>
<tr class="separator:a1fcc521ea437ea9edceae7f0c03ab6b1 inherit pub_methods_class_n_r_e_1_1_utility_1_1_static_interface"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;class T, std::size_t Size = 128&gt;<br />
class NRE::Utility::StaticVector&lt; T, Size &gt;</h3>

<p>A static vector, with a fixed size capacity on the stack but vector behavior. </p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a class="anchor" id="a9fb3a9830033245bc2160609de5ba318"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef const T* <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Shortcut to hide ReverseIterator implementation </p>

</div>
</div>
<a class="anchor" id="a7fcd032b11c041d13f635cfeb2f49c27"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef T* <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7fcd032b11c041d13f635cfeb2f49c27">Iterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>&lt; Shortcut to hide Iterator implementation Shortcut to hide ConstIterator implementation </p>

</div>
</div>
<a class="anchor" id="a1f5c21e6c9193fa4940d03c964590442"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef std::reverse_iterator&lt;T*&gt; <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a1f5c21e6c9193fa4940d03c964590442">ReverseIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Shortcut to hide ConstReverseIterator implementation </p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="afa1c9d782e0b1f38982f4fb254177efb"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct an empty static vector </p>

</div>
</div>
<a class="anchor" id="ac692837d615bd0ee94fe8b86cc7c84eb"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T const &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct a static vector filled with count copy of value </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the number of copy to perform, will be the static vector capacity and length </td></tr>
    <tr><td class="paramname">value</td><td>the value to fill the static vector with </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>value don't reference a static vector item </dd></dl>

</div>
</div>
<a class="anchor" id="a8f1feb8eff78ed19dd61f621ef9b2bca"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct a static vector filled with count default value </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the number of default element, will be the static vector capacity and length </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af99cfac8867d2c3e20246f9d429f1c80"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
<div class="memtemplate">
template&lt;class InputIterator &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> </td>
          <td>(</td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct a static vector filled with element between 2 iterators </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>the begin iterator </td></tr>
    <tr><td class="paramname">end</td><td>the end iterator, pointing after the last element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>begin and end are not iterator from the static vector </dd></dl>

</div>
</div>
<a class="anchor" id="ab2e341f516f54c87cd7eba453ab17da5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; T &gt;&#160;</td>
          <td class="paramname"><em>init</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct a static vector from an initializer list </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">init</td><td>the list to fill the static vector with </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>list don't contain static vector reference </dd></dl>

</div>
</div>
<a class="anchor" id="a6e5d84608491020125d652a3b422ab8a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a>&lt; T, Size &gt; const &amp;&#160;</td>
          <td class="paramname"><em>vec</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy vec into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the static vector to copy </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="abb347c788b6d8fa3fe6ab1e3e7d42239"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a>&lt; T, Size &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>vec</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Move vec into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the static vector to move </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aa5808b79191635ede98e88037adc8d3b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::~<a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php" title="A static vector, with a fixed size capacity on the stack but vector behavior. ">StaticVector</a> Deconstructor </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a29a698aacd80e36570b072bb03804dfc"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::assign </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T const &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Assign the static vector with count copy of value, starting from the beginning </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the number of copy </td></tr>
    <tr><td class="paramname">value</td><td>the copy to fill the static vector with </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>value don't reference a static vector item </dd></dl>

</div>
</div>
<a class="anchor" id="a60610842fc4ecac298a00b79a14f71db"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
<div class="memtemplate">
template&lt;class InputIterator &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::assign </td>
          <td>(</td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Assign the static vector with element between 2 iterators </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>the begin iterator </td></tr>
    <tr><td class="paramname">end</td><td>the end iterator, pointing after the last element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>begin and end are not iterator from the static vector </dd></dl>

</div>
</div>
<a class="anchor" id="aae759805a397f1e53d813386a6b4fcba"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7fcd032b11c041d13f635cfeb2f49c27">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>an iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a66d02ff5f6cea53a728456d5bb48c961"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a8f49b4de898a83df5c2fd0b249fe0f00"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::cbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a8f88776063e8b426848c7d4d3097d250"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::cend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a38f00c518ce8bb84f58519b4511a6558"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
<div class="memtemplate">
template&lt;typename U  = T, typename std::enable_if&lt;!std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Clear all object in the static vector, not actually releasing memory </p>

</div>
</div>
<a class="anchor" id="a38f00c518ce8bb84f58519b4511a6558"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
<div class="memtemplate">
template&lt;typename U  = T, typename std::enable_if&lt; std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Clear all object in the static vector, not actually releasing memory </p>

</div>
</div>
<a class="anchor" id="ab501e43131d88fa4b4468ec09d49287b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">ConstReverseIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::crbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const reverse iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="ac058c5285e5f1cdee2e6da84e74c0e5f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">ConstReverseIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::crend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const reverse iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a04a8cca783c737ce4f271fd42eb3e24b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
<div class="memtemplate">
template&lt;class... Args&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7fcd032b11c041d13f635cfeb2f49c27">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::emplace </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Emplace an element at the specified position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the position to insert the value </td></tr>
    <tr><td class="paramname">args</td><td>the value construction arguments </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the inserted value </dd></dl>

</div>
</div>
<a class="anchor" id="ae70c6300a4d0facb7cf3232d2ab11ce0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
<div class="memtemplate">
template&lt;class... Args&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::emplaceBack </td>
          <td>(</td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Emplace a value at the end of the static vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">args</td><td>the arguments for the value construction </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab0ad64f96eee06c352dd4bdad7cf6488"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7fcd032b11c041d13f635cfeb2f49c27">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>an iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a395b7fc10795b00d8538d4a20ea2a872"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="ad34425290bdef5958e6f0cf343bf305c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7fcd032b11c041d13f635cfeb2f49c27">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase an element in the static vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pos</td><td>the position to erase </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator on the next valid element </dd></dl>

</div>
</div>
<a class="anchor" id="a85589a8ed16b98f47e880e3cf42e65b3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7fcd032b11c041d13f635cfeb2f49c27">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Erase a set of element from the static vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">begin</td><td>the start position for erasing </td></tr>
    <tr><td class="paramname">end</td><td>the end position for erasing </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an iterator on the next valid element </dd></dl>

</div>
</div>
<a class="anchor" id="a444f2de9b30dab2b3fc8d98334accf93"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::get </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element with bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the element index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="ad374b48ba42cd03a3e6f6f00c4bbc978"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T const&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::get </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element with bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the element index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="a11f3700de1db9cae700d91e6514903c9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::getCapacity </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the static vector capacity </dd></dl>

</div>
</div>
<a class="anchor" id="a6ebf72339bed36d6304592ef52e18ca7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T* <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::getData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the internal data array </dd></dl>

</div>
</div>
<a class="anchor" id="a5978a7de8d06baeecd8f8fe7180332f6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const T* <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::getData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the internal data array </dd></dl>

</div>
</div>
<a class="anchor" id="ae4958b164752fdcac971c6492e6a55f1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::getFront </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a03bf29bc3256e56fa6e7acf3a6a016ae"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T const&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::getFront </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the first element </dd></dl>

</div>
</div>
<a class="anchor" id="ad73462ddd98765e33c9f68b9819eeb26"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::getLast </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the last element </dd></dl>

</div>
</div>
<a class="anchor" id="ae090ca254157c709becca003404615eb"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T const&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::getLast </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the last element </dd></dl>

</div>
</div>
<a class="anchor" id="a5cef7ab987ef35f282e478bffed17775"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::getMaxSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the maximum array size </dd></dl>

</div>
</div>
<a class="anchor" id="ad4300db606d0a96b08dbba70d7ed2b26"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::getSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the static vector effective size </dd></dl>

</div>
</div>
<a class="anchor" id="a022748193bc61fd8485f18d1c2428dc3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7fcd032b11c041d13f635cfeb2f49c27">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T const &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert a copy of value at the specified position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the position to insert the value </td></tr>
    <tr><td class="paramname">value</td><td>the value to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the inserted value </dd></dl>
<dl class="section pre"><dt>Precondition</dt><dd>value don't reference a static vector item </dd></dl>

</div>
</div>
<a class="anchor" id="a6c1c0c99a732aaf2749bc21eb51da459"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7fcd032b11c041d13f635cfeb2f49c27">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T const &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert count copy of value at the specified position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the position to insert values </td></tr>
    <tr><td class="paramname">count</td><td>the number of copy </td></tr>
    <tr><td class="paramname">value</td><td>the value to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the first inserted value </dd></dl>
<dl class="section pre"><dt>Precondition</dt><dd>value don't reference a static vector item </dd></dl>

</div>
</div>
<a class="anchor" id="a5d237c2c465e6ebcd0b787e63d6b0075"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
<div class="memtemplate">
template&lt;class InputIterator &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7fcd032b11c041d13f635cfeb2f49c27">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">InputIterator&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert a copy of element between begin and end at the specified position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the position to insert values </td></tr>
    <tr><td class="paramname">begin</td><td>the begin iterator </td></tr>
    <tr><td class="paramname">end</td><td>the end iterator, pointing after the last element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the first inserted value </dd></dl>
<dl class="section pre"><dt>Precondition</dt><dd>begin and end are not iterator from the static vector </dd></dl>

</div>
</div>
<a class="anchor" id="aa10bfedf911374403d49ad041e196ecf"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7fcd032b11c041d13f635cfeb2f49c27">Iterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::initializer_list&lt; T &gt;&#160;</td>
          <td class="paramname"><em>list</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert a list of value at the specified position </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the position to insert values </td></tr>
    <tr><td class="paramname">list</td><td>the list to fill the static vector with </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the iterator on the first inserted value </dd></dl>
<dl class="section pre"><dt>Precondition</dt><dd>list don't contain static vector reference </dd></dl>

</div>
</div>
<a class="anchor" id="a058991a6569d52b25ca1147a82a3e07e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::isEmpty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>if the array is empty </dd></dl>

</div>
</div>
<a class="anchor" id="a244cc18bc667549731cd2e095cf51202"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::operator!= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a>&lt; T, Size &gt; const &amp;&#160;</td>
          <td class="paramname"><em>vec</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Inequality test between this and vec </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the other static vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<a class="anchor" id="a21511b3b12b38cf0254d099d014ad253"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a>&lt; T, Size &gt; const &amp;&#160;</td>
          <td class="paramname"><em>vec</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy vec into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the static vector to copy into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a9369df4759b460a01cfc010c9ff4414c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a>&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a>&lt; T, Size &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>vec</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Move vec into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the static vector to move into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a522adbfcb3a52831fecedbd5a4864e46"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
<div class="memtemplate">
template&lt;typename U  = T, typename std::enable_if&lt;!std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a>&lt; T, Size &gt; const &amp;&#160;</td>
          <td class="paramname"><em>vec</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Equality test between this and vec </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the other static vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<a class="anchor" id="a522adbfcb3a52831fecedbd5a4864e46"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
<div class="memtemplate">
template&lt;typename U  = T, typename std::enable_if&lt; std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a>&lt; T, Size &gt; const &amp;&#160;</td>
          <td class="paramname"><em>vec</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Equality test between this and vec </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the other static vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test result </dd></dl>

</div>
</div>
<a class="anchor" id="adb6ffb6eb79687ffd391a28f81c6455b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element without bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the element index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="a7745b27bb28ddc0a9ba181c25bf55f53"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T const&amp; <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access a particular element without bound checking </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the element index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the corresponding element </dd></dl>

</div>
</div>
<a class="anchor" id="adddc7f4c611502fcf6f6bb55141325f1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
<div class="memtemplate">
template&lt;typename U  = T, typename std::enable_if&lt;!std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::popBack </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Pop the last element in the static vector </p>

</div>
</div>
<a class="anchor" id="adddc7f4c611502fcf6f6bb55141325f1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
<div class="memtemplate">
template&lt;typename U  = T, typename std::enable_if&lt; std::is_pod&lt; U &gt;::value, int &gt;::type  = 0&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::popBack </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Pop the last element in the static vector </p>

</div>
</div>
<a class="anchor" id="aa30dbf77ea78f7b7e359aca82f2db2e6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::pushBack </td>
          <td>(</td>
          <td class="paramtype">T const &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Insert a copy of value at the end of the static vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the value to insert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>value don't reference a static vector item </dd></dl>

</div>
</div>
<a class="anchor" id="aa54b1c8427e8ff58f4f0bd73e3efc2f6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::pushBack </td>
          <td>(</td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Emplace a value at the end of the static vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the value to insert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2eeb5673b5d72f2ae28349fa5b46523d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a1f5c21e6c9193fa4940d03c964590442">ReverseIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::rbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a reverse iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a9e3a096a1a93825836217e48e220a50f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">ConstReverseIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::rbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const reverse iterator on the first element </dd></dl>

</div>
</div>
<a class="anchor" id="a47bf9791abb7dae3d4e030892a9848e6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a1f5c21e6c9193fa4940d03c964590442">ReverseIterator</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::rend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a reverse iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="add48fcdb892ff469d143d7f948ae2542"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">ConstReverseIterator <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::rend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a const reverse iterator on the end of the container </dd></dl>

</div>
</div>
<a class="anchor" id="a7b042e680e0db082326466e494fee436"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::resize </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Resize the container up the given size, insert value if needed </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the new capacity </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8dd7b1e42be46e3dad592b5c593d11be"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::resize </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T const &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Resize the container up the given size, insert value if needed </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">count</td><td>the new capacity </td></tr>
    <tr><td class="paramname">value</td><td>the value used when inserting </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a66a0be1752a04198ac5a58fe1368ece7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a>&lt; T, Size &gt; &amp;&#160;</td>
          <td class="paramname"><em>vec</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Swap the static vector with another static vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vec</td><td>the other static vector </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af3127ae80bb19109fc51b6b1557215d2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , std::size_t Size = 128&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_utility_1_1_basic_string.php">String</a> <a class="el" href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a>&lt; T, Size &gt;::toString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Convert the object into a string representation </p><dl class="section return"><dt>Returns</dt><dd>the converted object </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/mnt/c/Users/abell/Documents/GitHub/NRE-Utility/src/Utility/StaticVector/<a class="el" href="_n_r_e___static_vector_8hpp_source.php">NRE_StaticVector.hpp</a></li>
</ul>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.8-->
<!-- start footer part -->
</div>
</div>
</div>
</div>
</body>
</html>
