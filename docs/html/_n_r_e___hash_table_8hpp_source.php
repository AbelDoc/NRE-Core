<!-- HTML header for doxygen 1.8.8-->
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <!-- For Mobile Devices -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
        <meta name="generator" content="Doxygen 1.8.11"/>
        <script type="text/javascript" src="../../js/jquery-2.1.1.min.js"></script>
        <title>NRE-Utility: /mnt/c/Users/abell/Documents/GitHub/NRE-Utility/src/Utility/Detail/HashTable/NRE_HashTable.hpp Source File</title>
        <!--<link href="tabs.css" rel="stylesheet" type="text/css"/>-->
        <script type="text/javascript" src="dynsections.js"></script>
        <link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <link href='https://fonts.googleapis.com/css?family=Roboto+Slab' rel='stylesheet' type='text/css'>
        <?php
            include '../../php/navigation.php';
            if (!isset($_COOKIE["theme"]) || $_COOKIE["theme"] == "dark") {
                echo '<link href="../../css/dark/bootstrap.css" rel="stylesheet">';
            } else {
                echo '<link href="../../css/light/bootstrap.css" rel="stylesheet">';
            }
        ?>
        <script src="../../js/bootstrap.min.js"></script>
        <script type="text/javascript" src="doxy-boot.js"></script>
    </head>
    <body>
        <div class="container-fluid">
            <header class="page-header">
                <a href="../../../index.php">
                    <img src="../../img/Logo.png" class="logo img-responsive"/>
                </a>
            </header>
            <?php addNavigationBarInl(false); ?>
            <div id="top" class="row"><!-- do not remove this div, it is closed by doxygen! -->
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-body">
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li><a href="annotated.php"><span>Classes</span></a></li>
      <li class="current"><a href="files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.php"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.php">src</a></li><li class="navelem"><a class="el" href="dir_9761b53e3d9349800c0cb59b71c8cd3d.php">Utility</a></li><li class="navelem"><a class="el" href="dir_4ba482d33c8dc209b0ed648ba592bf4f.php">Detail</a></li><li class="navelem"><a class="el" href="dir_965090ab86abf012716b7185f6c8c77d.php">HashTable</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">NRE_HashTable.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_r_e___hash_table_8hpp.php">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">    #pragma once</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">    #include &lt;climits&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">    #include &quot;../../String/NRE_String.hpp&quot;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">    #include &quot;../../Pair/NRE_Pair.hpp&quot;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">    #include &quot;../../Vector/NRE_Vector.hpp&quot;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">    #include &quot;../../Interfaces/Stringable/NRE_Stringable.hpp&quot;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keyword">namespace </span><a class="code" href="namespace_n_r_e.php">NRE</a> {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        <span class="keyword">namespace </span><a class="code" href="namespace_utility.php">Utility</a> {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;            </div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;            <span class="keyword">namespace </span>Detail {</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                <span class="keyword">typedef</span> std::uint_least32_t TruncatedHash;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    </div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                <span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> StoreHash&gt;</div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash.php">   38</a></span>&#160;                <span class="keyword">class </span><a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash.php">BucketEntryHash</a> {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                <span class="keyword">public</span> :    <span class="comment">// Methods</span></div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash.php#a44bbda026b156df237763c94c030e5ae">   44</a></span>&#160;<span class="comment"></span>                    <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash.php#a44bbda026b156df237763c94c030e5ae">bucketHashEquals</a>(std::size_t)<span class="keyword"> const </span>{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                    }</div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash.php#ad1dc8a5312f8fc3a6189564eb8df152c">   50</a></span>&#160;                    TruncatedHash <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash.php#ad1dc8a5312f8fc3a6189564eb8df152c">getTruncatedHash</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                        <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                    }</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    </div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                <span class="keyword">protected</span> : <span class="comment">// Methods</span></div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash.php#a7610dfcbf24281cb5eff7b7f08e95c76">   58</a></span>&#160;<span class="comment"></span>                    <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash.php#a7610dfcbf24281cb5eff7b7f08e95c76">setHash</a>(TruncatedHash) {</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                    }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                };</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    </div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                <span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash_3_01true_01_4.php">   67</a></span>&#160;                <span class="keyword">class </span><a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash.php">BucketEntryHash</a>&lt;true&gt; {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                <span class="keyword">private</span> :   <span class="comment">// Fields</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                    TruncatedHash <a class="code" href="classhash.php">hash</a>;     </div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                <span class="keyword">public</span> :    <span class="comment">// Methods</span></div><div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash_3_01true_01_4.php#a6e125a3385973a5cb3c77adadeb07992">   77</a></span>&#160;<span class="comment"></span>                    <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash_3_01true_01_4.php#a6e125a3385973a5cb3c77adadeb07992">bucketHashEquals</a>(std::size_t h)<span class="keyword"> const </span>{</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                        <span class="keywordflow">return</span> hash == TruncatedHash(h);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                    }</div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash_3_01true_01_4.php#aa22d25b91b7a3269b3b68871fdc11181">   83</a></span>&#160;                    TruncatedHash <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash_3_01true_01_4.php#aa22d25b91b7a3269b3b68871fdc11181">getTruncatedHash</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                        <span class="keywordflow">return</span> hash;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    </div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                <span class="keyword">protected</span> : <span class="comment">// Methods</span></div><div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash_3_01true_01_4.php#a1d4d440370198a77ed36ddbd48a314ce">   92</a></span>&#160;<span class="comment"></span>                    <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash_3_01true_01_4.php#a1d4d440370198a77ed36ddbd48a314ce">setHash</a>(TruncatedHash h) {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                        hash = TruncatedHash(h);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                    }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                };</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    </div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                <span class="keyword">template</span> &lt;<span class="keyword">class</span> ValueType, <span class="keywordtype">bool</span> StoreHash&gt;</div><div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry.php">  102</a></span>&#160;                <span class="keyword">class </span><a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry.php">BucketEntry</a> : <span class="keyword">public</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash.php">BucketEntryHash</a>&lt;StoreHash&gt; {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                <span class="keyword">public</span> :    <span class="comment">// Typedef</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    <span class="keyword">typedef</span> std::int_least16_t DistanceType;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    <span class="keyword">typedef</span> <span class="keyword">typename</span> std::aligned_storage&lt;sizeof(ValueType), alignof(ValueType)&gt;::type Storage;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    </div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                <span class="keyword">private</span> :   <span class="comment">// Fields</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    DistanceType distanceToNext;    </div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    <span class="keywordtype">bool</span> last;                      </div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    Storage data;                   </div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                <span class="keyword">public</span> :    <span class="comment">// Methods</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                    <span class="comment">//## Constructor ##//</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"></span>                    <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry.php">BucketEntry</a>();</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry.php">BucketEntry</a>(<span class="keywordtype">bool</span> state);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        </div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    <span class="comment">//## Copy Constructor ##//</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"></span>                    <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry.php">BucketEntry</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry.php">BucketEntry</a> <span class="keyword">const</span>&amp; bucket);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        </div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    <span class="comment">//## Move Constructor ##//</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"></span>                    <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry.php">BucketEntry</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry.php">BucketEntry</a> &amp;&amp; bucket);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        </div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                    <span class="comment">//## Deconstructor ##//</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment"></span>                    ~<a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry.php">BucketEntry</a>();</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        </div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                    <span class="comment">//## Getter ##//</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment"></span>                    <span class="keywordtype">bool</span> isEmpty() <span class="keyword">const</span>;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                    <span class="keywordtype">bool</span> isLastBucket() <span class="keyword">const</span>;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                    DistanceType getDistanceToNext() <span class="keyword">const</span>;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                    ValueType&amp; getData();</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                    ValueType <span class="keyword">const</span>&amp; getData() <span class="keyword">const</span>;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        </div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    <span class="comment">//## Setter ##//</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment"></span>                    <span class="keywordtype">void</span> setAsLastBucket();</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                    <span class="keywordtype">void</span> setData(DistanceType distance, TruncatedHash h, ValueType &amp;&amp; newData);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        </div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                    <span class="comment">//## Methods ##//</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment"></span>                    <span class="keywordtype">void</span> clear();</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                    <span class="keywordtype">void</span> swapWithData(DistanceType&amp; distance, TruncatedHash&amp; h, ValueType&amp; newData);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        </div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                    <span class="comment">//## Assignment Operator ##//</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment"></span>                    <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry.php">BucketEntry</a>&amp; operator =(<a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry.php">BucketEntry</a> <span class="keyword">const</span>&amp; bucket);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                    <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry.php">BucketEntry</a>&amp; operator =(<a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry.php">BucketEntry</a> &amp;&amp; bucket);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    </div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                <span class="keyword">public</span> :    <span class="comment">// Static</span></div><div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry.php#abbcb1b8b41205bc789a169b6683aecc6">  207</a></span>&#160;                    <span class="keyword">static</span> <span class="keyword">const</span> DistanceType EMPTY_BUCKET_DISTANCE = -1; </div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                };</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    </div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                <span class="keyword">template</span> &lt;<span class="keyword">class</span> Key, <span class="keyword">class</span> T, <span class="keywordtype">bool</span> StoreHash = false, <span class="keyword">class</span> Hash = std::hash&lt;Key&gt;, <span class="keyword">class</span> KeyEqual = std::equal_to&lt;Key&gt;&gt;</div><div class="line"><a name="l00216"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">  216</a></span>&#160;                <span class="keyword">class </span><a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a> : <span class="keyword">public</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_stringable.php">Stringable</a>&lt;HashTable&lt;Key, T, StoreHash, Hash, KeyEqual&gt;&gt;, <span class="keyword">private</span> Hash, <span class="keyword">private</span> KeyEqual {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                <span class="keyword">public</span> :    <span class="comment">// Typedef</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                    <span class="keyword">typedef</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair&lt;Key, T&gt;</a> <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a>;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    </div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                <span class="keyword">private</span> :   <span class="comment">// Static</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                    <span class="keyword">static</span> constexpr <span class="keywordtype">bool</span> STORE_HASH = StoreHash || ((<span class="keyword">sizeof</span>(<a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry.php">BucketEntry&lt;ValueType, true&gt;</a>) == <span class="keyword">sizeof</span>(<a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry.php">BucketEntry&lt;ValueType, false&gt;</a>)) &amp;&amp; (!std::is_arithmetic&lt;Key&gt;::value || !std::is_same&lt;Hash, std::hash&lt;Key&gt;&gt;::value));    </div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                <span class="keyword">public</span> :     <span class="comment">// Iterator</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                    <span class="keyword">typedef</span> <span class="keyword">typename</span> BucketEntry&lt;ValueType, STORE_HASH&gt;::DistanceType DistanceType;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        </div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                    <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00231"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_forward_iterator.php">  231</a></span>&#160;                    <span class="keyword">class </span><a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a> {</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                        <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                    <span class="keyword">private</span> :   <span class="comment">// Fields</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry.php">BucketEntry&lt;ValueType, STORE_HASH&gt;</a>* current;   </div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                    <span class="keyword">public</span> :    <span class="comment">// Methods</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                        <span class="keyword">typedef</span> std::ptrdiff_t difference_type;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                        <span class="keyword">typedef</span> <span class="keyword">typename</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">HashTable::ValueType</a> <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">value_type</a>;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                        <span class="keyword">typedef</span> value_type* <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">pointer</a>;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                        <span class="keyword">typedef</span> value_type&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">reference</a>;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                        <span class="keyword">typedef</span> std::forward_iterator_tag iterator_category;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            </div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                        <span class="comment">//## Constructor ##//</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry.php">BucketEntry&lt;ValueType, STORE_HASH&gt;</a>* bucket);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a>(<span class="keyword">const</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry.php">BucketEntry&lt;ValueType, STORE_HASH&gt;</a>* bucket);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            </div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                        <span class="comment">//## Copy Constructor ##//</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a> <span class="keyword">const</span>&amp; it) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            </div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                        <span class="comment">//## Deconstructor ##//</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment"></span>                        ~<a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            </div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                        <span class="comment">//## Assignment Operator ##//</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a>&amp; operator =(<a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a> <span class="keyword">const</span>&amp; it) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            </div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                        <span class="comment">//## Access Operator ##//</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment"></span>                        K&amp; operator*() <span class="keyword">const</span>;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                        K* operator-&gt;() <span class="keyword">const</span>;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            </div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                        <span class="comment">//## Increment Operator ##//</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a>&amp; operator++();</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a> operator++(<span class="keywordtype">int</span>);</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            </div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                        <span class="comment">//## Comparison Operator ##//</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment"></span>                        <span class="keywordtype">bool</span> operator==(<a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a> <span class="keyword">const</span>&amp; it) <span class="keyword">const</span>;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                        <span class="keywordtype">bool</span> operator!=(<a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a> <span class="keyword">const</span>&amp; it) <span class="keyword">const</span>;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                    };</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        </div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                    <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00324"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">  324</a></span>&#160;                    <span class="keyword">class </span><a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a> {</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                        <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                    <span class="keyword">private</span> :   <span class="comment">// Fields</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry.php">BucketEntry&lt;ValueType, STORE_HASH&gt;</a>* current;   </div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                    <span class="keyword">public</span> :    <span class="comment">// Methods</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                        <span class="keyword">typedef</span> std::ptrdiff_t difference_type;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                        <span class="keyword">typedef</span> <span class="keyword">typename</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">HashTable::ValueType</a> <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">value_type</a>;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                        <span class="keyword">typedef</span> value_type* <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">pointer</a>;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                        <span class="keyword">typedef</span> value_type&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">reference</a>;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                        <span class="keyword">typedef</span> std::forward_iterator_tag iterator_category;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            </div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                        <span class="comment">//## Constructor ##//</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry.php">BucketEntry&lt;ValueType, STORE_HASH&gt;</a>* bucket);</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a>(<span class="keyword">const</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry.php">BucketEntry&lt;ValueType, STORE_HASH&gt;</a>* bucket);</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            </div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                        <span class="comment">//## Copy Constructor ##//</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a> <span class="keyword">const</span>&amp; it) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            </div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                        <span class="comment">//## Deconstructor ##//</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="comment"></span>                        ~<a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            </div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                        <span class="comment">//## Assignment Operator ##//</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a>&amp; operator =(<a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a> <span class="keyword">const</span>&amp; it) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            </div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                        <span class="comment">//## Access Operator ##//</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="comment"></span>                        K&amp; operator*() <span class="keyword">const</span>;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                        K* operator-&gt;() <span class="keyword">const</span>;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            </div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                        <span class="comment">//## Increment Operator ##//</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a>&amp; operator++();</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a> operator++(<span class="keywordtype">int</span>);</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            </div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                        <span class="comment">//## Comparison Operator ##//</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="comment"></span>                        <span class="keywordtype">bool</span> operator==(<a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a> <span class="keyword">const</span>&amp; it) <span class="keyword">const</span>;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                        <span class="keywordtype">bool</span> operator!=(<a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a> <span class="keyword">const</span>&amp; it) <span class="keyword">const</span>;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                    };</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        </div><div class="line"><a name="l00413"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">  413</a></span>&#160;                    <span class="keyword">typedef</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator&lt;ValueType&gt;</a>          <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">Iterator</a>;</div><div class="line"><a name="l00415"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">  415</a></span>&#160;                    <span class="keyword">typedef</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator&lt;const ValueType&gt;</a>    <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">ConstIterator</a>;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        </div><div class="line"><a name="l00418"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#ab231327983d1bd2c2d138e3bd951fe8a">  418</a></span>&#160;                    <span class="keyword">typedef</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator&lt;ValueType&gt;</a>          <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#ab231327983d1bd2c2d138e3bd951fe8a">LocalIterator</a>;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                    <span class="keyword">typedef</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator&lt;const ValueType&gt;</a>    <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a>;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    </div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                <span class="keyword">private</span> :    <span class="comment">// Fields</span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                    <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector&lt;BucketEntry&lt;ValueType, STORE_HASH&gt;</a>&gt; data;   </div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                    std::size_t nbElements;     </div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                    std::size_t mask;           </div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                    std::size_t loadThresHold;  </div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                    <span class="keywordtype">float</span> maxLoadFactor;        </div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                    <span class="keywordtype">bool</span> growAtNextInsert;      </div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                <span class="keyword">public</span> :     <span class="comment">// Methods</span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                    <span class="comment">//## Constructor ##//</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="comment"></span>                    <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>(std::size_t bucketCount , Hash <span class="keyword">const</span>&amp; hasher, KeyEqual <span class="keyword">const</span>&amp; equal);</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                    <span class="keyword">template</span> &lt;<span class="keyword">class</span> InputIterator&gt;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                    <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>(InputIterator begin, InputIterator end, std::size_t bucketCount, Hash <span class="keyword">const</span>&amp; hasher, KeyEqual <span class="keyword">const</span>&amp; equal);</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                    <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>(std::initializer_list&lt;ValueType&gt; list, std::size_t bucketCount, Hash <span class="keyword">const</span>&amp; hasher, KeyEqual <span class="keyword">const</span>&amp; equal);</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        </div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                    <span class="comment">//## Copy Constructor ##//</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="comment"></span>                    <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a> <span class="keyword">const</span>&amp; table);</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        </div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                    <span class="comment">//## Move Constructor ##//</span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="comment"></span>                    <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a> &amp;&amp; table);</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        </div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                    <span class="comment">//## Getter ##//</span></div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="comment"></span>                    T&amp; <span class="keyword">get</span>(Key <span class="keyword">const</span>&amp; k);</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                    T <span class="keyword">const</span>&amp; <span class="keyword">get</span>(Key <span class="keyword">const</span>&amp; k) <span class="keyword">const</span>;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                    std::size_t getBucketCount() <span class="keyword">const</span>;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                    constexpr std::size_t getMaxBucketCount() <span class="keyword">const</span>;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                    std::size_t getSize() <span class="keyword">const</span>;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                    <span class="keywordtype">float</span> getMaxLoadFactor() <span class="keyword">const</span>;</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                    <span class="keywordtype">float</span> getLoadFactor() <span class="keyword">const</span>;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                    constexpr std::size_t getMaxSize() <span class="keyword">const</span>;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                    <span class="keywordtype">bool</span> isEmpty() <span class="keyword">const</span>;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                    std::size_t getCount(Key <span class="keyword">const</span>&amp; k) <span class="keyword">const</span>;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                    std::size_t getBucket(Key <span class="keyword">const</span>&amp; k) <span class="keyword">const</span>;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        </div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                    <span class="comment">//## Setter ##//</span></div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="comment"></span>                    <span class="keywordtype">void</span> setMaxLoadFactor(<span class="keywordtype">float</span> factor);</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        </div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                    <span class="comment">//## Iterator Access ##//</span></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="comment"></span>                    Iterator begin();</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                    ConstIterator begin() <span class="keyword">const</span>;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                    ConstIterator cbegin() <span class="keyword">const</span>;</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                    Iterator end();</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                    ConstIterator end() <span class="keyword">const</span>;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                    ConstIterator cend() <span class="keyword">const</span>;</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                    LocalIterator begin(std::size_t index);</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;                    ConstLocalIterator begin(std::size_t index) <span class="keyword">const</span>;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                    ConstLocalIterator cbegin(std::size_t index) <span class="keyword">const</span>;</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                    LocalIterator end(std::size_t index);</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;                    ConstLocalIterator end(std::size_t index) <span class="keyword">const</span>;</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                    ConstLocalIterator cend(std::size_t index) <span class="keyword">const</span>;</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;        </div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                    <span class="comment">//## Methods ##//</span></div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;<span class="comment"></span>                    <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair&lt;Iterator, bool&gt;</a> insert(ValueType <span class="keyword">const</span>&amp; value);</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                    <span class="keyword">template</span> &lt;<span class="keyword">class</span> P&gt;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                    <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair&lt;Iterator, bool&gt;</a> insert(P &amp;&amp; value);</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;                    <span class="keyword">template</span> &lt;<span class="keyword">class</span> InputIterator&gt;</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;                    <span class="keywordtype">void</span> insert(InputIterator begin, InputIterator end);</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                    <span class="keywordtype">void</span> insert(std::initializer_list&lt;ValueType&gt; list);</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;                    Iterator insertHint(ConstIterator hint, ValueType <span class="keyword">const</span>&amp; value);</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;                    <span class="keyword">template</span> &lt;<span class="keyword">class</span> P&gt;</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;                    Iterator insertHint(ConstIterator hint, P &amp;&amp; value);</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                    <span class="keyword">template</span> &lt;<span class="keyword">class </span>... Args&gt;</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                    <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair&lt;Iterator, bool&gt;</a> emplace(Args &amp;&amp; ... args);</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                    <span class="keyword">template</span> &lt;<span class="keyword">class </span>... Args&gt;</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                    Iterator emplaceHint(ConstIterator hint, Args &amp;&amp; ... args);</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                    <span class="keywordtype">void</span> clear();</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;                    <span class="keywordtype">void</span> swap(<a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&amp; table);</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;                    <span class="keywordtype">void</span> reserve(std::size_t count);</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;                    <span class="keywordtype">void</span> rehash(std::size_t count);</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;                    <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair&lt;Iterator, Iterator&gt;</a> equalRange(Key <span class="keyword">const</span>&amp; key);</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                    <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair&lt;ConstIterator, ConstIterator&gt;</a> equalRange(Key <span class="keyword">const</span>&amp; key) <span class="keyword">const</span>;</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;                    Iterator find(Key <span class="keyword">const</span>&amp; k);</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;                    ConstIterator find(Key <span class="keyword">const</span>&amp; k) <span class="keyword">const</span>;</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;                    Iterator erase(Iterator pos);</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                    Iterator erase(ConstIterator pos);</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;                    Iterator erase(ConstIterator begin, ConstIterator end);</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;                    std::size_t erase(Key <span class="keyword">const</span>&amp; k);</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;                    Hash getHash() <span class="keyword">const</span>;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;                    KeyEqual getKeyEqual() <span class="keyword">const</span>;</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;        </div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;                    <span class="comment">//## Assignment Operator ##//</span></div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;<span class="comment"></span>                    <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&amp; operator =(<a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a> <span class="keyword">const</span>&amp; table);</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;                    <a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a>&amp; operator =(<a class="code" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">HashTable</a> &amp;&amp; table);</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;        </div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;                    <span class="comment">//## Access Operator ##//</span></div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;<span class="comment"></span>                    T&amp; operator[](Key <span class="keyword">const</span>&amp; k);</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;                    T&amp; operator[](Key &amp;&amp; k);</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;        </div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;                    <span class="comment">//## Stream Operator ##//</span></div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;<span class="comment"></span>                    <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">String</a> toString() <span class="keyword">const</span>;</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    </div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;                <span class="keyword">private</span> :   <span class="comment">// Methods</span></div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;<span class="comment"></span>                    std::size_t hashKey(Key <span class="keyword">const</span>&amp; k) <span class="keyword">const</span>;</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;                    <span class="keywordtype">bool</span> compareKey(Key <span class="keyword">const</span>&amp; k1, Key <span class="keyword">const</span>&amp; k2) <span class="keyword">const</span>;</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;                    std::size_t next(std::size_t index) <span class="keyword">const</span>;</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;                    std::size_t bucketFromHash(std::size_t <a class="code" href="classhash.php">hash</a>) <span class="keyword">const</span>;</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;                    std::size_t roundUpToPowerOfTwo(std::size_t count) <span class="keyword">const</span>;</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;                    <span class="keywordtype">void</span> insertValue(std::size_t index, DistanceType distanceToNext, TruncatedHash h, ValueType&amp; pair);</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;                    <span class="keywordtype">void</span> insertOnRehash(std::size_t index, DistanceType distanceToNext, TruncatedHash h, ValueType &amp;&amp; pair);</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;                    <span class="keywordtype">bool</span> rehashOnExtremeLoad();</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;                    std::size_t getNewSize() <span class="keyword">const</span>;</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;    </div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;                <span class="keyword">private</span> :    <span class="comment">// Static</span></div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;                    <span class="keyword">static</span> constexpr <span class="keywordtype">bool</span> USE_STORED_HASH_ON_LOOKUP = StoreHash;    </div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;                    <span class="keyword">static</span> constexpr <span class="keywordtype">float</span> DEFAULT_MAX_LOAD_FACTOR = 0.9f;          </div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;                    <span class="keyword">static</span> constexpr <span class="keywordtype">float</span> REHASH_MIN_LOAD_FACTOR = 0.15f;          </div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;                    <span class="keyword">static</span> <span class="keyword">const</span> DistanceType REHASH_HIGH_PROBE = 128;              </div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;                    <span class="keyword">static</span> <span class="keywordtype">bool</span> USE_STORED_HASH_ON_REHASH(std::size_t count) {</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;                        <span class="keywordflow">return</span> STORE_HASH &amp;&amp; count - 1 &lt;= std::numeric_limits&lt;TruncatedHash&gt;::max();</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;                    }</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    </div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;                <span class="keyword">public</span> :    <span class="comment">// Static</span></div><div class="line"><a name="l00837"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a8b5c83feca46fffd42008923459af247">  837</a></span>&#160;                    <span class="keyword">static</span> <span class="keyword">const</span> std::size_t DEFAULT_BUCKET_COUNT = 0;              </div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;                };</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;            }</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;        }</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;    }</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;<span class="preprocessor">    #include &quot;NRE_HashTable.tpp&quot;</span></div><div class="ttc" id="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash_php_a44bbda026b156df237763c94c030e5ae"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash.php#a44bbda026b156df237763c94c030e5ae">NRE::Utility::Detail::BucketEntryHash::bucketHashEquals</a></div><div class="ttdeci">bool bucketHashEquals(std::size_t) const </div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:44</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator_php"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_local_forward_iterator.php">NRE::Utility::Detail::HashTable::LocalForwardIterator</a></div><div class="ttdoc">Hash table local forward iterator. </div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:324</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash_php_a7610dfcbf24281cb5eff7b7f08e95c76"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash.php#a7610dfcbf24281cb5eff7b7f08e95c76">NRE::Utility::Detail::BucketEntryHash::setHash</a></div><div class="ttdeci">void setHash(TruncatedHash)</div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:58</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash_php"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash.php">NRE::Utility::Detail::BucketEntryHash</a></div><div class="ttdoc">Used to store the key hash, or not depending on the template value. </div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:38</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_pair_php"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_pair.php">NRE::Utility::Pair</a></div><div class="ttdoc">A basic template pair. </div><div class="ttdef"><b>Definition:</b> NRE_Pair.hpp:31</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash_3_01true_01_4_php_aa22d25b91b7a3269b3b68871fdc11181"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash_3_01true_01_4.php#aa22d25b91b7a3269b3b68871fdc11181">NRE::Utility::Detail::BucketEntryHash&lt; true &gt;::getTruncatedHash</a></div><div class="ttdeci">TruncatedHash getTruncatedHash() const </div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:83</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_php_ab231327983d1bd2c2d138e3bd951fe8a"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#ab231327983d1bd2c2d138e3bd951fe8a">NRE::Utility::Detail::HashTable::LocalIterator</a></div><div class="ttdeci">LocalForwardIterator&lt; ValueType &gt; LocalIterator</div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:418</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_stringable_php"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_stringable.php">NRE::Utility::Stringable</a></div><div class="ttdoc">Describe an stringable object. </div><div class="ttdef"><b>Definition:</b> NRE_Stringable.hpp:33</div></div>
<div class="ttc" id="classhash_php"><div class="ttname"><a href="classhash.php">hash</a></div><div class="ttdoc">Manage hashing for specialized version. </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_php_a21e1a7bba78650a7a682a0d4f1810a57"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#a21e1a7bba78650a7a682a0d4f1810a57">NRE::Utility::Detail::HashTable::ConstIterator</a></div><div class="ttdeci">ForwardIterator&lt; const ValueType &gt; ConstIterator</div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:415</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_php"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry.php">NRE::Utility::Detail::BucketEntry</a></div><div class="ttdoc">A bucket entry used as the hash table elements. </div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:102</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_php_aa4f58d2185b517a31f7cd3f15b8dc52c"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php#aa4f58d2185b517a31f7cd3f15b8dc52c">NRE::Utility::Detail::HashTable::Iterator</a></div><div class="ttdeci">ForwardIterator&lt; ValueType &gt; Iterator</div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:413</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_forward_iterator_php"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_1_1_forward_iterator.php">NRE::Utility::Detail::HashTable::ForwardIterator</a></div><div class="ttdoc">Hash table forward iterator. </div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:231</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash_3_01true_01_4_php_a6e125a3385973a5cb3c77adadeb07992"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash_3_01true_01_4.php#a6e125a3385973a5cb3c77adadeb07992">NRE::Utility::Detail::BucketEntryHash&lt; true &gt;::bucketHashEquals</a></div><div class="ttdeci">bool bucketHashEquals(std::size_t h) const </div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:77</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash_php_ad1dc8a5312f8fc3a6189564eb8df152c"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash.php#ad1dc8a5312f8fc3a6189564eb8df152c">NRE::Utility::Detail::BucketEntryHash::getTruncatedHash</a></div><div class="ttdeci">TruncatedHash getTruncatedHash() const </div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:50</div></div>
<div class="ttc" id="namespace_n_r_e_php"><div class="ttname"><a href="namespace_n_r_e.php">NRE</a></div><div class="ttdoc">The NearlyRealEngine&amp;#39;s global namespace. </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a></div><div class="ttdoc">A basic template string, with dynamic size, guarantee to be in contiguous memory. ...</div><div class="ttdef"><b>Definition:</b> NRE_String.hpp:38</div></div>
<div class="ttc" id="namespace_utility_php"><div class="ttname"><a href="namespace_utility.php">Utility</a></div><div class="ttdoc">Utility&amp;#39;s API. </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table_php"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_detail_1_1_hash_table.php">NRE::Utility::Detail::HashTable</a></div><div class="ttdoc">Based on TSL Robin Hash, An hashtable used in map and set, an associative container using linear prob...</div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:216</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash_3_01true_01_4_php_a1d4d440370198a77ed36ddbd48a314ce"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_detail_1_1_bucket_entry_hash_3_01true_01_4.php#a1d4d440370198a77ed36ddbd48a314ce">NRE::Utility::Detail::BucketEntryHash&lt; true &gt;::setHash</a></div><div class="ttdeci">void setHash(TruncatedHash h)</div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:92</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a></div><div class="ttdoc">A dynamic array, guarantee to be in contiguous memory. </div><div class="ttdef"><b>Definition:</b> NRE_Vector.hpp:35</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- HTML footer for doxygen 1.8.8-->
<!-- start footer part -->
</div>
</div>
</div>
</div>
</body>
</html>
