<!-- HTML header for doxygen 1.8.8-->
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <!-- For Mobile Devices -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
        <meta name="generator" content="Doxygen 1.8.11"/>
        <script type="text/javascript" src="../../js/jquery-2.1.1.min.js"></script>
        <title>NRE-Math: /mnt/c/Users/abell/Documents/GitHub/NRE-Utility/src/Utility/HashTable/NRE_HashTable.hpp Source File</title>
        <!--<link href="tabs.css" rel="stylesheet" type="text/css"/>-->
        <script type="text/javascript" src="dynsections.js"></script>
        <link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <link href='https://fonts.googleapis.com/css?family=Roboto+Slab' rel='stylesheet' type='text/css'>
        <?php
            include '../../php/navigation.php';
            if (!isset($_COOKIE["theme"]) || $_COOKIE["theme"] == "dark") {
                echo '<link href="../../css/dark/bootstrap.css" rel="stylesheet">';
            } else {
                echo '<link href="../../css/light/bootstrap.css" rel="stylesheet">';
            }
        ?>
        <script src="../../js/bootstrap.min.js"></script>
        <script type="text/javascript" src="doxy-boot.js"></script>
    </head>
    <body>
        <div class="container-fluid">
            <header class="page-header">
                <a href="../../../index.php">
                    <img src="../../img/Logo.png" class="logo img-responsive"/>
                </a>
            </header>
            <?php addNavigationBarInl(false); ?>
            <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
                <div class="content" id="content">
                    <div class="container">
                        <div class="row">
                            <div class="col-sm-12 panel " style="padding-bottom: 15px;">
                                <div style="margin-bottom: 15px;">
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li><a href="annotated.php"><span>Classes</span></a></li>
      <li class="current"><a href="files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.php"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.php">src</a></li><li class="navelem"><a class="el" href="dir_9761b53e3d9349800c0cb59b71c8cd3d.php">Utility</a></li><li class="navelem"><a class="el" href="dir_816ecf5d6339a20bbafcd6370c27be51.php">HashTable</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">NRE_HashTable.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_r_e___hash_table_8hpp.php">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">     #pragma once</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">     #include &lt;climits&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">     #include &quot;../String/NRE_String.hpp&quot;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">     #include &quot;../Pair/NRE_Pair.hpp&quot;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">     #include &quot;../Vector/NRE_Vector.hpp&quot;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="keyword">namespace </span><a class="code" href="namespace_n_r_e.php">NRE</a> {</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        <span class="keyword">namespace </span><a class="code" href="namespace_utility.php">Utility</a> {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;            <span class="keyword">typedef</span> std::uint_least32_t TruncatedHash;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            <span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> StoreHash&gt;</div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_bucket_entry_hash.php">   36</a></span>&#160;            <span class="keyword">class </span><a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry_hash.php">BucketEntryHash</a> {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                <span class="keyword">public</span> :    <span class="comment">// Methods</span></div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_bucket_entry_hash.php#a6a0f44c490c0f828d1377a231d1166d4">   42</a></span>&#160;<span class="comment"></span>                    <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry_hash.php#a6a0f44c490c0f828d1377a231d1166d4">bucketHashEquals</a>(std::size_t)<span class="keyword"> const </span>{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                    }</div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_bucket_entry_hash.php#a649b8be8873d8550244a7656a98921e1">   48</a></span>&#160;                    TruncatedHash <a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry_hash.php#a649b8be8873d8550244a7656a98921e1">getTruncatedHash</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                        <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                    }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                <span class="keyword">protected</span> : <span class="comment">// Methods</span></div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_bucket_entry_hash.php#ac5fb7ad7eaffbd1b53fb77c49a8e2722">   56</a></span>&#160;<span class="comment"></span>                    <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry_hash.php#ac5fb7ad7eaffbd1b53fb77c49a8e2722">setHash</a>(TruncatedHash) {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                    }</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            };</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_bucket_entry_hash_3_01true_01_4.php">   65</a></span>&#160;            <span class="keyword">class </span><a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry_hash.php">BucketEntryHash</a>&lt;true&gt; {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                <span class="keyword">private</span> :   <span class="comment">// Fields</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                    TruncatedHash hash;     </div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                <span class="keyword">public</span> :    <span class="comment">// Methods</span></div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_bucket_entry_hash_3_01true_01_4.php#a6c2f26dbdc3db097c8d816a36f57da09">   75</a></span>&#160;<span class="comment"></span>                    <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry_hash_3_01true_01_4.php#a6c2f26dbdc3db097c8d816a36f57da09">bucketHashEquals</a>(std::size_t h)<span class="keyword"> const </span>{</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                        <span class="keywordflow">return</span> hash == TruncatedHash(h);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                    }</div><div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_bucket_entry_hash_3_01true_01_4.php#a3d383bfd7978cfcd5046d3873f6f2ca7">   81</a></span>&#160;                    TruncatedHash <a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry_hash_3_01true_01_4.php#a3d383bfd7978cfcd5046d3873f6f2ca7">getTruncatedHash</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                        <span class="keywordflow">return</span> hash;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <span class="keyword">protected</span> : <span class="comment">// Methods</span></div><div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_bucket_entry_hash_3_01true_01_4.php#a98242f5c96163a27cb1c3526ebaced35">   90</a></span>&#160;<span class="comment"></span>                    <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry_hash_3_01true_01_4.php#a98242f5c96163a27cb1c3526ebaced35">setHash</a>(TruncatedHash h) {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                        hash = TruncatedHash(h);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                    }</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            };</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> ValueType, <span class="keywordtype">bool</span> StoreHash&gt;</div><div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_bucket_entry.php">  100</a></span>&#160;            <span class="keyword">class </span><a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry.php">BucketEntry</a> : <span class="keyword">public</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry_hash.php">BucketEntryHash</a>&lt;StoreHash&gt; {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                <span class="keyword">public</span> :    <span class="comment">// Typedef</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                    <span class="keyword">typedef</span> std::int_least16_t DistanceType;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    <span class="keyword">typedef</span> <span class="keyword">typename</span> std::aligned_storage&lt;sizeof(ValueType), alignof(ValueType)&gt;::type Storage;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                <span class="keyword">private</span> :   <span class="comment">// Fields</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    DistanceType distanceToNext;    </div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    <span class="keywordtype">bool</span> last;                      </div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    Storage data;                   </div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                <span class="keyword">public</span> :    <span class="comment">// Methods</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    <span class="comment">//## Constructor ##//</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry.php">BucketEntry</a>();</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry.php">BucketEntry</a>(<span class="keywordtype">bool</span> state);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    <span class="comment">//## Copy Constructor ##//</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry.php">BucketEntry</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry.php">BucketEntry</a> <span class="keyword">const</span>&amp; bucket);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    <span class="comment">//## Move Constructor ##//</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry.php">BucketEntry</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry.php">BucketEntry</a> &amp;&amp; bucket);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                    <span class="comment">//## Deconstructor ##//</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment"></span>                        ~<a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry.php">BucketEntry</a>();</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                    <span class="comment">//## Getter ##//</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment"></span>                        <span class="keywordtype">bool</span> isEmpty() <span class="keyword">const</span>;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                        <span class="keywordtype">bool</span> isLastBucket() <span class="keyword">const</span>;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                        DistanceType getDistanceToNext() <span class="keyword">const</span>;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                        ValueType&amp; getData();</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                        ValueType <span class="keyword">const</span>&amp; getData() <span class="keyword">const</span>;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                    <span class="comment">//## Setter ##//</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment"></span>                        <span class="keywordtype">void</span> setAsLastBucket();</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                        <span class="keywordtype">void</span> setData(DistanceType distance, TruncatedHash h, ValueType &amp;&amp; newData);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                    <span class="comment">//## Methods ##//</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment"></span>                        <span class="keywordtype">void</span> clear();</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                        <span class="keywordtype">void</span> swapWithData(DistanceType&amp; distance, TruncatedHash&amp; h, ValueType&amp; newData);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                    <span class="comment">//## Assignment Operator ##//</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry.php">BucketEntry</a>&amp; operator =(<a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry.php">BucketEntry</a> <span class="keyword">const</span>&amp; bucket);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry.php">BucketEntry</a>&amp; operator =(<a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry.php">BucketEntry</a> &amp;&amp; bucket);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                <span class="keyword">public</span> :    <span class="comment">// Static</span></div><div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_bucket_entry.php#a0fef8d48cbabdbc2ad0f8f1bfeccbf9a">  205</a></span>&#160;                    <span class="keyword">static</span> <span class="keyword">const</span> DistanceType EMPTY_BUCKET_DISTANCE = -1; </div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            };</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> Key, <span class="keyword">class</span> T, <span class="keywordtype">bool</span> StoreHash = false, <span class="keyword">class</span> Hash = std::hash&lt;Key&gt;, <span class="keyword">class</span> KeyEqual = std::equal_to&lt;Key&gt;&gt;</div><div class="line"><a name="l00214"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_hash_table.php">  214</a></span>&#160;            <span class="keyword">class </span><a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a> : <span class="keyword">private</span> Hash, <span class="keyword">private</span> KeyEqual {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                <span class="keyword">public</span> :    <span class="comment">// Typedef</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    <span class="keyword">typedef</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair&lt;Key, T&gt;</a> <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">ValueType</a>;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                <span class="keyword">private</span> :   <span class="comment">// Static</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                    <span class="keyword">static</span> constexpr <span class="keywordtype">bool</span> STORE_HASH = StoreHash || ((<span class="keyword">sizeof</span>(<a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry.php">BucketEntry&lt;ValueType, true&gt;</a>) == <span class="keyword">sizeof</span>(<a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry.php">BucketEntry&lt;ValueType, false&gt;</a>)) &amp;&amp; (!std::is_arithmetic&lt;Key&gt;::value || !std::is_same&lt;Hash, std::hash&lt;Key&gt;&gt;::value));    </div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                <span class="keyword">public</span> :     <span class="comment">// Iterator</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                    <span class="keyword">typedef</span> <span class="keyword">typename</span> BucketEntry&lt;ValueType, STORE_HASH&gt;::DistanceType DistanceType;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                    <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00229"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">  229</a></span>&#160;                    <span class="keyword">class </span><a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a> {</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                        <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                        <span class="keyword">private</span> :   <span class="comment">// Fields</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                            <a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry.php">BucketEntry&lt;ValueType, STORE_HASH&gt;</a>* current;   </div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                        <span class="keyword">public</span> :    <span class="comment">// Methods</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                            <span class="keyword">typedef</span> std::ptrdiff_t difference_type;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                            <span class="keyword">typedef</span> <span class="keyword">typename</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">HashTable::ValueType</a> <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">value_type</a>;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                            <span class="keyword">typedef</span> value_type* <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">pointer</a>;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                            <span class="keyword">typedef</span> value_type&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">reference</a>;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                            <span class="keyword">typedef</span> std::forward_iterator_tag iterator_category;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                            <span class="comment">//## Constructor ##//</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment"></span>                                <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                                <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry.php">BucketEntry&lt;ValueType, STORE_HASH&gt;</a>* bucket);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                                <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a>(<span class="keyword">const</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry.php">BucketEntry&lt;ValueType, STORE_HASH&gt;</a>* bucket);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                            <span class="comment">//## Copy Constructor ##//</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment"></span>                                <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a> <span class="keyword">const</span>&amp; it) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                            <span class="comment">//## Deconstructor ##//</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment"></span>                                ~<a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                            <span class="comment">//## Assignment Operator ##//</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment"></span>                                <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a>&amp; operator =(<a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a> <span class="keyword">const</span>&amp; it) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                            <span class="comment">//## Access Operator ##//</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment"></span>                                K&amp; operator*() <span class="keyword">const</span>;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                                K* operator-&gt;() <span class="keyword">const</span>;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                            <span class="comment">//## Increment Operator ##//</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment"></span>                                <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a>&amp; operator++();</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                                <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a> operator++(<span class="keywordtype">int</span>);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                            <span class="comment">//## Comparison Operator ##//</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment"></span>                                <span class="keywordtype">bool</span> operator==(<a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a> <span class="keyword">const</span>&amp; it) <span class="keyword">const</span>;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                                <span class="keywordtype">bool</span> operator!=(<a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator</a> <span class="keyword">const</span>&amp; it) <span class="keyword">const</span>;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                    };</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                    <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00322"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">  322</a></span>&#160;                    <span class="keyword">class </span><a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a> {</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                        <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                        <span class="keyword">private</span> :   <span class="comment">// Fields</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                            <a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry.php">BucketEntry&lt;ValueType, STORE_HASH&gt;</a>* current;   </div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                        <span class="keyword">public</span> :    <span class="comment">// Methods</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                            <span class="keyword">typedef</span> std::ptrdiff_t difference_type;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                            <span class="keyword">typedef</span> <span class="keyword">typename</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">HashTable::ValueType</a> <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">value_type</a>;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                            <span class="keyword">typedef</span> value_type* <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">pointer</a>;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                            <span class="keyword">typedef</span> value_type&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">reference</a>;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                            <span class="keyword">typedef</span> std::forward_iterator_tag iterator_category;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                            <span class="comment">//## Constructor ##//</span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="comment"></span>                                <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                                <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry.php">BucketEntry&lt;ValueType, STORE_HASH&gt;</a>* bucket);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                                <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a>(<span class="keyword">const</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_bucket_entry.php">BucketEntry&lt;ValueType, STORE_HASH&gt;</a>* bucket);</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                            <span class="comment">//## Copy Constructor ##//</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment"></span>                                <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a> <span class="keyword">const</span>&amp; it) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                            <span class="comment">//## Deconstructor ##//</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment"></span>                                ~<a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                            <span class="comment">//## Assignment Operator ##//</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="comment"></span>                                <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a>&amp; operator =(<a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a> <span class="keyword">const</span>&amp; it) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                            <span class="comment">//## Access Operator ##//</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment"></span>                                K&amp; operator*() <span class="keyword">const</span>;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                                K* operator-&gt;() <span class="keyword">const</span>;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                            <span class="comment">//## Increment Operator ##//</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="comment"></span>                                <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a>&amp; operator++();</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                                <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a> operator++(<span class="keywordtype">int</span>);</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                            <span class="comment">//## Comparison Operator ##//</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="comment"></span>                                <span class="keywordtype">bool</span> operator==(<a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a> <span class="keyword">const</span>&amp; it) <span class="keyword">const</span>;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                                <span class="keywordtype">bool</span> operator!=(<a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator</a> <span class="keyword">const</span>&amp; it) <span class="keyword">const</span>;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                    };</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div><div class="line"><a name="l00411"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">  411</a></span>&#160;                    <span class="keyword">typedef</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator&lt;ValueType&gt;</a>          <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">Iterator</a>;</div><div class="line"><a name="l00413"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">  413</a></span>&#160;                    <span class="keyword">typedef</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">ForwardIterator&lt;const ValueType&gt;</a>    <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">ConstIterator</a>;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div><div class="line"><a name="l00416"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_hash_table.php#add5494be99938c1e6fb845ce18d82720">  416</a></span>&#160;                    <span class="keyword">typedef</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator&lt;ValueType&gt;</a>          <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table.php#add5494be99938c1e6fb845ce18d82720">LocalIterator</a>;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                    <span class="keyword">typedef</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">LocalForwardIterator&lt;const ValueType&gt;</a>    <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">ConstLocalIterator</a>;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                <span class="keyword">private</span> :    <span class="comment">// Fields</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                    <a class="code" href="class_n_r_e_1_1_utility_1_1_vector.php">Vector&lt;BucketEntry&lt;ValueType, STORE_HASH&gt;</a>&gt; data;   </div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                    std::size_t nbElements;     </div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                    std::size_t mask;           </div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                    std::size_t loadThresHold;  </div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                    <span class="keywordtype">float</span> maxLoadFactor;        </div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                    <span class="keywordtype">bool</span> growAtNextInsert;      </div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                <span class="keyword">public</span> :     <span class="comment">// Methods</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                    <span class="comment">//## Constructor ##//</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>(std::size_t bucketCount , Hash <span class="keyword">const</span>&amp; hasher, KeyEqual <span class="keyword">const</span>&amp; equal);</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> InputIterator&gt;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>(InputIterator begin, InputIterator end, std::size_t bucketCount, Hash <span class="keyword">const</span>&amp; hasher, KeyEqual <span class="keyword">const</span>&amp; equal);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>(std::initializer_list&lt;ValueType&gt; list, std::size_t bucketCount, Hash <span class="keyword">const</span>&amp; hasher, KeyEqual <span class="keyword">const</span>&amp; equal);</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                    <span class="comment">//## Copy Constructor ##//</span></div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a> <span class="keyword">const</span>&amp; table);</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                    <span class="comment">//## Move Constructor ##//</span></div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a> &amp;&amp; table);</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                    <span class="comment">//## Getter ##//</span></div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;<span class="comment"></span>                        T&amp; <span class="keyword">get</span>(Key <span class="keyword">const</span>&amp; k);</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                        T <span class="keyword">const</span>&amp; <span class="keyword">get</span>(Key <span class="keyword">const</span>&amp; k) <span class="keyword">const</span>;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                        std::size_t getBucketCount() <span class="keyword">const</span>;</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                        constexpr std::size_t getMaxBucketCount() <span class="keyword">const</span>;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                        std::size_t getSize() <span class="keyword">const</span>;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                        <span class="keywordtype">float</span> getMaxLoadFactor() <span class="keyword">const</span>;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                        <span class="keywordtype">float</span> getLoadFactor() <span class="keyword">const</span>;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                        constexpr std::size_t getMaxSize() <span class="keyword">const</span>;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                        <span class="keywordtype">bool</span> isEmpty() <span class="keyword">const</span>;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                        std::size_t getCount(Key <span class="keyword">const</span>&amp; k) <span class="keyword">const</span>;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                        std::size_t getBucket(Key <span class="keyword">const</span>&amp; k) <span class="keyword">const</span>;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                    <span class="comment">//## Setter ##//</span></div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="comment"></span>                        <span class="keywordtype">void</span> setMaxLoadFactor(<span class="keywordtype">float</span> factor);</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                    <span class="comment">//## Iterator Access ##//</span></div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="comment"></span>                        Iterator begin();</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                        ConstIterator begin() <span class="keyword">const</span>;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                        ConstIterator cbegin() <span class="keyword">const</span>;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                        Iterator end();</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                        ConstIterator end() <span class="keyword">const</span>;</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                        ConstIterator cend() <span class="keyword">const</span>;</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                        LocalIterator begin(std::size_t index);</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;                        ConstLocalIterator begin(std::size_t index) <span class="keyword">const</span>;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                        ConstLocalIterator cbegin(std::size_t index) <span class="keyword">const</span>;</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                        LocalIterator end(std::size_t index);</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                        ConstLocalIterator end(std::size_t index) <span class="keyword">const</span>;</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;                        ConstLocalIterator cend(std::size_t index) <span class="keyword">const</span>;</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                    <span class="comment">//## Methods ##//</span></div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair&lt;Iterator, bool&gt;</a> insert(ValueType <span class="keyword">const</span>&amp; value);</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> P&gt;</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair&lt;Iterator, bool&gt;</a> insert(P &amp;&amp; value);</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> InputIterator&gt;</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;                        <span class="keywordtype">void</span> insert(InputIterator begin, InputIterator end);</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;                        <span class="keywordtype">void</span> insert(std::initializer_list&lt;ValueType&gt; list);</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                        Iterator insertHint(ConstIterator hint, ValueType <span class="keyword">const</span>&amp; value);</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> P&gt;</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;                        Iterator insertHint(ConstIterator hint, P &amp;&amp; value);</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class </span>... Args&gt;</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair&lt;Iterator, bool&gt;</a> emplace(Args &amp;&amp; ... args);</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class </span>... Args&gt;</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;                        Iterator emplaceHint(ConstIterator hint, Args &amp;&amp; ... args);</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;                        <span class="keywordtype">void</span> clear();</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                        <span class="keywordtype">void</span> swap(<a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>&amp; table);</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;                        <span class="keywordtype">void</span> reserve(std::size_t count);</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                        <span class="keywordtype">void</span> rehash(std::size_t count);</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair&lt;Iterator, Iterator&gt;</a> equalRange(Key <span class="keyword">const</span>&amp; key);</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_pair.php">Pair&lt;ConstIterator, ConstIterator&gt;</a> equalRange(Key <span class="keyword">const</span>&amp; key) <span class="keyword">const</span>;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;                        Iterator find(Key <span class="keyword">const</span>&amp; k);</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;                        ConstIterator find(Key <span class="keyword">const</span>&amp; k) <span class="keyword">const</span>;</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;                        Iterator erase(Iterator pos);</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                        Iterator erase(ConstIterator pos);</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;                        Iterator erase(ConstIterator begin, ConstIterator end);</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                        std::size_t erase(Key <span class="keyword">const</span>&amp; k);</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;                        Hash getHash() <span class="keyword">const</span>;</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;                        KeyEqual getKeyEqual() <span class="keyword">const</span>;</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;                    <span class="comment">//## Assignment Operator ##//</span></div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>&amp; operator =(<a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a> <span class="keyword">const</span>&amp; table);</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a>&amp; operator =(<a class="code" href="class_n_r_e_1_1_utility_1_1_hash_table.php">HashTable</a> &amp;&amp; table);</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;                    <span class="comment">//## Access Operator ##//</span></div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;<span class="comment"></span>                        T&amp; operator[](Key <span class="keyword">const</span>&amp; k);</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;                        T&amp; operator[](Key &amp;&amp; k);</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;                    <span class="comment">//## Stream Operator ##//</span></div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">String</a> toString() <span class="keyword">const</span>;</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;                <span class="keyword">private</span> :   <span class="comment">// Methods</span></div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;<span class="comment"></span>                    std::size_t hashKey(Key <span class="keyword">const</span>&amp; k) <span class="keyword">const</span>;</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;                    <span class="keywordtype">bool</span> compareKey(Key <span class="keyword">const</span>&amp; k1, Key <span class="keyword">const</span>&amp; k2) <span class="keyword">const</span>;</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;                    std::size_t next(std::size_t index) <span class="keyword">const</span>;</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;                    std::size_t bucketFromHash(std::size_t hash) <span class="keyword">const</span>;</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;                    std::size_t roundUpToPowerOfTwo(std::size_t count) <span class="keyword">const</span>;</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;                    <span class="keywordtype">void</span> insertValue(std::size_t index, DistanceType distanceToNext, TruncatedHash h, ValueType&amp; pair);</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;                    <span class="keywordtype">void</span> insertOnRehash(std::size_t index, DistanceType distanceToNext, TruncatedHash h, ValueType &amp;&amp; pair);</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;                    <span class="keywordtype">bool</span> rehashOnExtremeLoad();</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;                    std::size_t getNewSize() <span class="keyword">const</span>;</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;                <span class="keyword">private</span> :    <span class="comment">// Static</span></div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;                    <span class="keyword">static</span> constexpr <span class="keywordtype">bool</span> USE_STORED_HASH_ON_LOOKUP = StoreHash;    </div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;                    <span class="keyword">static</span> constexpr <span class="keywordtype">float</span> DEFAULT_MAX_LOAD_FACTOR = 0.9f;          </div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;                    <span class="keyword">static</span> constexpr <span class="keywordtype">float</span> REHASH_MIN_LOAD_FACTOR = 0.15f;          </div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;                    <span class="keyword">static</span> <span class="keyword">const</span> DistanceType REHASH_HIGH_PROBE = 128;              </div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;                    <span class="keyword">static</span> <span class="keywordtype">bool</span> USE_STORED_HASH_ON_REHASH(std::size_t count) {</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;                        <span class="keywordflow">return</span> STORE_HASH &amp;&amp; count - 1 &lt;= std::numeric_limits&lt;TruncatedHash&gt;::max();</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;                    }</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;                <span class="keyword">public</span> :    <span class="comment">// Static</span></div><div class="line"><a name="l00835"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_hash_table.php#a00d7b0db04c8c757eb43cfe71d0e9134">  835</a></span>&#160;                    <span class="keyword">static</span> <span class="keyword">const</span> std::size_t DEFAULT_BUCKET_COUNT = 0;              </div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;            };</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> Key, <span class="keyword">class</span> T, <span class="keywordtype">bool</span> StoreHash, <span class="keyword">class</span> Hash, <span class="keyword">class</span> KeyEqual&gt;</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;            std::ostream&amp; operator &lt;&lt;(std::ostream&amp; stream, HashTable&lt;Key, T, StoreHash, Hash, KeyEqual&gt; <span class="keyword">const</span>&amp; o);</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;        }</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    }</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;<span class="preprocessor">    #include &quot;NRE_HashTable.tpp&quot;</span></div><div class="ttc" id="class_n_r_e_1_1_utility_1_1_bucket_entry_hash_3_01true_01_4_php_a3d383bfd7978cfcd5046d3873f6f2ca7"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_bucket_entry_hash_3_01true_01_4.php#a3d383bfd7978cfcd5046d3873f6f2ca7">NRE::Utility::BucketEntryHash&lt; true &gt;::getTruncatedHash</a></div><div class="ttdeci">TruncatedHash getTruncatedHash() const </div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:81</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_bucket_entry_hash_3_01true_01_4_php_a98242f5c96163a27cb1c3526ebaced35"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_bucket_entry_hash_3_01true_01_4.php#a98242f5c96163a27cb1c3526ebaced35">NRE::Utility::BucketEntryHash&lt; true &gt;::setHash</a></div><div class="ttdeci">void setHash(TruncatedHash h)</div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:90</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_hash_table_php"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_hash_table.php">NRE::Utility::HashTable</a></div><div class="ttdoc">Based on TSL Robin Hash, An hashtable used in map and set, an associative container using linear prob...</div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:214</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_pair_php"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_pair.php">NRE::Utility::Pair</a></div><div class="ttdoc">A basic template pair. </div><div class="ttdef"><b>Definition:</b> NRE_Pair.hpp:30</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_bucket_entry_hash_php_a6a0f44c490c0f828d1377a231d1166d4"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_bucket_entry_hash.php#a6a0f44c490c0f828d1377a231d1166d4">NRE::Utility::BucketEntryHash::bucketHashEquals</a></div><div class="ttdeci">bool bucketHashEquals(std::size_t) const </div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:42</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_hash_table_php_add5494be99938c1e6fb845ce18d82720"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_hash_table.php#add5494be99938c1e6fb845ce18d82720">NRE::Utility::HashTable::LocalIterator</a></div><div class="ttdeci">LocalForwardIterator&lt; ValueType &gt; LocalIterator</div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:416</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator_php"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_forward_iterator.php">NRE::Utility::HashTable::ForwardIterator</a></div><div class="ttdoc">Hash table forward iterator. </div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:229</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_hash_table_php_a8a7bff12e9a945c3e4993b79aea09996"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_hash_table.php#a8a7bff12e9a945c3e4993b79aea09996">NRE::Utility::HashTable::ConstIterator</a></div><div class="ttdeci">ForwardIterator&lt; const ValueType &gt; ConstIterator</div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:413</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_bucket_entry_hash_php_a649b8be8873d8550244a7656a98921e1"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_bucket_entry_hash.php#a649b8be8873d8550244a7656a98921e1">NRE::Utility::BucketEntryHash::getTruncatedHash</a></div><div class="ttdeci">TruncatedHash getTruncatedHash() const </div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:48</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_bucket_entry_hash_php_ac5fb7ad7eaffbd1b53fb77c49a8e2722"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_bucket_entry_hash.php#ac5fb7ad7eaffbd1b53fb77c49a8e2722">NRE::Utility::BucketEntryHash::setHash</a></div><div class="ttdeci">void setHash(TruncatedHash)</div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:56</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_bucket_entry_hash_php"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_bucket_entry_hash.php">NRE::Utility::BucketEntryHash</a></div><div class="ttdoc">Used to store the key hash, or not depending on the template value. </div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:36</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator_php"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_hash_table_1_1_local_forward_iterator.php">NRE::Utility::HashTable::LocalForwardIterator</a></div><div class="ttdoc">Hash table local forward iterator. </div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:322</div></div>
<div class="ttc" id="namespace_n_r_e_php"><div class="ttname"><a href="namespace_n_r_e.php">NRE</a></div><div class="ttdoc">The NearlyRealEngine&amp;#39;s global namespace. </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a></div><div class="ttdoc">A basic template string, with dynamic size, guarantee to be in contiguous memory. ...</div><div class="ttdef"><b>Definition:</b> NRE_String.hpp:36</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_bucket_entry_php"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_bucket_entry.php">NRE::Utility::BucketEntry</a></div><div class="ttdoc">A bucket entry used as the hash table elements. </div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:100</div></div>
<div class="ttc" id="namespace_utility_php"><div class="ttname"><a href="namespace_utility.php">Utility</a></div><div class="ttdoc">Utility&amp;#39;s API. </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_bucket_entry_hash_3_01true_01_4_php_a6c2f26dbdc3db097c8d816a36f57da09"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_bucket_entry_hash_3_01true_01_4.php#a6c2f26dbdc3db097c8d816a36f57da09">NRE::Utility::BucketEntryHash&lt; true &gt;::bucketHashEquals</a></div><div class="ttdeci">bool bucketHashEquals(std::size_t h) const </div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:75</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_hash_table_php_a6bb910fdc86e890e88208e90f36547cd"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_hash_table.php#a6bb910fdc86e890e88208e90f36547cd">NRE::Utility::HashTable::Iterator</a></div><div class="ttdeci">ForwardIterator&lt; ValueType &gt; Iterator</div><div class="ttdef"><b>Definition:</b> NRE_HashTable.hpp:411</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_vector_php"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_vector.php">NRE::Utility::Vector</a></div><div class="ttdoc">A dynamic array, guarantee to be in contiguous memory. </div><div class="ttdef"><b>Definition:</b> NRE_Vector.hpp:34</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- HTML footer for doxygen 1.8.8-->
<!-- start footer part -->
</div>
</div>
</div>
</div>
</div>
</div>
</body>
</html>
