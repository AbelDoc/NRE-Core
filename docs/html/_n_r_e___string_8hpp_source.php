<!-- HTML header for doxygen 1.8.8-->
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <!-- For Mobile Devices -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
        <meta name="generator" content="Doxygen 1.8.11"/>
        <script type="text/javascript" src="../../js/jquery-2.1.1.min.js"></script>
        <title>NRE-Utility: /mnt/c/Users/abell/Documents/GitHub/NRE-Utility/src/Utility/String/NRE_String.hpp Source File</title>
        <!--<link href="tabs.css" rel="stylesheet" type="text/css"/>-->
        <script type="text/javascript" src="dynsections.js"></script>
        <link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <link href='https://fonts.googleapis.com/css?family=Roboto+Slab' rel='stylesheet' type='text/css'>
        <?php
            include '../../php/navigation.php';
            if (!isset($_COOKIE["theme"]) || $_COOKIE["theme"] == "dark") {
                echo '<link href="../../css/dark/bootstrap.css" rel="stylesheet">';
            } else {
                echo '<link href="../../css/light/bootstrap.css" rel="stylesheet">';
            }
        ?>
        <script src="../../js/bootstrap.min.js"></script>
        <script type="text/javascript" src="doxy-boot.js"></script>
    </head>
    <body>
        <div class="container-fluid">
            <header class="page-header">
                <a href="../../../index.php">
                    <img src="../../img/Logo.png" class="logo img-responsive"/>
                </a>
            </header>
            <?php addNavigationBarInl(false); ?>
            <div id="top" class="row"><!-- do not remove this div, it is closed by doxygen! -->
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-body">
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li><a href="annotated.php"><span>Classes</span></a></li>
      <li class="current"><a href="files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.php"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.php">src</a></li><li class="navelem"><a class="el" href="dir_9761b53e3d9349800c0cb59b71c8cd3d.php">Utility</a></li><li class="navelem"><a class="el" href="dir_3e758474f82dd18a66ab1239e566c7da.php">String</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">NRE_String.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_r_e___string_8hpp.php">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">     #pragma once</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">     #include &lt;stdexcept&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">     #include &lt;utility&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">     #include &lt;limits&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">     #include &lt;cstring&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">     #include &lt;string&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">     #include &lt;cmath&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">     #include &lt;iostream&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="keyword">namespace </span><a class="code" href="namespace_n_r_e.php">NRE</a> {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <span class="keyword">namespace </span><a class="code" href="namespace_utility.php">Utility</a> {</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_basic_string.php">   36</a></span>&#160;            <span class="keyword">class </span><a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> {</div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a84fd549f39f627b1caf412fac4459597">   37</a></span>&#160;                static_assert(std::is_integral&lt;T&gt;::value, <span class="stringliteral">&quot;You can&#39;t use BasicString with non-integral types&quot;</span>); <span class="comment">// Only work with POD types but restreign to integral type</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                <span class="keyword">public</span> :    <span class="comment">// Iterator</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"></span>                    <span class="keyword">typedef</span> T*          <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a84fd549f39f627b1caf412fac4459597">Iterator</a>;</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">   42</a></span>&#160;                    <span class="keyword">typedef</span> <span class="keyword">const</span> T*    <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">ConstIterator</a>;</div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6ed577da05148ce11444e7aaa61e8619">   44</a></span>&#160;                    <span class="keyword">typedef</span> std::reverse_iterator&lt;T*&gt;          <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6ed577da05148ce11444e7aaa61e8619">ReverseIterator</a>;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                    <span class="keyword">typedef</span> std::reverse_iterator&lt;const T*&gt;    ConstReverseIterator;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                <span class="keyword">private</span> :   <span class="comment">// Fields</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                    std::size_t length;     </div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                    std::size_t capacity;   </div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                    T* data;                </div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                <span class="keyword">public</span> :    <span class="comment">// Methods</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                    <span class="comment">//## Constructor ##//</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a9a3f02658ae8cb4aefeaebfd72b92020">BasicString</a>();</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a9a3f02658ae8cb4aefeaebfd72b92020">BasicString</a>(std::size_t count, T value);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a9a3f02658ae8cb4aefeaebfd72b92020">BasicString</a>(std::size_t pos, std::size_t count, <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a9a3f02658ae8cb4aefeaebfd72b92020">BasicString</a>(std::size_t count, <span class="keyword">const</span> T* str);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a9a3f02658ae8cb4aefeaebfd72b92020">BasicString</a>(<span class="keyword">const</span> T* str);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> InputIterator&gt;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a9a3f02658ae8cb4aefeaebfd72b92020">BasicString</a>(InputIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a87336e1c57b46a945b6edf733b0a926d">begin</a>, InputIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40d0473b2964f19ba6f4a98696cc91b2">end</a>);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a9a3f02658ae8cb4aefeaebfd72b92020">BasicString</a>(std::initializer_list&lt;T&gt; init);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                    <span class="comment">//## Copy Constructor ##//</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a9a3f02658ae8cb4aefeaebfd72b92020">BasicString</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    <span class="comment">//## Move Constructor ##//</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a9a3f02658ae8cb4aefeaebfd72b92020">BasicString</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&amp; str);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    <span class="comment">//## Deconstructor ##//</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a4767aa21ed166bbcbba3346e20063c81">~BasicString</a>();</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                    <span class="comment">//## Getter ##//</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment"></span>                        T&amp; <span class="keyword">get</span>(std::size_t index);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                        T <span class="keyword">const</span>&amp; <span class="keyword">get</span>(std::size_t index) <span class="keyword">const</span>;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                        <span class="keyword">const</span> T* <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aa168f5bdce940de92d3f5c39e8159759">getData</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                        <span class="keyword">const</span> T* <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a0077ab896a00c0aa6e785fffb2b417d5">getCData</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                        T&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab3e4c324e16594a98292ff51b0b00267">getFront</a>();</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                        T <span class="keyword">const</span>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab3e4c324e16594a98292ff51b0b00267">getFront</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                        T&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a5e466d36e361dc572931d21896c527cd">getLast</a>();</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                        T <span class="keyword">const</span>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a5e466d36e361dc572931d21896c527cd">getLast</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a446670e0a8bf0b49e2c4dde3d7e68542">getSize</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6ed01f192a9c748153b095d56da2796a">getLength</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                        constexpr std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a649e9db31cfa007fcb42d3a72b67284c">getMaxSize</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a328ebd77a8bbb49a6776fefd417ebf4a">getCapacity</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                        <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20203ddad7a07bb0bdfb23260d7585f2">isEmpty</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    <span class="comment">//## Iterator Access ##//</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment"></span>                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a87336e1c57b46a945b6edf733b0a926d">begin</a>();</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                        ConstIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a87336e1c57b46a945b6edf733b0a926d">begin</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                        ConstIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a4fbaa10da05afb1e38f01550f089ec3b">cbegin</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40d0473b2964f19ba6f4a98696cc91b2">end</a>();</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                        ConstIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40d0473b2964f19ba6f4a98696cc91b2">end</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                        ConstIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aa620f4b3a6a6e8783fdb343b919e0ef6">cend</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                        ReverseIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a295b7f396e515c30e490d0d8a10b7e30">rbegin</a>();</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                        ConstReverseIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a295b7f396e515c30e490d0d8a10b7e30">rbegin</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                        ConstReverseIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a50d7fda113a402d7e7b18669aa7ea227">crbegin</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                        ReverseIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a009469819f09df8cafa2dce131d19cb2">rend</a>();</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                        ConstReverseIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a009469819f09df8cafa2dce131d19cb2">rend</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                        ConstReverseIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ae487050caf2434abc9b16bfab7241eba">crend</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                    <span class="comment">//## Methods ##//</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a009f07466409c0f15528f63e273f0a5e">assign</a>(std::size_t count, T value);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a009f07466409c0f15528f63e273f0a5e">assign</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a009f07466409c0f15528f63e273f0a5e">assign</a>(std::size_t pos, std::size_t count, <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str);</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a009f07466409c0f15528f63e273f0a5e">assign</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&amp; str);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a009f07466409c0f15528f63e273f0a5e">assign</a>(std::size_t count, <span class="keyword">const</span> T* str);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a009f07466409c0f15528f63e273f0a5e">assign</a>(<span class="keyword">const</span> T* str);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> InputIterator&gt;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a009f07466409c0f15528f63e273f0a5e">assign</a>(InputIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a87336e1c57b46a945b6edf733b0a926d">begin</a>, InputIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40d0473b2964f19ba6f4a98696cc91b2">end</a>);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a009f07466409c0f15528f63e273f0a5e">assign</a>(std::initializer_list&lt;T&gt; init);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a21efaef50166a748a6a26db815cfeef5">reserve</a>(std::size_t size);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6035700c6308e4161bfec5fee48730e0">clear</a>();</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a043d8789a2fcc13972175e55cb0ae9c0">reverse</a>();</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a043d8789a2fcc13972175e55cb0ae9c0">reverse</a>(std::size_t pos, std::size_t count);</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a408cb985f4efc28bc4a77b672ad65cf0">insert</a>(std::size_t start, std::size_t count, T value);</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a408cb985f4efc28bc4a77b672ad65cf0">insert</a>(std::size_t start, <span class="keyword">const</span> T* str);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a408cb985f4efc28bc4a77b672ad65cf0">insert</a>(std::size_t start,  std::size_t count, <span class="keyword">const</span> T* str);</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a408cb985f4efc28bc4a77b672ad65cf0">insert</a>(std::size_t start, <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str);</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a408cb985f4efc28bc4a77b672ad65cf0">insert</a>(std::size_t start, <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str, std::size_t index, std::size_t count);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a408cb985f4efc28bc4a77b672ad65cf0">insert</a>(ConstIterator start, T value);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a408cb985f4efc28bc4a77b672ad65cf0">insert</a>(ConstIterator start, std::size_t count, T value);</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> InputIterator&gt;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a408cb985f4efc28bc4a77b672ad65cf0">insert</a>(ConstIterator start, InputIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a87336e1c57b46a945b6edf733b0a926d">begin</a>, InputIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40d0473b2964f19ba6f4a98696cc91b2">end</a>);</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a408cb985f4efc28bc4a77b672ad65cf0">insert</a>(ConstIterator start, std::initializer_list&lt;T&gt; list);</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a8b2e04417a714f974453663ba7ffb6ef">erase</a>(std::size_t index, std::size_t count);</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a8b2e04417a714f974453663ba7ffb6ef">erase</a>(ConstIterator position);</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a8b2e04417a714f974453663ba7ffb6ef">erase</a>(ConstIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a87336e1c57b46a945b6edf733b0a926d">begin</a>, ConstIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40d0473b2964f19ba6f4a98696cc91b2">end</a>);</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a1fc5c8410a87b1802e3b006a7177569c">pushBack</a>(T value);</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a51b3da7e0493d6fd6a870629dabc871a">popBack</a>();</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20fb2d291dad6b589ddc5089c50fea1d">append</a>(K <span class="keyword">const</span>&amp; o);</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20fb2d291dad6b589ddc5089c50fea1d">append</a>(<span class="keywordtype">bool</span> value);</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20fb2d291dad6b589ddc5089c50fea1d">append</a>(T value);</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20fb2d291dad6b589ddc5089c50fea1d">append</a>(<span class="keywordtype">short</span> <span class="keywordtype">int</span> value);</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20fb2d291dad6b589ddc5089c50fea1d">append</a>(<span class="keywordtype">int</span> value);</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20fb2d291dad6b589ddc5089c50fea1d">append</a>(<span class="keywordtype">long</span> <span class="keywordtype">int</span> value);</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20fb2d291dad6b589ddc5089c50fea1d">append</a>(<span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> value);</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20fb2d291dad6b589ddc5089c50fea1d">append</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span> value);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20fb2d291dad6b589ddc5089c50fea1d">append</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> value);</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20fb2d291dad6b589ddc5089c50fea1d">append</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> value);</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20fb2d291dad6b589ddc5089c50fea1d">append</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> value);</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20fb2d291dad6b589ddc5089c50fea1d">append</a>(<span class="keywordtype">float</span> value);</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20fb2d291dad6b589ddc5089c50fea1d">append</a>(<span class="keywordtype">double</span> value);</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20fb2d291dad6b589ddc5089c50fea1d">append</a>(<span class="keywordtype">long</span> <span class="keywordtype">double</span> value);</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20fb2d291dad6b589ddc5089c50fea1d">append</a>(std::size_t count, T value);</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20fb2d291dad6b589ddc5089c50fea1d">append</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str);</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20fb2d291dad6b589ddc5089c50fea1d">append</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str, std::size_t index, std::size_t count);</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20fb2d291dad6b589ddc5089c50fea1d">append</a>(<span class="keyword">const</span> T* str, std::size_t count);</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20fb2d291dad6b589ddc5089c50fea1d">append</a>(<span class="keyword">const</span> T* str);</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20fb2d291dad6b589ddc5089c50fea1d">append</a>(std::string <span class="keyword">const</span>&amp; str);</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> InputIterator&gt;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20fb2d291dad6b589ddc5089c50fea1d">append</a>(InputIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a87336e1c57b46a945b6edf733b0a926d">begin</a>, InputIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40d0473b2964f19ba6f4a98696cc91b2">end</a>);</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20fb2d291dad6b589ddc5089c50fea1d">append</a>(std::initializer_list&lt;T&gt; list);</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                        <span class="keywordtype">int</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ad41793193f7610c892d24bb650c272db">compare</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str) <span class="keyword">const</span>;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                        <span class="keywordtype">int</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ad41793193f7610c892d24bb650c272db">compare</a>(std::size_t tPos, std::size_t tCount, <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str) <span class="keyword">const</span>;</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;                        <span class="keywordtype">int</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ad41793193f7610c892d24bb650c272db">compare</a>(std::size_t tPos, std::size_t tCount, <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str, std::size_t sPos, std::size_t sCount) <span class="keyword">const</span>;</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;                        <span class="keywordtype">int</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ad41793193f7610c892d24bb650c272db">compare</a>(<span class="keyword">const</span> T* str) <span class="keyword">const</span>;</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;                        <span class="keywordtype">int</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ad41793193f7610c892d24bb650c272db">compare</a>(std::size_t tPos, std::size_t tCount, <span class="keyword">const</span> T* str) <span class="keyword">const</span>;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;                        <span class="keywordtype">int</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ad41793193f7610c892d24bb650c272db">compare</a>(std::size_t tPos, std::size_t tCount, <span class="keyword">const</span> T* str, std::size_t sPos, std::size_t sCount) <span class="keyword">const</span>;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                        <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a047e6ea23a748f1001aab1c7e913171a">startsWith</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str) <span class="keyword">const</span>;</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                        <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a047e6ea23a748f1001aab1c7e913171a">startsWith</a>(T value) <span class="keyword">const</span>;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                        <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a047e6ea23a748f1001aab1c7e913171a">startsWith</a>(<span class="keyword">const</span> T* str) <span class="keyword">const</span>;</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;                        <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a477dbc8a44874807dd41a2d8b91ec14b">endsWith</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str) <span class="keyword">const</span>;</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                        <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a477dbc8a44874807dd41a2d8b91ec14b">endsWith</a>(T value) <span class="keyword">const</span>;</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                        <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a477dbc8a44874807dd41a2d8b91ec14b">endsWith</a>(<span class="keyword">const</span> T* str) <span class="keyword">const</span>;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ac196e1a45da4c10b3cea7ac859704c66">replace</a>(std::size_t pos, std::size_t count, <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str);</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ac196e1a45da4c10b3cea7ac859704c66">replace</a>(ConstIterator start, ConstIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40d0473b2964f19ba6f4a98696cc91b2">end</a>, <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str);</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ac196e1a45da4c10b3cea7ac859704c66">replace</a>(std::size_t tPos, std::size_t tCount, <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str, std::size_t sPos, std::size_t sCount);</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> InputIterator&gt;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ac196e1a45da4c10b3cea7ac859704c66">replace</a>(ConstIterator tStart, ConstIterator tEnd, <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str, InputIterator sStart, InputIterator sEnd);</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ac196e1a45da4c10b3cea7ac859704c66">replace</a>(std::size_t pos, std::size_t tCount, <span class="keyword">const</span> T* str, std::size_t sCount);</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ac196e1a45da4c10b3cea7ac859704c66">replace</a>(ConstIterator start, ConstIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40d0473b2964f19ba6f4a98696cc91b2">end</a>, <span class="keyword">const</span> T* str, std::size_t sCount);</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ac196e1a45da4c10b3cea7ac859704c66">replace</a>(std::size_t pos, std::size_t count, <span class="keyword">const</span> T* str);</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ac196e1a45da4c10b3cea7ac859704c66">replace</a>(ConstIterator start, ConstIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40d0473b2964f19ba6f4a98696cc91b2">end</a>, <span class="keyword">const</span> T* str);</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ac196e1a45da4c10b3cea7ac859704c66">replace</a>(std::size_t pos, std::size_t tCount, T value, std::size_t sCount);</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ac196e1a45da4c10b3cea7ac859704c66">replace</a>(ConstIterator start, ConstIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40d0473b2964f19ba6f4a98696cc91b2">end</a>, T value, std::size_t sCount);</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ac196e1a45da4c10b3cea7ac859704c66">replace</a>(ConstIterator start, ConstIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40d0473b2964f19ba6f4a98696cc91b2">end</a>, std::initializer_list&lt;T&gt; list);</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a0639e5b3e9ecf3f6fc07a0c13347266b">substr</a>(std::size_t pos, std::size_t count) <span class="keyword">const</span>;</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a1db70d8010b41e9d5d2f773cce692359">copy</a>(T* str, std::size_t pos, std::size_t count) <span class="keyword">const</span>;</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a828b20842d0d6de3e052f51e83f8dcec">resize</a>(std::size_t count);</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a828b20842d0d6de3e052f51e83f8dcec">resize</a>(std::size_t count, T value);</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6c5b14da8a367e0cb88268194e721ce0">swap</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; str);</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#afe91c26205f7c7f70d2a3edfb242fb88">shrinkToFit</a>();</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;                        <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a9cd15fa3754a286297b35ea3946db3b2">contains</a>(<span class="keyword">const</span> T* str) <span class="keyword">const</span>;</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;                        <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a9cd15fa3754a286297b35ea3946db3b2">contains</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str) <span class="keyword">const</span>;</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a173b725cf3bfbbcf401cdf2a44b16609">find</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str, std::size_t pos = 0) <span class="keyword">const</span>;</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a173b725cf3bfbbcf401cdf2a44b16609">find</a>(std::size_t count, <span class="keyword">const</span> T* str, std::size_t pos = 0) <span class="keyword">const</span>;</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a173b725cf3bfbbcf401cdf2a44b16609">find</a>(<span class="keyword">const</span> T* str, std::size_t pos = 0) <span class="keyword">const</span>;</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a173b725cf3bfbbcf401cdf2a44b16609">find</a>(T value, std::size_t pos = 0) <span class="keyword">const</span>;</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ae6b6578b24ac6d25bab6829a0ca445da">rfind</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str, std::size_t pos) <span class="keyword">const</span>;</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ae6b6578b24ac6d25bab6829a0ca445da">rfind</a>(std::size_t count, <span class="keyword">const</span> T* str, std::size_t pos) <span class="keyword">const</span>;</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ae6b6578b24ac6d25bab6829a0ca445da">rfind</a>(<span class="keyword">const</span> T* str, std::size_t pos) <span class="keyword">const</span>;</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ae6b6578b24ac6d25bab6829a0ca445da">rfind</a>(T value, std::size_t pos) <span class="keyword">const</span>;</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a364d9113d5f5ffe468e2abc0843c1b3b">findFirstOf</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str, std::size_t pos = 0) <span class="keyword">const</span>;</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a364d9113d5f5ffe468e2abc0843c1b3b">findFirstOf</a>(std::size_t count, <span class="keyword">const</span> T* str, std::size_t pos = 0) <span class="keyword">const</span>;</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a364d9113d5f5ffe468e2abc0843c1b3b">findFirstOf</a>(<span class="keyword">const</span> T* str, std::size_t pos = 0) <span class="keyword">const</span>;</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a364d9113d5f5ffe468e2abc0843c1b3b">findFirstOf</a>(T value, std::size_t pos = 0) <span class="keyword">const</span>;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a5479bebe9d7dbde8be07e476935468b2">findFirstNotOf</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str, std::size_t pos = 0) <span class="keyword">const</span>;</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a5479bebe9d7dbde8be07e476935468b2">findFirstNotOf</a>(std::size_t count, <span class="keyword">const</span> T* str, std::size_t pos = 0) <span class="keyword">const</span>;</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a5479bebe9d7dbde8be07e476935468b2">findFirstNotOf</a>(<span class="keyword">const</span> T* str, std::size_t pos = 0) <span class="keyword">const</span>;</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a5479bebe9d7dbde8be07e476935468b2">findFirstNotOf</a>(T value, std::size_t pos = 0) <span class="keyword">const</span>;</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a7ee2c392596a64a276edf3d90b3dc01a">findLastOf</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str, std::size_t pos) <span class="keyword">const</span>;</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a7ee2c392596a64a276edf3d90b3dc01a">findLastOf</a>(std::size_t count, <span class="keyword">const</span> T* str, std::size_t pos) <span class="keyword">const</span>;</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a7ee2c392596a64a276edf3d90b3dc01a">findLastOf</a>(<span class="keyword">const</span> T* str, std::size_t pos) <span class="keyword">const</span>;</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a7ee2c392596a64a276edf3d90b3dc01a">findLastOf</a>(T value, std::size_t pos) <span class="keyword">const</span>;</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#afe13e8614d8f30631ee893758c69275f">findLastNotOf</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str, std::size_t pos) <span class="keyword">const</span>;</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#afe13e8614d8f30631ee893758c69275f">findLastNotOf</a>(std::size_t count, <span class="keyword">const</span> T* str, std::size_t pos) <span class="keyword">const</span>;</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#afe13e8614d8f30631ee893758c69275f">findLastNotOf</a>(<span class="keyword">const</span> T* str, std::size_t pos) <span class="keyword">const</span>;</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#afe13e8614d8f30631ee893758c69275f">findLastNotOf</a>(T value, std::size_t pos) <span class="keyword">const</span>;</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;                    <span class="comment">//## Access Operator ##//</span></div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;<span class="comment"></span>                        T&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ace21e34dff89527e0e17355e0b6bfa24">operator[]</a>(std::size_t index);</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;                        T <span class="keyword">const</span>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ace21e34dff89527e0e17355e0b6bfa24">operator[]</a>(std::size_t index) <span class="keyword">const</span>;</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;                    <span class="comment">//## Assignment Operator ##//</span></div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a2a6ad7eedb04b8fea0193e1d80275ba6">operator =</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str);</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a2a6ad7eedb04b8fea0193e1d80275ba6">operator =</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> &amp;&amp; str);</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a2a6ad7eedb04b8fea0193e1d80275ba6">operator =</a>(<span class="keyword">const</span> T* str);</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a2a6ad7eedb04b8fea0193e1d80275ba6">operator =</a>(T value);</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a2a6ad7eedb04b8fea0193e1d80275ba6">operator =</a>(std::initializer_list&lt;T&gt; list);</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;                    <span class="comment">//## Shortcut Operator ##//</span></div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab4db6b5abd9d325e1a343e257b8799a2">operator+=</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str);</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab4db6b5abd9d325e1a343e257b8799a2">operator+=</a>(T value);</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab4db6b5abd9d325e1a343e257b8799a2">operator+=</a>(<span class="keyword">const</span> T* str);</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab4db6b5abd9d325e1a343e257b8799a2">operator+=</a>(std::initializer_list&lt;T&gt; list);</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;                    <span class="comment">//## Comparison Operator ##//</span></div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;<span class="comment"></span>                        <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a2cf9e947bb8ed9a5deae560978c131be">operator==</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str) <span class="keyword">const</span>;</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;                        <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#afaef88927e530b9475ce143779b7f851">operator!=</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str) <span class="keyword">const</span>;</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;                        <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab06ee127d12a726f58c955365592fe3f">operator&lt;</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str) <span class="keyword">const</span>;</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;                        <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a7d68e5ffd1eac743a66f364e1e064536">operator&lt;=</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str) <span class="keyword">const</span>;</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;                        <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#aa55fab1b4557936778147ed3450c0427">operator&gt;</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str) <span class="keyword">const</span>;</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;                        <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a8e216345ab62dd5997b65c21b333339f">operator&gt;=</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; str) <span class="keyword">const</span>;</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;                    <span class="comment">//## Stream Operator ##//</span></div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a> <span class="keyword">const</span>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a3869ddf5653784b3b5734572bbfd3159">toString</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php#a8c42d379cd90d3c8c02a0eeb31fd7482">operator &lt;&lt;</a>(K <span class="keyword">const</span>&amp; o);</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;                <span class="keyword">private</span> :   <span class="comment">// Methods</span></div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;<span class="comment"></span>                    <span class="keywordtype">void</span> reallocate();</div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;                    <span class="keywordtype">void</span> reallocate(std::size_t newSize);</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;                    <span class="keywordtype">void</span> reserveWithGrowFactor(std::size_t size);</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;                    <span class="keywordtype">void</span> addNullTerminated();</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;                    <span class="keywordtype">void</span> shift(std::size_t start, std::size_t count);</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;                    <span class="keywordtype">void</span> shiftBack(std::size_t start, std::size_t count);</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;                <span class="keyword">public</span> :     <span class="comment">// Static</span></div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;                    <span class="keyword">static</span> constexpr std::size_t NOT_FOUND = -1;</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;                <span class="keyword">private</span> :    <span class="comment">// Static</span></div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;                    <span class="keyword">static</span> constexpr <span class="keywordtype">float</span> GROW_FACTOR = 1.5;</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;                    <span class="keyword">static</span> constexpr std::size_t BASE_ALLOCATION_SIZE = 8;</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;            };</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;            <span class="keyword">typedef</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;char&gt;</a>    <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">String</a>;</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;            <span class="keyword">typedef</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;wchar_t&gt;</a> <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">WideString</a>;</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;            std::ostream&amp; operator &lt;&lt;(std::ostream&amp; stream, BasicString&lt;T&gt; <span class="keyword">const</span>&amp; o);</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;            std::istream&amp; operator &gt;&gt;(std::istream&amp; stream, <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a>&amp; o);</div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;            <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> <a class="code" href="_n_r_e___string_8hpp.php#a0a2123576c1cb87f5fbfb7e7cbcb2221">operator+</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> <span class="keyword">const</span>&amp; lhs, <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> <span class="keyword">const</span>&amp; rhs);</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;            <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> <a class="code" href="_n_r_e___string_8hpp.php#a0a2123576c1cb87f5fbfb7e7cbcb2221">operator+</a>(<span class="keyword">const</span> T* lhs, <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> <span class="keyword">const</span>&amp; rhs);</div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;            <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> <a class="code" href="_n_r_e___string_8hpp.php#a0a2123576c1cb87f5fbfb7e7cbcb2221">operator+</a>(T lhs, <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> <span class="keyword">const</span>&amp; rhs);</div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;            <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> <a class="code" href="_n_r_e___string_8hpp.php#a0a2123576c1cb87f5fbfb7e7cbcb2221">operator+</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> <span class="keyword">const</span>&amp; lhs, <span class="keyword">const</span> T* rhs);</div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;            <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> <a class="code" href="_n_r_e___string_8hpp.php#a0a2123576c1cb87f5fbfb7e7cbcb2221">operator+</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> <span class="keyword">const</span>&amp; lhs, T rhs);</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;            <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> <a class="code" href="_n_r_e___string_8hpp.php#a0a2123576c1cb87f5fbfb7e7cbcb2221">operator+</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> &amp;&amp; lhs, <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> <span class="keyword">const</span>&amp; rhs);</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;            <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> <a class="code" href="_n_r_e___string_8hpp.php#a0a2123576c1cb87f5fbfb7e7cbcb2221">operator+</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> <span class="keyword">const</span>&amp; lhs, <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> &amp;&amp; rhs);</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;            <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> <a class="code" href="_n_r_e___string_8hpp.php#a0a2123576c1cb87f5fbfb7e7cbcb2221">operator+</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> &amp;&amp; lhs, <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> &amp;&amp; rhs);</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;            <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> <a class="code" href="_n_r_e___string_8hpp.php#a0a2123576c1cb87f5fbfb7e7cbcb2221">operator+</a>(<span class="keyword">const</span> T* lhs, <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> &amp;&amp; rhs);</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;            <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> <a class="code" href="_n_r_e___string_8hpp.php#a0a2123576c1cb87f5fbfb7e7cbcb2221">operator+</a>(T lhs, <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> &amp;&amp; rhs);</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;            <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> <a class="code" href="_n_r_e___string_8hpp.php#a0a2123576c1cb87f5fbfb7e7cbcb2221">operator+</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> &amp;&amp; lhs, <span class="keyword">const</span> T* rhs);</div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;            <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> <a class="code" href="_n_r_e___string_8hpp.php#a0a2123576c1cb87f5fbfb7e7cbcb2221">operator+</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">BasicString&lt;T&gt;</a> &amp;&amp; lhs, T rhs);</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;        }</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;    }</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;<span class="preprocessor">    #include &quot;NRE_String.tpp&quot;</span></div><div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a009469819f09df8cafa2dce131d19cb2"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a009469819f09df8cafa2dce131d19cb2">NRE::Utility::BasicString::rend</a></div><div class="ttdeci">ReverseIterator rend()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a557d930ae5e01b60275a3b01a3a19f86"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a557d930ae5e01b60275a3b01a3a19f86">NRE::Utility::BasicString::ConstIterator</a></div><div class="ttdeci">const T * ConstIterator</div><div class="ttdef"><b>Definition:</b> NRE_String.hpp:42</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a408cb985f4efc28bc4a77b672ad65cf0"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a408cb985f4efc28bc4a77b672ad65cf0">NRE::Utility::BasicString::insert</a></div><div class="ttdeci">BasicString &amp; insert(std::size_t start, std::size_t count, T value)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a1fc5c8410a87b1802e3b006a7177569c"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a1fc5c8410a87b1802e3b006a7177569c">NRE::Utility::BasicString::pushBack</a></div><div class="ttdeci">void pushBack(T value)</div></div>
<div class="ttc" id="_n_r_e___string_8hpp_php_a0a2123576c1cb87f5fbfb7e7cbcb2221"><div class="ttname"><a href="_n_r_e___string_8hpp.php#a0a2123576c1cb87f5fbfb7e7cbcb2221">NRE::Utility::operator+</a></div><div class="ttdeci">BasicString&lt; T &gt; operator+(BasicString&lt; T &gt; const &amp;lhs, BasicString&lt; T &gt; const &amp;rhs)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a7d68e5ffd1eac743a66f364e1e064536"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a7d68e5ffd1eac743a66f364e1e064536">NRE::Utility::BasicString::operator&lt;=</a></div><div class="ttdeci">bool operator&lt;=(BasicString const &amp;str) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_ab06ee127d12a726f58c955365592fe3f"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab06ee127d12a726f58c955365592fe3f">NRE::Utility::BasicString::operator&lt;</a></div><div class="ttdeci">bool operator&lt;(BasicString const &amp;str) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_afe91c26205f7c7f70d2a3edfb242fb88"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#afe91c26205f7c7f70d2a3edfb242fb88">NRE::Utility::BasicString::shrinkToFit</a></div><div class="ttdeci">void shrinkToFit()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_afe13e8614d8f30631ee893758c69275f"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#afe13e8614d8f30631ee893758c69275f">NRE::Utility::BasicString::findLastNotOf</a></div><div class="ttdeci">std::size_t findLastNotOf(BasicString const &amp;str, std::size_t pos) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_aa168f5bdce940de92d3f5c39e8159759"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#aa168f5bdce940de92d3f5c39e8159759">NRE::Utility::BasicString::getData</a></div><div class="ttdeci">const T * getData() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a364d9113d5f5ffe468e2abc0843c1b3b"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a364d9113d5f5ffe468e2abc0843c1b3b">NRE::Utility::BasicString::findFirstOf</a></div><div class="ttdeci">std::size_t findFirstOf(BasicString const &amp;str, std::size_t pos=0) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a8b2e04417a714f974453663ba7ffb6ef"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a8b2e04417a714f974453663ba7ffb6ef">NRE::Utility::BasicString::erase</a></div><div class="ttdeci">BasicString &amp; erase(std::size_t index, std::size_t count)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a649e9db31cfa007fcb42d3a72b67284c"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a649e9db31cfa007fcb42d3a72b67284c">NRE::Utility::BasicString::getMaxSize</a></div><div class="ttdeci">constexpr std::size_t getMaxSize() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_ad41793193f7610c892d24bb650c272db"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#ad41793193f7610c892d24bb650c272db">NRE::Utility::BasicString::compare</a></div><div class="ttdeci">int compare(BasicString const &amp;str) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a5479bebe9d7dbde8be07e476935468b2"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a5479bebe9d7dbde8be07e476935468b2">NRE::Utility::BasicString::findFirstNotOf</a></div><div class="ttdeci">std::size_t findFirstNotOf(BasicString const &amp;str, std::size_t pos=0) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a20fb2d291dad6b589ddc5089c50fea1d"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20fb2d291dad6b589ddc5089c50fea1d">NRE::Utility::BasicString::append</a></div><div class="ttdeci">BasicString &amp; append(K const &amp;o)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a20203ddad7a07bb0bdfb23260d7585f2"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a20203ddad7a07bb0bdfb23260d7585f2">NRE::Utility::BasicString::isEmpty</a></div><div class="ttdeci">bool isEmpty() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a1db70d8010b41e9d5d2f773cce692359"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a1db70d8010b41e9d5d2f773cce692359">NRE::Utility::BasicString::copy</a></div><div class="ttdeci">std::size_t copy(T *str, std::size_t pos, std::size_t count) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a6035700c6308e4161bfec5fee48730e0"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6035700c6308e4161bfec5fee48730e0">NRE::Utility::BasicString::clear</a></div><div class="ttdeci">void clear()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a2cf9e947bb8ed9a5deae560978c131be"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a2cf9e947bb8ed9a5deae560978c131be">NRE::Utility::BasicString::operator==</a></div><div class="ttdeci">bool operator==(BasicString const &amp;str) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_aa620f4b3a6a6e8783fdb343b919e0ef6"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#aa620f4b3a6a6e8783fdb343b919e0ef6">NRE::Utility::BasicString::cend</a></div><div class="ttdeci">ConstIterator cend() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a40d0473b2964f19ba6f4a98696cc91b2"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a40d0473b2964f19ba6f4a98696cc91b2">NRE::Utility::BasicString::end</a></div><div class="ttdeci">Iterator end()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a446670e0a8bf0b49e2c4dde3d7e68542"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a446670e0a8bf0b49e2c4dde3d7e68542">NRE::Utility::BasicString::getSize</a></div><div class="ttdeci">std::size_t getSize() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a0639e5b3e9ecf3f6fc07a0c13347266b"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a0639e5b3e9ecf3f6fc07a0c13347266b">NRE::Utility::BasicString::substr</a></div><div class="ttdeci">BasicString substr(std::size_t pos, std::size_t count) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a6ed577da05148ce11444e7aaa61e8619"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6ed577da05148ce11444e7aaa61e8619">NRE::Utility::BasicString::ReverseIterator</a></div><div class="ttdeci">std::reverse_iterator&lt; T * &gt; ReverseIterator</div><div class="ttdef"><b>Definition:</b> NRE_String.hpp:44</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a4fbaa10da05afb1e38f01550f089ec3b"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a4fbaa10da05afb1e38f01550f089ec3b">NRE::Utility::BasicString::cbegin</a></div><div class="ttdeci">ConstIterator cbegin() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_ab3e4c324e16594a98292ff51b0b00267"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab3e4c324e16594a98292ff51b0b00267">NRE::Utility::BasicString::getFront</a></div><div class="ttdeci">T &amp; getFront()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a477dbc8a44874807dd41a2d8b91ec14b"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a477dbc8a44874807dd41a2d8b91ec14b">NRE::Utility::BasicString::endsWith</a></div><div class="ttdeci">bool endsWith(BasicString const &amp;str) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a5e466d36e361dc572931d21896c527cd"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a5e466d36e361dc572931d21896c527cd">NRE::Utility::BasicString::getLast</a></div><div class="ttdeci">T &amp; getLast()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a51b3da7e0493d6fd6a870629dabc871a"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a51b3da7e0493d6fd6a870629dabc871a">NRE::Utility::BasicString::popBack</a></div><div class="ttdeci">void popBack()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a8c42d379cd90d3c8c02a0eeb31fd7482"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a8c42d379cd90d3c8c02a0eeb31fd7482">NRE::Utility::BasicString::operator&lt;&lt;</a></div><div class="ttdeci">BasicString &amp; operator&lt;&lt;(K const &amp;o)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a043d8789a2fcc13972175e55cb0ae9c0"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a043d8789a2fcc13972175e55cb0ae9c0">NRE::Utility::BasicString::reverse</a></div><div class="ttdeci">void reverse()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a6c5b14da8a367e0cb88268194e721ce0"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6c5b14da8a367e0cb88268194e721ce0">NRE::Utility::BasicString::swap</a></div><div class="ttdeci">void swap(BasicString &amp;str)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a828b20842d0d6de3e052f51e83f8dcec"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a828b20842d0d6de3e052f51e83f8dcec">NRE::Utility::BasicString::resize</a></div><div class="ttdeci">void resize(std::size_t count)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a8e216345ab62dd5997b65c21b333339f"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a8e216345ab62dd5997b65c21b333339f">NRE::Utility::BasicString::operator&gt;=</a></div><div class="ttdeci">bool operator&gt;=(BasicString const &amp;str) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a173b725cf3bfbbcf401cdf2a44b16609"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a173b725cf3bfbbcf401cdf2a44b16609">NRE::Utility::BasicString::find</a></div><div class="ttdeci">std::size_t find(BasicString const &amp;str, std::size_t pos=0) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a87336e1c57b46a945b6edf733b0a926d"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a87336e1c57b46a945b6edf733b0a926d">NRE::Utility::BasicString::begin</a></div><div class="ttdeci">Iterator begin()</div></div>
<div class="ttc" id="namespace_n_r_e_php"><div class="ttname"><a href="namespace_n_r_e.php">NRE</a></div><div class="ttdoc">The NearlyRealEngine&amp;#39;s global namespace. </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_ace21e34dff89527e0e17355e0b6bfa24"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#ace21e34dff89527e0e17355e0b6bfa24">NRE::Utility::BasicString::operator[]</a></div><div class="ttdeci">T &amp; operator[](std::size_t index)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_ae487050caf2434abc9b16bfab7241eba"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#ae487050caf2434abc9b16bfab7241eba">NRE::Utility::BasicString::crend</a></div><div class="ttdeci">ConstReverseIterator crend() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a84fd549f39f627b1caf412fac4459597"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a84fd549f39f627b1caf412fac4459597">NRE::Utility::BasicString::Iterator</a></div><div class="ttdeci">T * Iterator</div><div class="ttdef"><b>Definition:</b> NRE_String.hpp:37</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a9cd15fa3754a286297b35ea3946db3b2"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a9cd15fa3754a286297b35ea3946db3b2">NRE::Utility::BasicString::contains</a></div><div class="ttdeci">bool contains(const T *str) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a></div><div class="ttdoc">A basic template string, with dynamic size, guarantee to be in contiguous memory. ...</div><div class="ttdef"><b>Definition:</b> NRE_String.hpp:36</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a2a6ad7eedb04b8fea0193e1d80275ba6"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a2a6ad7eedb04b8fea0193e1d80275ba6">NRE::Utility::BasicString::operator=</a></div><div class="ttdeci">BasicString &amp; operator=(BasicString const &amp;str)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_ac196e1a45da4c10b3cea7ac859704c66"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#ac196e1a45da4c10b3cea7ac859704c66">NRE::Utility::BasicString::replace</a></div><div class="ttdeci">BasicString &amp; replace(std::size_t pos, std::size_t count, BasicString const &amp;str)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_ae6b6578b24ac6d25bab6829a0ca445da"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#ae6b6578b24ac6d25bab6829a0ca445da">NRE::Utility::BasicString::rfind</a></div><div class="ttdeci">std::size_t rfind(BasicString const &amp;str, std::size_t pos) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a50d7fda113a402d7e7b18669aa7ea227"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a50d7fda113a402d7e7b18669aa7ea227">NRE::Utility::BasicString::crbegin</a></div><div class="ttdeci">ConstReverseIterator crbegin() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a4767aa21ed166bbcbba3346e20063c81"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a4767aa21ed166bbcbba3346e20063c81">NRE::Utility::BasicString::~BasicString</a></div><div class="ttdeci">~BasicString()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a009f07466409c0f15528f63e273f0a5e"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a009f07466409c0f15528f63e273f0a5e">NRE::Utility::BasicString::assign</a></div><div class="ttdeci">BasicString &amp; assign(std::size_t count, T value)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a047e6ea23a748f1001aab1c7e913171a"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a047e6ea23a748f1001aab1c7e913171a">NRE::Utility::BasicString::startsWith</a></div><div class="ttdeci">bool startsWith(BasicString const &amp;str) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a3869ddf5653784b3b5734572bbfd3159"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a3869ddf5653784b3b5734572bbfd3159">NRE::Utility::BasicString::toString</a></div><div class="ttdeci">BasicString const &amp; toString() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a9a3f02658ae8cb4aefeaebfd72b92020"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a9a3f02658ae8cb4aefeaebfd72b92020">NRE::Utility::BasicString::BasicString</a></div><div class="ttdeci">BasicString()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_afaef88927e530b9475ce143779b7f851"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#afaef88927e530b9475ce143779b7f851">NRE::Utility::BasicString::operator!=</a></div><div class="ttdeci">bool operator!=(BasicString const &amp;str) const </div></div>
<div class="ttc" id="namespace_utility_php"><div class="ttname"><a href="namespace_utility.php">Utility</a></div><div class="ttdoc">Utility&amp;#39;s API. </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a7ee2c392596a64a276edf3d90b3dc01a"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a7ee2c392596a64a276edf3d90b3dc01a">NRE::Utility::BasicString::findLastOf</a></div><div class="ttdeci">std::size_t findLastOf(BasicString const &amp;str, std::size_t pos) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_aa55fab1b4557936778147ed3450c0427"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#aa55fab1b4557936778147ed3450c0427">NRE::Utility::BasicString::operator&gt;</a></div><div class="ttdeci">bool operator&gt;(BasicString const &amp;str) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a21efaef50166a748a6a26db815cfeef5"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a21efaef50166a748a6a26db815cfeef5">NRE::Utility::BasicString::reserve</a></div><div class="ttdeci">void reserve(std::size_t size)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a6ed01f192a9c748153b095d56da2796a"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a6ed01f192a9c748153b095d56da2796a">NRE::Utility::BasicString::getLength</a></div><div class="ttdeci">std::size_t getLength() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a328ebd77a8bbb49a6776fefd417ebf4a"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a328ebd77a8bbb49a6776fefd417ebf4a">NRE::Utility::BasicString::getCapacity</a></div><div class="ttdeci">std::size_t getCapacity() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a295b7f396e515c30e490d0d8a10b7e30"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a295b7f396e515c30e490d0d8a10b7e30">NRE::Utility::BasicString::rbegin</a></div><div class="ttdeci">ReverseIterator rbegin()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_ab4db6b5abd9d325e1a343e257b8799a2"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#ab4db6b5abd9d325e1a343e257b8799a2">NRE::Utility::BasicString::operator+=</a></div><div class="ttdeci">BasicString &amp; operator+=(BasicString const &amp;str)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php_a0077ab896a00c0aa6e785fffb2b417d5"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php#a0077ab896a00c0aa6e785fffb2b417d5">NRE::Utility::BasicString::getCData</a></div><div class="ttdeci">const T * getCData() const </div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- HTML footer for doxygen 1.8.8-->
<!-- start footer part -->
</div>
</div>
</div>
</div>
</body>
</html>
