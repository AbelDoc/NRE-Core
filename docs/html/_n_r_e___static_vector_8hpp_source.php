<!-- HTML header for doxygen 1.8.8-->
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <!-- For Mobile Devices -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
        <meta name="generator" content="Doxygen 1.8.11"/>
        <script type="text/javascript" src="../../js/jquery-2.1.1.min.js"></script>
        <title>NRE-Utility: /mnt/c/Users/abell/Documents/GitHub/NRE-Utility/src/Utility/StaticVector/NRE_StaticVector.hpp Source File</title>
        <!--<link href="tabs.css" rel="stylesheet" type="text/css"/>-->
        <script type="text/javascript" src="dynsections.js"></script>
        <link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <link href='https://fonts.googleapis.com/css?family=Roboto+Slab' rel='stylesheet' type='text/css'>
        <?php
            include '../../php/navigation.php';
            if (!isset($_COOKIE["theme"]) || $_COOKIE["theme"] == "dark") {
                echo '<link href="../../css/dark/bootstrap.css" rel="stylesheet">';
            } else {
                echo '<link href="../../css/light/bootstrap.css" rel="stylesheet">';
            }
        ?>
        <script src="../../js/bootstrap.min.js"></script>
        <script type="text/javascript" src="doxy-boot.js"></script>
    </head>
    <body>
        <div class="container-fluid">
            <header class="page-header">
                <a href="../../../index.php">
                    <img src="../../img/Logo.png" class="logo img-responsive"/>
                </a>
            </header>
            <?php addNavigationBarInl(false); ?>
            <div id="top" class="row"><!-- do not remove this div, it is closed by doxygen! -->
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-body">
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li><a href="annotated.php"><span>Classes</span></a></li>
      <li class="current"><a href="files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.php"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.php">src</a></li><li class="navelem"><a class="el" href="dir_9761b53e3d9349800c0cb59b71c8cd3d.php">Utility</a></li><li class="navelem"><a class="el" href="dir_f7032605982ef0863e7cd8273e29e4bc.php">StaticVector</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">NRE_StaticVector.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_r_e___static_vector_8hpp.php">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;    </div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">    #pragma once</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;    </div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">    #include &lt;stdexcept&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">    #include &lt;utility&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">    #include &lt;limits&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">    #include &lt;cstring&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    </div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">    #include &quot;../String/NRE_String.hpp&quot;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">    #include &quot;../Interfaces/Stringable/NRE_Stringable.hpp&quot;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    </div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="keyword">namespace </span><a class="code" href="namespace_n_r_e.php">NRE</a> {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <span class="keyword">namespace </span><a class="code" href="namespace_utility.php">Utility</a> {</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;            </div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T, std::<span class="keywordtype">size_t</span> Size = 128&gt;</div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_static_vector.php">   36</a></span>&#160;            <span class="keyword">class </span><a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> : <span class="keyword">public</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_stringable.php">Stringable</a>&lt;StaticVector&lt;T, Size&gt;&gt; {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                <span class="keyword">public</span> :    <span class="comment">// Iterator</span></div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7fcd032b11c041d13f635cfeb2f49c27">   39</a></span>&#160;<span class="comment"></span>                    <span class="keyword">typedef</span> T*          <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7fcd032b11c041d13f635cfeb2f49c27">Iterator</a>;</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">   41</a></span>&#160;                    <span class="keyword">typedef</span> <span class="keyword">const</span> T*    <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">ConstIterator</a>;</div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a1f5c21e6c9193fa4940d03c964590442">   43</a></span>&#160;                    <span class="keyword">typedef</span> std::reverse_iterator&lt;T*&gt;          <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a1f5c21e6c9193fa4940d03c964590442">ReverseIterator</a>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                    <span class="keyword">typedef</span> std::reverse_iterator&lt;const T*&gt;    ConstReverseIterator;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                <span class="keyword">private</span> :   <span class="comment">// Fields</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                    std::size_t length;     </div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                    T data[Size];           </div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                <span class="keyword">public</span> :    <span class="comment">// Methods</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                    <span class="comment">//## Constructor ##//</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#afa1c9d782e0b1f38982f4fb254177efb">StaticVector</a>();</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#afa1c9d782e0b1f38982f4fb254177efb">StaticVector</a>(std::size_t count, T <span class="keyword">const</span>&amp; value);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#afa1c9d782e0b1f38982f4fb254177efb">StaticVector</a>(std::size_t count);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> InputIterator&gt;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#afa1c9d782e0b1f38982f4fb254177efb">StaticVector</a>(InputIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#aae759805a397f1e53d813386a6b4fcba">begin</a>, InputIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ab0ad64f96eee06c352dd4bdad7cf6488">end</a>);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#afa1c9d782e0b1f38982f4fb254177efb">StaticVector</a>(std::initializer_list&lt;T&gt; init);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        </div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                    <span class="comment">//## Copy Constructor ##//</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#afa1c9d782e0b1f38982f4fb254177efb">StaticVector</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> <span class="keyword">const</span>&amp; vec);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        </div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                    <span class="comment">//## Move Constructor ##//</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#afa1c9d782e0b1f38982f4fb254177efb">StaticVector</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> &amp;&amp; vec);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        </div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                    <span class="comment">//## Deconstructor ##//</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#aa5808b79191635ede98e88037adc8d3b">~StaticVector</a>();</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        </div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    <span class="comment">//## Getter ##//</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment"></span>                        T&amp; <span class="keyword">get</span>(std::size_t index);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                        T <span class="keyword">const</span>&amp; <span class="keyword">get</span>(std::size_t index) <span class="keyword">const</span>;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                        T* <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a6ebf72339bed36d6304592ef52e18ca7">getData</a>();</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                        <span class="keyword">const</span> T* <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a6ebf72339bed36d6304592ef52e18ca7">getData</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                        T&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ae4958b164752fdcac971c6492e6a55f1">getFront</a>();</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                        T <span class="keyword">const</span>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ae4958b164752fdcac971c6492e6a55f1">getFront</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                        T&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ad73462ddd98765e33c9f68b9819eeb26">getLast</a>();</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                        T <span class="keyword">const</span>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ad73462ddd98765e33c9f68b9819eeb26">getLast</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ad4300db606d0a96b08dbba70d7ed2b26">getSize</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                        constexpr std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a5cef7ab987ef35f282e478bffed17775">getMaxSize</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                        std::size_t <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a11f3700de1db9cae700d91e6514903c9">getCapacity</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                        <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a058991a6569d52b25ca1147a82a3e07e">isEmpty</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        </div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                    <span class="comment">//## Iterator Access ##//</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment"></span>                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#aae759805a397f1e53d813386a6b4fcba">begin</a>();</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                        ConstIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#aae759805a397f1e53d813386a6b4fcba">begin</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                        ConstIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a8f49b4de898a83df5c2fd0b249fe0f00">cbegin</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ab0ad64f96eee06c352dd4bdad7cf6488">end</a>();</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                        ConstIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ab0ad64f96eee06c352dd4bdad7cf6488">end</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                        ConstIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a8f88776063e8b426848c7d4d3097d250">cend</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                        ReverseIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a2eeb5673b5d72f2ae28349fa5b46523d">rbegin</a>();</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                        ConstReverseIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a2eeb5673b5d72f2ae28349fa5b46523d">rbegin</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                        ConstReverseIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ab501e43131d88fa4b4468ec09d49287b">crbegin</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                        ReverseIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a47bf9791abb7dae3d4e030892a9848e6">rend</a>();</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                        ConstReverseIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a47bf9791abb7dae3d4e030892a9848e6">rend</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                        ConstReverseIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ac058c5285e5f1cdee2e6da84e74c0e5f">crend</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        </div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                    <span class="comment">//## Methods ##//</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment"></span>                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a29a698aacd80e36570b072bb03804dfc">assign</a>(std::size_t count, T <span class="keyword">const</span>&amp; value);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> InputIterator&gt;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a29a698aacd80e36570b072bb03804dfc">assign</a>(InputIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#aae759805a397f1e53d813386a6b4fcba">begin</a>, InputIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ab0ad64f96eee06c352dd4bdad7cf6488">end</a>);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                        template &lt;typename U = T, typename std::enable_if&lt;!std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00228"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a38f00c518ce8bb84f58519b4511a6558">  228</a></span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a38f00c518ce8bb84f58519b4511a6558">clear</a>() noexcept {</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                            <span class="keywordflow">for</span> (std::size_t i = 0; i &lt; length; i++) {</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                                data[i].~T();</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                            }</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                            length = 0;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                        }</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                        template &lt;typename U = T, typename std::enable_if&lt;std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00238"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a38f00c518ce8bb84f58519b4511a6558">  238</a></span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a38f00c518ce8bb84f58519b4511a6558">clear</a>() noexcept {</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                            length = 0;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                        }</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a022748193bc61fd8485f18d1c2428dc3">insert</a>(ConstIterator start, T <span class="keyword">const</span>&amp; value);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a022748193bc61fd8485f18d1c2428dc3">insert</a>(ConstIterator start, std::size_t count, T <span class="keyword">const</span>&amp; value);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> InputIterator&gt;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a022748193bc61fd8485f18d1c2428dc3">insert</a>(ConstIterator start, InputIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#aae759805a397f1e53d813386a6b4fcba">begin</a>, InputIterator <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ab0ad64f96eee06c352dd4bdad7cf6488">end</a>);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a022748193bc61fd8485f18d1c2428dc3">insert</a>(ConstIterator start, std::initializer_list&lt;T&gt; list);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class </span>... Args&gt;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a04a8cca783c737ce4f271fd42eb3e24b">emplace</a>(ConstIterator start, Args &amp;&amp; ... args);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ad34425290bdef5958e6f0cf343bf305c">erase</a>(ConstIterator pos);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                        Iterator <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ad34425290bdef5958e6f0cf343bf305c">erase</a>(ConstIterator begin, ConstIterator end);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#aa30dbf77ea78f7b7e359aca82f2db2e6">pushBack</a>(T <span class="keyword">const</span>&amp; value);</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#aa30dbf77ea78f7b7e359aca82f2db2e6">pushBack</a>(T &amp;&amp; value);</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class </span>... Args&gt;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ae70c6300a4d0facb7cf3232d2ab11ce0">emplaceBack</a>(Args &amp;&amp; ... args);</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                        template &lt;typename U = T, typename std::enable_if&lt;!std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00318"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_static_vector.php#adddc7f4c611502fcf6f6bb55141325f1">  318</a></span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#adddc7f4c611502fcf6f6bb55141325f1">popBack</a>() {</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                            *(<a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#ab0ad64f96eee06c352dd4bdad7cf6488">end</a>() - 1).~T();</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                            length--;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                        }</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                        template &lt;typename U = T, typename std::enable_if&lt;std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00326"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_static_vector.php#adddc7f4c611502fcf6f6bb55141325f1">  326</a></span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#adddc7f4c611502fcf6f6bb55141325f1">popBack</a>() {</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                            length--;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                        }</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7b042e680e0db082326466e494fee436">resize</a>(std::size_t count);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7b042e680e0db082326466e494fee436">resize</a>(std::size_t count, T <span class="keyword">const</span>&amp; value);</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a66a0be1752a04198ac5a58fe1368ece7">swap</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a>&amp; vec);</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        </div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                    <span class="comment">//## Access Operator ##//</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="comment"></span>                        T&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#adb6ffb6eb79687ffd391a28f81c6455b">operator[]</a>(std::size_t index);</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                        T <span class="keyword">const</span>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#adb6ffb6eb79687ffd391a28f81c6455b">operator[]</a>(std::size_t index) <span class="keyword">const</span>;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        </div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                    <span class="comment">//## Assignment Operator ##//</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a21511b3b12b38cf0254d099d014ad253">operator =</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> <span class="keyword">const</span>&amp; vec);</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                        <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a>&amp; <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a21511b3b12b38cf0254d099d014ad253">operator =</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> &amp;&amp; vec);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        </div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                    <span class="comment">//## Comparison Operator ##//</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="comment"></span>                        template &lt;typename U = T, typename std::enable_if&lt;!std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00381"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a522adbfcb3a52831fecedbd5a4864e46">  381</a></span>&#160;                        <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a522adbfcb3a52831fecedbd5a4864e46">operator ==</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> <span class="keyword">const</span>&amp; vec)<span class="keyword"> const </span>{</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                            <span class="keywordtype">bool</span> equal = <span class="keyword">true</span>;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                            std::size_t current = 0;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                            <span class="keywordflow">while</span> (equal &amp;&amp; current &lt; length) {</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                                equal = data[current] == vec[current];</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                                current++;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                            }</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                            <span class="keywordflow">return</span> equal;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                        }</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                        template &lt;typename U = T, typename std::enable_if&lt;std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00396"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a522adbfcb3a52831fecedbd5a4864e46">  396</a></span>&#160;                        <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a522adbfcb3a52831fecedbd5a4864e46">operator ==</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> <span class="keyword">const</span>&amp; vec)<span class="keyword"> const </span>{</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                            <span class="keywordflow">if</span> (length != vec.length) {</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                            }</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                            <span class="keywordflow">return</span> std::memcmp(data, vec.data, length * <span class="keyword">sizeof</span>(T)) == 0;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                        }</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                        <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#a244cc18bc667549731cd2e095cf51202">operator !=</a>(<a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> <span class="keyword">const</span>&amp; vec) <span class="keyword">const</span>;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        </div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                    <span class="comment">//## Stream Operator ##//</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_utility_1_1_basic_string.php">String</a> <a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php#af3127ae80bb19109fc51b6b1557215d2">toString</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    </div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                <span class="keyword">private</span> :   <span class="comment">// Methods</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment"></span>                        template &lt;typename U = T, typename std::enable_if&lt;!std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                        <span class="keywordtype">void</span> shift(std::size_t start, std::size_t count) {</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                            <span class="keywordflow">for</span> (std::size_t index = length + count - 1; index != start + count - 1; index--) {</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                                <span class="keyword">new</span>(&amp;data[index]) T (std::move(data[index - count]));</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                            }</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                        }</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                        template &lt;typename U = T, typename std::enable_if&lt;std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                        <span class="keywordtype">void</span> shift(std::size_t start, std::size_t count) {</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                            std::memmove(data + start + count, data + start, (length - start) * <span class="keyword">sizeof</span>(T));</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                        }</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                        template &lt;typename U = T, typename std::enable_if&lt;!std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                        <span class="keywordtype">void</span> shiftBack(std::size_t start, std::size_t count) {</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                            <span class="keywordflow">for</span> (std::size_t index = start; index &lt; start + count; index++) {</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                                <span class="keyword">new</span>(&amp;data[index]) T (std::move(data[index + count]));</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                            }</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                        }</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                        template &lt;typename U = T, typename std::enable_if&lt;std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                        <span class="keywordtype">void</span> shiftBack(std::size_t start, std::size_t count) {</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                            std::memmove(data + start, data + start + count, (length - start) * <span class="keyword">sizeof</span>(T));</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                        }</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                        template &lt;typename U = T, typename std::enable_if&lt;!std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                        <span class="keywordtype">void</span> copy(<a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> <span class="keyword">const</span>&amp; vec) {</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                            std::size_t current = 0;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                            <span class="keywordflow">for</span> (T <span class="keyword">const</span>&amp; it : vec) {</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                                <span class="keyword">new</span>(&amp;data[current]) T (it);</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                                current++;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                            }</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                        }</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                        template &lt;typename U = T, typename std::enable_if&lt;std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                        <span class="keywordtype">void</span> copy(<a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> <span class="keyword">const</span>&amp; vec) {</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                            std::memcpy(data, vec.data, vec.length * <span class="keyword">sizeof</span>(T));</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                        }</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                        template &lt;typename U = T, typename std::enable_if&lt;!std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                        <span class="keywordtype">void</span> move(<a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> <span class="keyword">const</span>&amp; vec) {</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                            std::size_t current = 0;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                            <span class="keywordflow">for</span> (T <span class="keyword">const</span>&amp; it : vec) {</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                                <span class="keyword">new</span>(&amp;data[current]) T (std::move(it));</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                                current++;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                            }</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                        }</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                        template &lt;typename U = T, typename std::enable_if&lt;std::is_pod&lt;U&gt;::value, <span class="keywordtype">int</span>&gt;::type = 0&gt;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                        <span class="keywordtype">void</span> move(<a class="code" href="class_n_r_e_1_1_utility_1_1_static_vector.php">StaticVector</a> <span class="keyword">const</span>&amp; vec) {</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                            std::memmove(data, vec.data, vec.length * <span class="keyword">sizeof</span>(T));</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                        }</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            };</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        </div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        }</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    }</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="preprocessor">    #include &quot;NRE_StaticVector.tpp&quot;</span></div><div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_a244cc18bc667549731cd2e095cf51202"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#a244cc18bc667549731cd2e095cf51202">NRE::Utility::StaticVector::operator!=</a></div><div class="ttdeci">bool operator!=(StaticVector const &amp;vec) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_a9fb3a9830033245bc2160609de5ba318"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#a9fb3a9830033245bc2160609de5ba318">NRE::Utility::StaticVector::ConstIterator</a></div><div class="ttdeci">const T * ConstIterator</div><div class="ttdef"><b>Definition:</b> NRE_StaticVector.hpp:41</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_a38f00c518ce8bb84f58519b4511a6558"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#a38f00c518ce8bb84f58519b4511a6558">NRE::Utility::StaticVector::clear</a></div><div class="ttdeci">void clear() noexcept</div><div class="ttdef"><b>Definition:</b> NRE_StaticVector.hpp:228</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_a66a0be1752a04198ac5a58fe1368ece7"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#a66a0be1752a04198ac5a58fe1368ece7">NRE::Utility::StaticVector::swap</a></div><div class="ttdeci">void swap(StaticVector &amp;vec)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_a7b042e680e0db082326466e494fee436"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7b042e680e0db082326466e494fee436">NRE::Utility::StaticVector::resize</a></div><div class="ttdeci">void resize(std::size_t count)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_afa1c9d782e0b1f38982f4fb254177efb"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#afa1c9d782e0b1f38982f4fb254177efb">NRE::Utility::StaticVector::StaticVector</a></div><div class="ttdeci">StaticVector()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_a022748193bc61fd8485f18d1c2428dc3"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#a022748193bc61fd8485f18d1c2428dc3">NRE::Utility::StaticVector::insert</a></div><div class="ttdeci">Iterator insert(ConstIterator start, T const &amp;value)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_ab501e43131d88fa4b4468ec09d49287b"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#ab501e43131d88fa4b4468ec09d49287b">NRE::Utility::StaticVector::crbegin</a></div><div class="ttdeci">ConstReverseIterator crbegin() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_a8f49b4de898a83df5c2fd0b249fe0f00"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#a8f49b4de898a83df5c2fd0b249fe0f00">NRE::Utility::StaticVector::cbegin</a></div><div class="ttdeci">ConstIterator cbegin() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_stringable_php"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_stringable.php">NRE::Utility::Stringable</a></div><div class="ttdoc">Describe an stringable object. </div><div class="ttdef"><b>Definition:</b> NRE_Stringable.hpp:33</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_a47bf9791abb7dae3d4e030892a9848e6"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#a47bf9791abb7dae3d4e030892a9848e6">NRE::Utility::StaticVector::rend</a></div><div class="ttdeci">ReverseIterator rend()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_a2eeb5673b5d72f2ae28349fa5b46523d"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#a2eeb5673b5d72f2ae28349fa5b46523d">NRE::Utility::StaticVector::rbegin</a></div><div class="ttdeci">ReverseIterator rbegin()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_a6ebf72339bed36d6304592ef52e18ca7"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#a6ebf72339bed36d6304592ef52e18ca7">NRE::Utility::StaticVector::getData</a></div><div class="ttdeci">T * getData()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_adddc7f4c611502fcf6f6bb55141325f1"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#adddc7f4c611502fcf6f6bb55141325f1">NRE::Utility::StaticVector::popBack</a></div><div class="ttdeci">void popBack()</div><div class="ttdef"><b>Definition:</b> NRE_StaticVector.hpp:318</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_aa5808b79191635ede98e88037adc8d3b"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#aa5808b79191635ede98e88037adc8d3b">NRE::Utility::StaticVector::~StaticVector</a></div><div class="ttdeci">~StaticVector()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_a1f5c21e6c9193fa4940d03c964590442"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#a1f5c21e6c9193fa4940d03c964590442">NRE::Utility::StaticVector::ReverseIterator</a></div><div class="ttdeci">std::reverse_iterator&lt; T * &gt; ReverseIterator</div><div class="ttdef"><b>Definition:</b> NRE_StaticVector.hpp:43</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_a29a698aacd80e36570b072bb03804dfc"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#a29a698aacd80e36570b072bb03804dfc">NRE::Utility::StaticVector::assign</a></div><div class="ttdeci">void assign(std::size_t count, T const &amp;value)</div></div>
<div class="ttc" id="namespace_n_r_e_php"><div class="ttname"><a href="namespace_n_r_e.php">NRE</a></div><div class="ttdoc">The NearlyRealEngine&amp;#39;s global namespace. </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_a5cef7ab987ef35f282e478bffed17775"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#a5cef7ab987ef35f282e478bffed17775">NRE::Utility::StaticVector::getMaxSize</a></div><div class="ttdeci">constexpr std::size_t getMaxSize() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_basic_string_php"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_basic_string.php">NRE::Utility::BasicString</a></div><div class="ttdoc">A basic template string, with dynamic size, guarantee to be in contiguous memory. ...</div><div class="ttdef"><b>Definition:</b> NRE_String.hpp:38</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_ae4958b164752fdcac971c6492e6a55f1"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#ae4958b164752fdcac971c6492e6a55f1">NRE::Utility::StaticVector::getFront</a></div><div class="ttdeci">T &amp; getFront()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_aae759805a397f1e53d813386a6b4fcba"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#aae759805a397f1e53d813386a6b4fcba">NRE::Utility::StaticVector::begin</a></div><div class="ttdeci">Iterator begin()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_ab0ad64f96eee06c352dd4bdad7cf6488"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#ab0ad64f96eee06c352dd4bdad7cf6488">NRE::Utility::StaticVector::end</a></div><div class="ttdeci">Iterator end()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_a8f88776063e8b426848c7d4d3097d250"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#a8f88776063e8b426848c7d4d3097d250">NRE::Utility::StaticVector::cend</a></div><div class="ttdeci">ConstIterator cend() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_ac058c5285e5f1cdee2e6da84e74c0e5f"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#ac058c5285e5f1cdee2e6da84e74c0e5f">NRE::Utility::StaticVector::crend</a></div><div class="ttdeci">ConstReverseIterator crend() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_a21511b3b12b38cf0254d099d014ad253"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#a21511b3b12b38cf0254d099d014ad253">NRE::Utility::StaticVector::operator=</a></div><div class="ttdeci">StaticVector &amp; operator=(StaticVector const &amp;vec)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_a7fcd032b11c041d13f635cfeb2f49c27"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#a7fcd032b11c041d13f635cfeb2f49c27">NRE::Utility::StaticVector::Iterator</a></div><div class="ttdeci">T * Iterator</div><div class="ttdef"><b>Definition:</b> NRE_StaticVector.hpp:39</div></div>
<div class="ttc" id="namespace_utility_php"><div class="ttname"><a href="namespace_utility.php">Utility</a></div><div class="ttdoc">Utility&amp;#39;s API. </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_ae70c6300a4d0facb7cf3232d2ab11ce0"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#ae70c6300a4d0facb7cf3232d2ab11ce0">NRE::Utility::StaticVector::emplaceBack</a></div><div class="ttdeci">void emplaceBack(Args &amp;&amp;...args)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_ad4300db606d0a96b08dbba70d7ed2b26"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#ad4300db606d0a96b08dbba70d7ed2b26">NRE::Utility::StaticVector::getSize</a></div><div class="ttdeci">std::size_t getSize() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_adb6ffb6eb79687ffd391a28f81c6455b"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#adb6ffb6eb79687ffd391a28f81c6455b">NRE::Utility::StaticVector::operator[]</a></div><div class="ttdeci">T &amp; operator[](std::size_t index)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_a04a8cca783c737ce4f271fd42eb3e24b"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#a04a8cca783c737ce4f271fd42eb3e24b">NRE::Utility::StaticVector::emplace</a></div><div class="ttdeci">Iterator emplace(ConstIterator start, Args &amp;&amp;...args)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_ad73462ddd98765e33c9f68b9819eeb26"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#ad73462ddd98765e33c9f68b9819eeb26">NRE::Utility::StaticVector::getLast</a></div><div class="ttdeci">T &amp; getLast()</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_ad34425290bdef5958e6f0cf343bf305c"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#ad34425290bdef5958e6f0cf343bf305c">NRE::Utility::StaticVector::erase</a></div><div class="ttdeci">Iterator erase(ConstIterator pos)</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_a058991a6569d52b25ca1147a82a3e07e"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#a058991a6569d52b25ca1147a82a3e07e">NRE::Utility::StaticVector::isEmpty</a></div><div class="ttdeci">bool isEmpty() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_a522adbfcb3a52831fecedbd5a4864e46"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#a522adbfcb3a52831fecedbd5a4864e46">NRE::Utility::StaticVector::operator==</a></div><div class="ttdeci">bool operator==(StaticVector const &amp;vec) const </div><div class="ttdef"><b>Definition:</b> NRE_StaticVector.hpp:381</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_af3127ae80bb19109fc51b6b1557215d2"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#af3127ae80bb19109fc51b6b1557215d2">NRE::Utility::StaticVector::toString</a></div><div class="ttdeci">String toString() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_a11f3700de1db9cae700d91e6514903c9"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#a11f3700de1db9cae700d91e6514903c9">NRE::Utility::StaticVector::getCapacity</a></div><div class="ttdeci">std::size_t getCapacity() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php">NRE::Utility::StaticVector</a></div><div class="ttdoc">A static vector, with a fixed size capacity on the stack but vector behavior. </div><div class="ttdef"><b>Definition:</b> NRE_StaticVector.hpp:36</div></div>
<div class="ttc" id="class_n_r_e_1_1_utility_1_1_static_vector_php_aa30dbf77ea78f7b7e359aca82f2db2e6"><div class="ttname"><a href="class_n_r_e_1_1_utility_1_1_static_vector.php#aa30dbf77ea78f7b7e359aca82f2db2e6">NRE::Utility::StaticVector::pushBack</a></div><div class="ttdeci">void pushBack(T const &amp;value)</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- HTML footer for doxygen 1.8.8-->
<!-- start footer part -->
</div>
</div>
</div>
</div>
</body>
</html>
